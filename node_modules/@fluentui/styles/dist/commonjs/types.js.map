{"version":3,"file":"types.js","names":[],"sources":["types.ts"],"sourcesContent":["import * as CSS from 'csstype';\n\n// ========================================================\n// Debug\n// ========================================================\n\nexport type DebugData = {\n  componentName: string;\n  siteVariables: Object[];\n  componentVariables: Object[];\n  componentStyles: Record<string, Object[]>;\n};\n\n// ========================================================\n// Utility types\n// ========================================================\n\nexport type Extendable<T, V = any> = T & {\n  [key: string]: V;\n};\n\nexport type ObjectOrFunc<TResult, TArg = {}> = ((arg: TArg) => TResult) | TResult;\n\n// ========================================================\n// CSS in JS\n// ========================================================\n\nexport type AnimationKeyFrame = Record<'from' | 'to' | string, CSSCustom>;\n\nexport interface AnimationName<P = Record<string, any>> {\n  keyframe?: AnimationKeyFrame | ((params: P) => AnimationKeyFrame);\n  params?: P;\n}\n\ntype CSSProperties = Omit<CSS.Properties<number | string>, 'animationName'> & {\n  // missing React.CSSProperties\n  speak?: CSS.Globals | 'none' | 'normal' | 'spell-out';\n\n  // TODO Questionable: unsupported by autoprefixer, one-off vendors\n  // we could expand these ourselves so that \"font-smoothing\" works, but which values?\n  WebkitFontSmoothing?: CSS.Globals | 'auto' | 'none' | 'antialiased' | 'subpixel-antialiased';\n  MozOsxFontSmoothing?: CSS.Globals | 'auto' | 'grayscale';\n\n  // To be compatible with Emotion KebabCased rules should be used\n  // I.e. \"'-webkit-box-orient'\" => \"WebkitBoxOrient\"\n  '-webkit-appearance'?: never;\n  '-webkit-box-orient'?: never;\n  '-webkit-font-smoothing'?: never;\n  '-webkit-line-clamp'?: never;\n  '-webkit-text-fill-color'?: never;\n  // It would be nice to reuse there template literal types, but they are not supported as indexes yet\n  // https://github.com/microsoft/TypeScript/pull/26797\n};\n\ntype CSSObject = CSSProperties &\n  CSSPseudos & { animationName?: AnimationName<any> | AnimationKeyFrame | string | 'none' };\n\ntype CSSCustom = { [prop: string]: number | string | ICSSInJSStyle };\ntype CSSPseudos = { [K in CSS.Pseudos]?: CSSObject & { content?: string } };\n\nexport type ICSSInJSStyle = CSSObject | CSSCustom;\n\nexport interface ThemeAnimation<KP = {}> {\n  keyframe: ((kp: KP) => object) | object | string;\n  delay?: string;\n  direction?: string;\n  duration?: string;\n  fillMode?: string;\n  iterationCount?: string;\n  playState?: string;\n  timingFunction?: string;\n  keyframeParams?: KP;\n}\n\n// ========================================================\n// Fonts\n// ========================================================\n\nexport interface FontFaceProps {\n  fontStretch?: string;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: number;\n  localAlias?: string | string[];\n  unicodeRange?: string;\n}\n\nexport interface FontFace {\n  name: string;\n  paths: string[];\n  props: FontFaceProps;\n}\n\nexport type FontFaces = FontFace[];\n\n// ========================================================\n// Site Variables\n// ========================================================\n\nexport interface SiteVariablesInput extends Record<string, any> {}\n\nexport interface SiteVariablesPrepared extends SiteVariablesInput {\n  fontSizes: Record<string, string>;\n}\n\n// ========================================================\n// Component Variables\n// ========================================================\n\nexport type ComponentVariablesObject = any;\n\n// TODO: Make this generic\nexport type ComponentVariablesInput = ComponentVariablesObject | ComponentVariablesPrepared;\n\nexport type ComponentVariablesPrepared = (siteVariables?: SiteVariablesPrepared) => ComponentVariablesObject;\n\n// ========================================================\n// Component Style Props\n// ========================================================\n\nexport type ComponentSlotStyle<TProps = {}, TVars = {}> = ComponentSlotStyleFunction<TProps, TVars> | ICSSInJSStyle;\n\nexport type PropsWithVarsAndStyles = Extendable<{\n  variables?: ComponentVariablesInput;\n  styles?: ComponentSlotStyle;\n}>;\n\n// ========================================================\n// Component Styles\n// ========================================================\n\nexport interface ComponentSlotStylesInput<TProps = {}, TVars = {}>\n  extends Record<string, ComponentSlotStyle<TProps, TVars>> {}\n\nexport interface ComponentSlotStylesPrepared<TProps = {}, TVars = {}>\n  extends Record<string, ComponentSlotStyleFunction<TProps, TVars>> {}\n\nexport interface ComponentSlotStylesResolved extends Record<string, ICSSInJSStyle> {}\n\nexport interface ComponentStyleFunctionParam<\n  TProps extends PropsWithVarsAndStyles = PropsWithVarsAndStyles,\n  TVars extends ComponentVariablesObject = ComponentVariablesObject,\n> {\n  props: TProps;\n  variables: TVars;\n  theme: ThemePrepared;\n  rtl: boolean;\n  disableAnimations: boolean;\n}\n\nexport type ComponentSlotStyleFunction<TProps = {}, TVars = {}> = (\n  styleParam: ComponentStyleFunctionParam<TProps, TVars>,\n) => ICSSInJSStyle;\n\nexport interface ComponentSlotStylesPrepared<TProps = {}, TVars = {}>\n  extends Record<string, ComponentSlotStyleFunction<TProps, TVars>> {}\n\n// ========================================================\n// Static Styles\n// ========================================================\n\nexport type StaticStyleObject = Record<string, ICSSInJSStyle>;\n\nexport type StaticStyleRenderable = string | StaticStyleObject;\n\nexport type StaticStyleFunction = (siteVariables?: SiteVariablesPrepared) => StaticStyleObject;\n\nexport type StaticStyle = StaticStyleRenderable | StaticStyleFunction;\n\nexport type StaticStyles = StaticStyle[];\n\n// ========================================================\n// TODO: Theme typings that have no sense\n// ========================================================\n\nexport type ThemeComponentVariablesInput<ThemeStylesProps = any> = {\n  [K in keyof ThemeStylesProps]?: ComponentVariablesInput;\n} & Record<string, any>;\n\nexport type ThemeComponentVariablesPrepared<ThemeStylesProps = any> = {\n  [K in keyof ThemeStylesProps]?: ComponentVariablesPrepared;\n} & Record<string, any>;\n\nexport type ThemeComponentStylesInput<ThemeStylesProps = any> = {\n  [K in keyof ThemeStylesProps]?: ComponentSlotStylesInput<ThemeStylesProps[K]>;\n} & Record<string, ComponentSlotStylesInput | undefined>;\n\nexport type ThemeComponentStylesPrepared<ThemeStylesProps = any> = {\n  [K in keyof ThemeStylesProps]?: ComponentSlotStylesPrepared<ThemeStylesProps[K]>;\n} & Record<string, ComponentSlotStylesPrepared | undefined>;\n\n// ========================================================\n// Theme\n// ========================================================\n\nexport interface ThemeInput<ThemeStylesProps extends Record<string, any> = any> {\n  siteVariables?: SiteVariablesInput;\n  componentVariables?: ThemeComponentVariablesInput<ThemeStylesProps>;\n  componentStyles?: ThemeComponentStylesInput<ThemeStylesProps>;\n  fontFaces?: FontFaces;\n  staticStyles?: StaticStyles;\n  animations?: { [key: string]: ThemeAnimation };\n}\n\n// Component variables and styles must be resolved by the component after\n// all cascading is complete, not by any Provider in the middle of the tree.\n// This ensures the final site variables are used in the component's variables\n// and styles. Resolving component variables/styles in the Provider would mean\n// the latest site variables might not be applied to the component.\n//\n// As a theme cascades down the tree and is merged with the previous theme on\n// context, the resulting theme takes this shape.\nexport interface ThemePrepared<ThemeStylesProps extends Record<string, any> = any> {\n  siteVariables: SiteVariablesPrepared;\n  componentVariables: ThemeComponentVariablesPrepared<ThemeStylesProps>;\n  componentStyles: ThemeComponentStylesPrepared<ThemeStylesProps>;\n  fontFaces: FontFaces;\n  staticStyles: StaticStyles;\n  animations: Record<string, ThemeAnimation>;\n}\n"],"mappings":""}
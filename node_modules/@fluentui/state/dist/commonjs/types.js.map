{"version":3,"file":"types.js","names":[],"sources":["types.ts"],"sourcesContent":["export type AnyAction = (...args: any[]) => void;\nexport type AnyActions = Record<string, AnyAction>;\n\nexport type Middleware<State, Actions> = (prevState: State, nextState: State, actions: Actions) => Partial<State>;\n\nexport type SideEffect<State> = (prevState: State, nextState: State) => void;\n\nexport type EnhancedAction<\n  State,\n  Actions extends AnyActions,\n  Action extends AnyAction = AnyActions[keyof AnyActions],\n> = (...args: Parameters<Action>) => (state: State, actions: Actions) => Partial<State> | void;\n\nexport type EnhancedActions<State, Actions extends AnyActions> = {\n  [Name in keyof Actions]: EnhancedAction<State, Actions, Actions[Name]>;\n};\n\nexport type ManagerConfig<State, Actions extends AnyActions> = {\n  actions: EnhancedActions<State, Actions>;\n  debug?: boolean;\n  middleware?: Middleware<State, Actions>[];\n  state?: Partial<State>;\n  sideEffects?: SideEffect<State>[];\n};\n\nexport type ManagerFactory<State, Actions extends AnyActions> = (\n  config: ManagerConfig<State, Actions>,\n) => Manager<State, Actions>;\n\nexport type Manager<State, Actions> = {\n  readonly state: State;\n  actions: Actions;\n};\n"],"mappings":""}
{"version":3,"file":"utils.js","names":["handleRef","ref","node","process","env","NODE_ENV","Error","current","isRefObject","hasOwnProperty"],"sources":["utils.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * The function that correctly handles passing refs.\n *\n * @param ref - An ref object or function\n * @param node - A node that should be passed by ref\n */\nexport const handleRef = <N>(ref: React.Ref<N> | undefined, node: N) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof ref === 'string') {\n      throw new Error(\n        'We do not support refs as string, this is a legacy API and will be likely to be removed in one of the future releases of React.',\n      );\n    }\n  }\n\n  if (typeof ref === 'function') {\n    ref(node);\n    return;\n  }\n\n  if (ref !== null && typeof ref === 'object') {\n    // The `current` property is defined as readonly, however it's a valid way because\n    // `ref` is a mutable object\n    (ref as React.MutableRefObject<N>).current = node;\n  }\n};\n\n/** Checks that the passed object is a valid React ref object. */\nexport const isRefObject = (ref: any): ref is React.RefObject<any> =>\n  // https://github.com/facebook/react/blob/v16.8.2/packages/react-reconciler/src/ReactFiberCommitWork.js#L665\n  ref !== null && typeof ref === 'object' && ref.hasOwnProperty('current');\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAASA,CAAOC,GAA6B,EAAEC,IAAO,EAAK;EACtE,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,OAAOJ,GAAG,KAAK,QAAQ,EAAE;MAC3B,MAAM,IAAIK,KAAK,CACb,iIACF,CAAC;IACH;EACF;EAEA,IAAI,OAAOL,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,IAAI,CAAC;IACT;EACF;EAEA,IAAID,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3C;IACA;IACCA,GAAG,CAA+BM,OAAO,GAAGL,IAAI;EACnD;AACF,CAAC;;AAED;AACA,OAAO,IAAMM,WAAW,GAAG,SAAdA,WAAWA,CAAIP,GAAQ;EAAA;IAClC;IACAA,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACQ,cAAc,CAAC,SAAS;EAAC;AAAA"}
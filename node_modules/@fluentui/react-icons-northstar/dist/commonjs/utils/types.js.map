{"version":3,"file":"types.js","names":[],"sources":["utils/types.ts"],"sourcesContent":["import * as React from 'react';\nimport { AccessibilityAttributes } from '@fluentui/accessibility';\nimport { ComponentSlotStyle, ComponentVariablesInput } from '@fluentui/styles';\nimport { ComponentDesignProp } from '@fluentui/react-bindings';\n\n// copy from @fluentui/react\nexport type SvgIconSizeValue = 'smallest' | 'smaller' | 'small' | 'medium' | 'large' | 'larger' | 'largest';\n\nexport type SvgIconXSpacing = 'none' | 'before' | 'after' | 'both';\n\nexport interface SvgIconProps {\n  /** Alternative text. */\n  alt?: string;\n\n  'aria-label'?: AccessibilityAttributes['aria-label'];\n\n  /** SvgIcon can appear with rectangular border. */\n  bordered?: boolean;\n\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  /** SvgIcon can appear as circular. */\n  circular?: boolean;\n\n  design?: ComponentDesignProp;\n\n  /** An icon can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** An icon can provide an outline variant. */\n  outline?: boolean;\n\n  /** An icon can be rotated by the degree specified as number. */\n  rotate?: number;\n\n  /** Size of the icon. */\n  size?: SvgIconSizeValue;\n\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle;\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n\n  /** Adds space to the before, after or on both sides of the icon, or removes the default space around the icon ('none' value) */\n  xSpacing?: SvgIconXSpacing;\n}\n\nexport type SvgIconFuncArg<TProps = SvgIconProps> = {\n  classes: { [iconSlot: string]: string };\n  rtl: boolean;\n  props: TProps;\n};\n\nexport type SvgIconChildrenFn<TProps = SvgIconProps> = (svgIcon: SvgIconFuncArg<TProps>) => React.ReactNode;\n\nexport type SvgIconCreateFnParams<TProps> = {\n  svg: SvgIconChildrenFn<TProps & SvgIconProps>;\n  displayName: string;\n  handledProps?: (keyof TProps)[];\n};\n"],"mappings":""}
{"version":3,"file":"toolbarItemBehavior.js","names":["keyboardKey","SpacebarKey","buttonBehavior","toolbarItemBehavior","props","behaviorData","attributes","root","Object","assign","hasPopup","hasMenu","undefined","disabled","disabledFocusable","keyActions","wrapper","performWrapperClick","keyCombinations","keyCode","Enter","closeMenuAndFocusTrigger","menuOpen","Escape","Tab","shiftKey","doNotNavigateNextToolbarItem","ArrowLeft","ArrowRight"],"sources":["behaviors/Toolbar/toolbarItemBehavior.ts"],"sourcesContent":["import { keyboardKey, SpacebarKey } from '../../keyboard-key';\n\nimport { Accessibility } from '../../types';\nimport { buttonBehavior, ButtonBehaviorProps } from '../Button/buttonBehavior';\n\n/**\n * @specification\n * Adds role='button' if element type is other than 'button'. This allows screen readers to handle the component as a button.\n * Adds attribute 'tabIndex=0' if element type is other than 'button'.\n * Adds attribute 'aria-haspopup=menu' to 'root' slot if 'hasMenu' property is set.\n * Adds attribute 'aria-haspopup=dialog' to 'root' slot if 'hasPopup' property is set.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'closeMenuAndFocusTrigger' action with 'Escape' on 'wrapper', when toolbar button has submenu and it is opened.\n * Triggers 'doNotNavigateNextToolbarItem' action with 'ArrowLeft' or 'ArrowRight' on 'wrapper', when toolbar button has submenu and it is opened.\n * Adds attribute 'disabled=true' based on the property 'disabled'.\n * Adds attribute 'aria-disabled=true' based on the property 'disabledFocusable'.\n */\nexport const toolbarItemBehavior: Accessibility<ToolbarItemBehaviorProps> = props => {\n  const behaviorData = buttonBehavior(props);\n  behaviorData.attributes.root = {\n    ...behaviorData.attributes.root,\n    'aria-haspopup': props.hasPopup ? 'dialog' : props.hasMenu ? 'menu' : undefined,\n    disabled: props.disabled,\n    'aria-disabled': props.disabledFocusable,\n  };\n  behaviorData.keyActions.wrapper = {\n    ...behaviorData.keyActions.wrapper,\n    performWrapperClick: {\n      keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: SpacebarKey }],\n    },\n    closeMenuAndFocusTrigger: {\n      keyCombinations:\n        props.hasMenu && props.menuOpen\n          ? [{ keyCode: keyboardKey.Escape }, { keyCode: keyboardKey.Tab, shiftKey: true }]\n          : null,\n    },\n    doNotNavigateNextToolbarItem: {\n      keyCombinations:\n        props.hasMenu && props.menuOpen\n          ? [{ keyCode: keyboardKey.ArrowLeft }, { keyCode: keyboardKey.ArrowRight }]\n          : null,\n    },\n  };\n  return behaviorData;\n};\n\nexport type ToolbarItemBehaviorProps = {\n  /** Indicated if toolbar item has a menu. */\n  hasMenu?: boolean;\n  /** If the menu is in open state. */\n  menuOpen?: boolean;\n  /** Indicated if toolbar item has a popup. */\n  hasPopup?: boolean;\n} & ButtonBehaviorProps;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,oBAAoB;AAG7D,SAASC,cAAc,QAA6B,0BAA0B;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,mBAA4D,GAAG,SAA/DA,mBAA4DA,CAAGC,KAAK,EAAI;EACnF,IAAMC,YAAY,GAAGH,cAAc,CAACE,KAAK,CAAC;EAC1CC,YAAY,CAACC,UAAU,CAACC,IAAI,GAAAC,MAAA,CAAAC,MAAA,KACvBJ,YAAY,CAACC,UAAU,CAACC,IAAI;IAC/B,eAAe,EAAEH,KAAK,CAACM,QAAQ,GAAG,QAAQ,GAAGN,KAAK,CAACO,OAAO,GAAG,MAAM,GAAGC,SAAS;IAC/EC,QAAQ,EAAET,KAAK,CAACS,QAAQ;IACxB,eAAe,EAAET,KAAK,CAACU;EAAiB,EACzC;EACDT,YAAY,CAACU,UAAU,CAACC,OAAO,GAAAR,MAAA,CAAAC,MAAA,KAC1BJ,YAAY,CAACU,UAAU,CAACC,OAAO;IAClCC,mBAAmB,EAAE;MACnBC,eAAe,EAAE,CAAC;QAAEC,OAAO,EAAEnB,WAAW,CAACoB;MAAM,CAAC,EAAE;QAAED,OAAO,EAAElB;MAAY,CAAC;IAC5E,CAAC;IACDoB,wBAAwB,EAAE;MACxBH,eAAe,EACbd,KAAK,CAACO,OAAO,IAAIP,KAAK,CAACkB,QAAQ,GAC3B,CAAC;QAAEH,OAAO,EAAEnB,WAAW,CAACuB;MAAO,CAAC,EAAE;QAAEJ,OAAO,EAAEnB,WAAW,CAACwB,GAAG;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC,GAC/E;IACR,CAAC;IACDC,4BAA4B,EAAE;MAC5BR,eAAe,EACbd,KAAK,CAACO,OAAO,IAAIP,KAAK,CAACkB,QAAQ,GAC3B,CAAC;QAAEH,OAAO,EAAEnB,WAAW,CAAC2B;MAAU,CAAC,EAAE;QAAER,OAAO,EAAEnB,WAAW,CAAC4B;MAAW,CAAC,CAAC,GACzE;IACR;EAAC,EACF;EACD,OAAOvB,YAAY;AACrB,CAAC"}
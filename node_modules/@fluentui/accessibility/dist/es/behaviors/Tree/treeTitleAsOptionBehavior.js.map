{"version":3,"file":"treeTitleAsOptionBehavior.js","names":["treeTitleBehavior","IS_FOCUSABLE_ATTRIBUTE","treeTitleAsOptionBehavior","props","_Object$assign","behavior","definition","Object","assign","attributes","root","hasSubtree","tabIndex","role","treeSize","index","selectable","selected","process","env","NODE_ENV"],"sources":["behaviors/Tree/treeTitleAsOptionBehavior.ts"],"sourcesContent":["import { Accessibility, AriaRole } from '../../types';\nimport { treeTitleBehavior, TreeTitleBehaviorProps } from './treeTitleBehavior';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n\n/**\n * @description\n * Adds role 'option' if the title is a leaf node inside the tree\n * Adds 'aria-selected' to a leaf treeTitle if it is selectable, based on the 'selected' property\n * @specification\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'role=option' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..\n * Triggers 'performClick' action with 'Spacebar' on 'root'.\n */\nexport const treeTitleAsOptionBehavior: Accessibility<TreeTitleBehaviorProps> = props => {\n  const behavior = treeTitleBehavior(props);\n\n  const definition = {\n    ...behavior,\n    attributes: {\n      root: {\n        ...(!props.hasSubtree && {\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'option' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          ...(props.selectable && { 'aria-selected': !!props.selected }),\n        }),\n      },\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!props.hasSubtree) definition.attributes.root['data-aa-class'] = 'TreeTitleOption';\n    else definition.attributes.root['data-aa-class'] = behavior.attributes.root['data-aa-class'];\n  }\n\n  return definition;\n};\n"],"mappings":"AACA,SAASA,iBAAiB,QAAgC,qBAAqB;AAC/E,SAASC,sBAAsB,QAAQ,kBAAkB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,yBAAgE,GAAG,SAAnEA,yBAAgEA,CAAGC,KAAK,EAAI;EAAA,IAAAC,cAAA;EACvF,IAAMC,QAAQ,GAAGL,iBAAiB,CAACG,KAAK,CAAC;EAEzC,IAAMG,UAAU,GAAAC,MAAA,CAAAC,MAAA,KACXH,QAAQ;IACXI,UAAU,EAAE;MACVC,IAAI,EAAAH,MAAA,CAAAC,MAAA,KACE,CAACL,KAAK,CAACQ,UAAU,IAAAJ,MAAA,CAAAC,MAAA,EAAAJ,cAAA;QACnBQ,QAAQ,EAAE,CAAC;MAAC,GAAAR,cAAA,CACXH,sBAAsB,IAAG,IAAI,EAAAG,cAAA,CAC9BS,IAAI,GAAE,QAAQ,EAAAT,cAAA,CACd,cAAc,IAAED,KAAK,CAACW,QAAQ,EAAAV,cAAA,CAC9B,eAAe,IAAED,KAAK,CAACY,KAAK,EAAAX,cAAA,GACxBD,KAAK,CAACa,UAAU,IAAI;QAAE,eAAe,EAAE,CAAC,CAACb,KAAK,CAACc;MAAS,CAAC,CAC9D;IAEL;EAAC,EACF;EAED,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,CAACjB,KAAK,CAACQ,UAAU,EAAEL,UAAU,CAACG,UAAU,CAACC,IAAI,CAAC,eAAe,CAAC,GAAG,iBAAiB,CAAC,KAClFJ,UAAU,CAACG,UAAU,CAACC,IAAI,CAAC,eAAe,CAAC,GAAGL,QAAQ,CAACI,UAAU,CAACC,IAAI,CAAC,eAAe,CAAC;EAC9F;EAEA,OAAOJ,UAAU;AACnB,CAAC"}
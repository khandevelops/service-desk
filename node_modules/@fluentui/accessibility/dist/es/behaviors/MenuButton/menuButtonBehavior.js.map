{"version":3,"file":"menuButtonBehavior.js","names":["keyboardKey","popupBehavior","menuButtonBehavior","props","behavior","Object","assign","inline","contextMenu","_merge","attributes","trigger","open","menuId","id","triggerId","tabIndex","menu","keyActions","root","closeMenu","keyCombinations","keyCode","Tab","shiftKey","_includes","on","openAndFocusFirst","ArrowDown","openAndFocusLast","ArrowUp"],"sources":["behaviors/MenuButton/menuButtonBehavior.ts"],"sourcesContent":["import { keyboardKey } from '../../keyboard-key';\nimport * as _ from 'lodash';\n\nimport { Accessibility } from '../../types';\nimport { popupBehavior, PopupBehaviorProps } from '../Popup/popupBehavior';\n\n/**\n * @description\n * Implements ARIA [MenuButton](https://www.w3.org/TR/wai-aria-practices/#menubutton) design pattern.\n */\nexport const menuButtonBehavior: Accessibility<MenuButtonBehaviorProps> = props => {\n  const behavior = popupBehavior({ ...props, inline: !props.contextMenu });\n\n  return _.merge(behavior, {\n    attributes: {\n      trigger: {\n        ...(props.open && { 'aria-controls': props.menuId }),\n        ...(props.open && !props.contextMenu && { 'aria-expanded': 'true' }),\n        ...(!props.contextMenu && { 'aria-haspopup': 'true' }),\n        id: props.triggerId,\n        ...(!props.contextMenu && props.open && { tabIndex: -1 }),\n      },\n\n      menu: {\n        'aria-labelledby': props.triggerId,\n        id: props.menuId,\n      },\n    },\n    keyActions: {\n      root: {\n        ...(props.open\n          ? {\n              closeMenu: {\n                keyCombinations: [\n                  { keyCode: keyboardKey.Tab, shiftKey: false },\n                  { keyCode: keyboardKey.Tab, shiftKey: true },\n                ],\n              },\n            }\n          : _.includes(props.on, 'click') && {\n              openAndFocusFirst: {\n                keyCombinations: [{ keyCode: keyboardKey.ArrowDown }],\n              },\n              openAndFocusLast: {\n                keyCombinations: [{ keyCode: keyboardKey.ArrowUp }],\n              },\n            }),\n      },\n    },\n  });\n};\n\nexport interface MenuButtonBehaviorProps extends PopupBehaviorProps {\n  /** Indicates if dialogs's trigger is disabled. */\n  disabled?: boolean;\n  /** Defines ID of the menu element. */\n  menuId?: string;\n  /** Defines ID of the trigger element. */\n  triggerId?: string;\n  /** Defines whether popup is displayed. */\n  open?: boolean;\n  /** Determines if the MenuButton behaves as context menu */\n  contextMenu?: boolean;\n}\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,oBAAoB;AAIhD,SAASC,aAAa,QAA4B,wBAAwB;;AAE1E;AACA;AACA;AACA;AACA,OAAO,IAAMC,kBAA0D,GAAG,SAA7DA,kBAA0DA,CAAGC,KAAK,EAAI;EACjF,IAAMC,QAAQ,GAAGH,aAAa,CAAAI,MAAA,CAAAC,MAAA,KAAMH,KAAK;IAAEI,MAAM,EAAE,CAACJ,KAAK,CAACK;EAAW,EAAE,CAAC;EAExE,OAAOC,MAAA,CAAQL,QAAQ,EAAE;IACvBM,UAAU,EAAE;MACVC,OAAO,EAAAN,MAAA,CAAAC,MAAA,KACDH,KAAK,CAACS,IAAI,IAAI;QAAE,eAAe,EAAET,KAAK,CAACU;MAAO,CAAC,EAC/CV,KAAK,CAACS,IAAI,IAAI,CAACT,KAAK,CAACK,WAAW,IAAI;QAAE,eAAe,EAAE;MAAO,CAAC,EAC/D,CAACL,KAAK,CAACK,WAAW,IAAI;QAAE,eAAe,EAAE;MAAO,CAAC;QACrDM,EAAE,EAAEX,KAAK,CAACY;MAAS,GACf,CAACZ,KAAK,CAACK,WAAW,IAAIL,KAAK,CAACS,IAAI,IAAI;QAAEI,QAAQ,EAAE,CAAC;MAAE,CAAC,CACzD;MAEDC,IAAI,EAAE;QACJ,iBAAiB,EAAEd,KAAK,CAACY,SAAS;QAClCD,EAAE,EAAEX,KAAK,CAACU;MACZ;IACF,CAAC;IACDK,UAAU,EAAE;MACVC,IAAI,EAAAd,MAAA,CAAAC,MAAA,KACEH,KAAK,CAACS,IAAI,GACV;QACEQ,SAAS,EAAE;UACTC,eAAe,EAAE,CACf;YAAEC,OAAO,EAAEtB,WAAW,CAACuB,GAAG;YAAEC,QAAQ,EAAE;UAAM,CAAC,EAC7C;YAAEF,OAAO,EAAEtB,WAAW,CAACuB,GAAG;YAAEC,QAAQ,EAAE;UAAK,CAAC;QAEhD;MACF,CAAC,GACDC,SAAA,CAAWtB,KAAK,CAACuB,EAAE,EAAE,OAAO,CAAC,IAAI;QAC/BC,iBAAiB,EAAE;UACjBN,eAAe,EAAE,CAAC;YAAEC,OAAO,EAAEtB,WAAW,CAAC4B;UAAU,CAAC;QACtD,CAAC;QACDC,gBAAgB,EAAE;UAChBR,eAAe,EAAE,CAAC;YAAEC,OAAO,EAAEtB,WAAW,CAAC8B;UAAQ,CAAC;QACpD;MACF,CAAC;IAET;EACF,CAAC,CAAC;AACJ,CAAC"}
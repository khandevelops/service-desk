{"version":3,"file":"chatBehavior.js","names":["getCode","keyboardKey","IS_FOCUSABLE_ATTRIBUTE","FocusZoneDirection","chatMessageBehavior","CHAT_FOCUSZONE_ATTRIBUTE","chatBehavior","_props","attributes","root","focusZone","props","shouldEnterInnerZone","event","Enter","direction","vertical","shouldResetActiveElementWhenTabFromZone","defaultTabbableElement","getLastTabbableElement","pagingSupportDisabled","childBehaviors","item","undefined","message","lastVisibleMessage","querySelector","chatItemsElements","querySelectorAll","length"],"sources":["behaviors/Chat/chatBehavior.ts"],"sourcesContent":["import { getCode, keyboardKey } from '../../keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { chatMessageBehavior } from './chatMessageBehavior';\n\nconst CHAT_FOCUSZONE_ATTRIBUTE = 'chat-focuszone';\n\n/**\n * @description\n * Adds a vertical focus zone navigation with a last message as a default tabbable element, pressing enter key focuses inside a message.\n *\n * @specification\n * Provides arrow key navigation in vertical direction.\n * Focus is set initially on the specified default tabbable element.\n * Focused active element of the component is reset when TAB from the component.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Does not handle PageDown and PageUp.\n */\nexport const chatBehavior: Accessibility<ChatBehaviorProps> = () => ({\n  attributes: {\n    root: {},\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => getCode(event) === keyboardKey.Enter,\n      direction: FocusZoneDirection.vertical,\n      shouldResetActiveElementWhenTabFromZone: true,\n      defaultTabbableElement: getLastTabbableElement, // select last chat message by default\n      [CHAT_FOCUSZONE_ATTRIBUTE]: '', // allows querying the default active element\n      pagingSupportDisabled: true,\n    },\n  },\n  childBehaviors: {\n    item: undefined,\n    message: chatMessageBehavior,\n  },\n});\n\nconst getLastTabbableElement = (root: HTMLElement): HTMLElement => {\n  const lastVisibleMessage = root.querySelector('[data-last-visible=\"true\"]') as HTMLElement;\n  if (lastVisibleMessage) return lastVisibleMessage;\n\n  const chatItemsElements = root.querySelectorAll(\n    `[${CHAT_FOCUSZONE_ATTRIBUTE}] .ui-chat__message[${IS_FOCUSABLE_ATTRIBUTE}=\"true\"]`,\n  );\n  return chatItemsElements.length > 0 ? (chatItemsElements[chatItemsElements.length - 1] as HTMLElement) : null;\n};\n\nexport type ChatBehaviorProps = never;\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,WAAW,QAAQ,oBAAoB;AAEzD,SAASC,sBAAsB,QAAQ,kBAAkB;AAEzD,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D,SAASC,mBAAmB,QAAQ,uBAAuB;AAE3D,IAAMC,wBAAwB,GAAG,gBAAgB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,YAA8C,GAAG,SAAjDA,YAA8CA,CAAA;EAAA,IAAAC,MAAA;EAAA,OAAU;IACnEC,UAAU,EAAE;MACVC,IAAI,EAAE,CAAC;IACT,CAAC;IACDC,SAAS,EAAE;MACTC,KAAK,GAAAJ,MAAA;QACHK,oBAAoB,EAAE,SAAAA,qBAAAC,KAAK;UAAA,OAAIb,OAAO,CAACa,KAAK,CAAC,KAAKZ,WAAW,CAACa,KAAK;QAAA;QACnEC,SAAS,EAAEZ,kBAAkB,CAACa,QAAQ;QACtCC,uCAAuC,EAAE,IAAI;QAC7CC,sBAAsB,EAAEC;MAAsB,GAAAZ,MAAA,CAC7CF,wBAAwB,IAAG,EAAE,EAAAE,MAAA,CAC9Ba,qBAAqB,GAAE,IAAI,EAAAb,MAAA;IAE/B,CAAC;IACDc,cAAc,EAAE;MACdC,IAAI,EAAEC,SAAS;MACfC,OAAO,EAAEpB;IACX;EACF,CAAC;AAAA,CAAC;AAEF,IAAMe,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIV,IAAiB,EAAkB;EACjE,IAAMgB,kBAAkB,GAAGhB,IAAI,CAACiB,aAAa,CAAC,4BAA4B,CAAgB;EAC1F,IAAID,kBAAkB,EAAE,OAAOA,kBAAkB;EAEjD,IAAME,iBAAiB,GAAGlB,IAAI,CAACmB,gBAAgB,OACzCvB,wBAAwB,4BAAuBH,sBAAsB,eAC3E,CAAC;EACD,OAAOyB,iBAAiB,CAACE,MAAM,GAAG,CAAC,GAAIF,iBAAiB,CAACA,iBAAiB,CAACE,MAAM,GAAG,CAAC,CAAC,GAAmB,IAAI;AAC/G,CAAC"}
{"version":3,"file":"tooltipAsDescriptionBehavior.js","names":["keyboardKey","tooltipAsDescriptionBehavior","props","defaultAriaDescribedBy","getDefaultAriaDescribedBy","attributes","trigger","tooltip","role","id","open","keyActions","Object","assign","close","keyCombinations","keyCode","Escape","undefined","contentId"],"sources":["behaviors/Tooltip/tooltipAsDescriptionBehavior.ts"],"sourcesContent":["import { keyboardKey } from '../../keyboard-key';\nimport { Accessibility, AccessibilityAttributes } from '../../types';\n\n/**\n * @description\n * Implements ARIA Tooltip design pattern.\n *\n * @specification\n * Adds attribute 'role=tooltip' to 'tooltip' slot.\n * Adds attribute 'aria-hidden=false' to 'tooltip' slot if 'open' property is true. Sets the attribute to 'true' otherwise.\n * Adds attribute 'aria-describedby' based on the property 'contentId' to 'trigger' slot. This can be overriden by providing 'aria-describedby' property directly to the component.\n * Triggers 'close' action with 'Escape' on 'trigger' if 'open' property is true.\n */\nexport const tooltipAsDescriptionBehavior: Accessibility<TooltipBehaviorProps> = props => {\n  const defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n\n  return {\n    attributes: {\n      trigger: {\n        'aria-describedby': defaultAriaDescribedBy || props['aria-describedby'],\n      },\n      tooltip: {\n        role: 'tooltip',\n        id: defaultAriaDescribedBy,\n        'aria-hidden': !props.open,\n      },\n    },\n    keyActions: {\n      trigger: {\n        ...(props.open && {\n          close: {\n            keyCombinations: [{ keyCode: keyboardKey.Escape }],\n          },\n        }),\n      },\n    },\n  };\n};\n\n/**\n * Returns the element id of the tooltip, it is used when user does not provide aria-describedby as props.\n */\nconst getDefaultAriaDescribedBy = (props: TooltipBehaviorProps) => {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n  return props.contentId;\n};\n\nexport type TooltipBehaviorProps = {\n  /** If tooltip is visible. */\n  open: boolean;\n  /** Tooltip's container id. */\n  contentId: string;\n  /** aria-label from trigger shorthand. */\n  triggerAriaLabel: string;\n} & Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby'>;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,oBAAoB;AAGhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,4BAAiE,GAAG,SAApEA,4BAAiEA,CAAGC,KAAK,EAAI;EACxF,IAAMC,sBAAsB,GAAGC,yBAAyB,CAACF,KAAK,CAAC;EAE/D,OAAO;IACLG,UAAU,EAAE;MACVC,OAAO,EAAE;QACP,kBAAkB,EAAEH,sBAAsB,IAAID,KAAK,CAAC,kBAAkB;MACxE,CAAC;MACDK,OAAO,EAAE;QACPC,IAAI,EAAE,SAAS;QACfC,EAAE,EAAEN,sBAAsB;QAC1B,aAAa,EAAE,CAACD,KAAK,CAACQ;MACxB;IACF,CAAC;IACDC,UAAU,EAAE;MACVL,OAAO,EAAAM,MAAA,CAAAC,MAAA,KACDX,KAAK,CAACQ,IAAI,IAAI;QAChBI,KAAK,EAAE;UACLC,eAAe,EAAE,CAAC;YAAEC,OAAO,EAAEhB,WAAW,CAACiB;UAAO,CAAC;QACnD;MACF,CAAC;IAEL;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,IAAMb,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIF,KAA2B,EAAK;EACjE,IAAIA,KAAK,CAAC,kBAAkB,CAAC,EAAE;IAC7B,OAAOgB,SAAS;EAClB;EACA,OAAOhB,KAAK,CAACiB,SAAS;AACxB,CAAC"}
{"version":3,"file":"chatBehavior.js","names":["_keyboardKey","require","_attributes","_types","_chatMessageBehavior","CHAT_FOCUSZONE_ATTRIBUTE","chatBehavior","_props","attributes","root","focusZone","props","shouldEnterInnerZone","event","getCode","keyboardKey","Enter","direction","FocusZoneDirection","vertical","shouldResetActiveElementWhenTabFromZone","defaultTabbableElement","getLastTabbableElement","pagingSupportDisabled","childBehaviors","item","undefined","message","chatMessageBehavior","exports","lastVisibleMessage","querySelector","chatItemsElements","querySelectorAll","IS_FOCUSABLE_ATTRIBUTE","length"],"sources":["behaviors/Chat/chatBehavior.ts"],"sourcesContent":["import { getCode, keyboardKey } from '../../keyboard-key';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { Accessibility } from '../../types';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { chatMessageBehavior } from './chatMessageBehavior';\n\nconst CHAT_FOCUSZONE_ATTRIBUTE = 'chat-focuszone';\n\n/**\n * @description\n * Adds a vertical focus zone navigation with a last message as a default tabbable element, pressing enter key focuses inside a message.\n *\n * @specification\n * Provides arrow key navigation in vertical direction.\n * Focus is set initially on the specified default tabbable element.\n * Focused active element of the component is reset when TAB from the component.\n * Focus can be moved inside a child component with embeded inner FocusZone by pressing a specified key.\n * Does not handle PageDown and PageUp.\n */\nexport const chatBehavior: Accessibility<ChatBehaviorProps> = () => ({\n  attributes: {\n    root: {},\n  },\n  focusZone: {\n    props: {\n      shouldEnterInnerZone: event => getCode(event) === keyboardKey.Enter,\n      direction: FocusZoneDirection.vertical,\n      shouldResetActiveElementWhenTabFromZone: true,\n      defaultTabbableElement: getLastTabbableElement, // select last chat message by default\n      [CHAT_FOCUSZONE_ATTRIBUTE]: '', // allows querying the default active element\n      pagingSupportDisabled: true,\n    },\n  },\n  childBehaviors: {\n    item: undefined,\n    message: chatMessageBehavior,\n  },\n});\n\nconst getLastTabbableElement = (root: HTMLElement): HTMLElement => {\n  const lastVisibleMessage = root.querySelector('[data-last-visible=\"true\"]') as HTMLElement;\n  if (lastVisibleMessage) return lastVisibleMessage;\n\n  const chatItemsElements = root.querySelectorAll(\n    `[${CHAT_FOCUSZONE_ATTRIBUTE}] .ui-chat__message[${IS_FOCUSABLE_ATTRIBUTE}=\"true\"]`,\n  );\n  return chatItemsElements.length > 0 ? (chatItemsElements[chatItemsElements.length - 1] as HTMLElement) : null;\n};\n\nexport type ChatBehaviorProps = never;\n"],"mappings":";;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,WAAA,GAAAD,OAAA;AAEA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,oBAAA,GAAAH,OAAA;AAEA,IAAMI,wBAAwB,GAAG,gBAAgB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,YAA8C,GAAG,SAAjDA,YAA8CA,CAAA;EAAA,IAAAC,MAAA;EAAA,OAAU;IACnEC,UAAU,EAAE;MACVC,IAAI,EAAE,CAAC;IACT,CAAC;IACDC,SAAS,EAAE;MACTC,KAAK,GAAAJ,MAAA;QACHK,oBAAoB,EAAE,SAAAA,qBAAAC,KAAK;UAAA,OAAI,IAAAC,oBAAO,EAACD,KAAK,CAAC,KAAKE,wBAAW,CAACC,KAAK;QAAA;QACnEC,SAAS,EAAEC,yBAAkB,CAACC,QAAQ;QACtCC,uCAAuC,EAAE,IAAI;QAC7CC,sBAAsB,EAAEC;MAAsB,GAAAf,MAAA,CAC7CF,wBAAwB,IAAG,EAAE,EAAAE,MAAA,CAC9BgB,qBAAqB,GAAE,IAAI,EAAAhB,MAAA;IAE/B,CAAC;IACDiB,cAAc,EAAE;MACdC,IAAI,EAAEC,SAAS;MACfC,OAAO,EAAEC;IACX;EACF,CAAC;AAAA,CAAC;AAACC,OAAA,CAAAvB,YAAA,GAAAA,YAAA;AAEH,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIb,IAAiB,EAAkB;EACjE,IAAMqB,kBAAkB,GAAGrB,IAAI,CAACsB,aAAa,CAAC,4BAA4B,CAAgB;EAC1F,IAAID,kBAAkB,EAAE,OAAOA,kBAAkB;EAEjD,IAAME,iBAAiB,GAAGvB,IAAI,CAACwB,gBAAgB,OACzC5B,wBAAwB,4BAAuB6B,kCAAsB,eAC3E,CAAC;EACD,OAAOF,iBAAiB,CAACG,MAAM,GAAG,CAAC,GAAIH,iBAAiB,CAACA,iBAAiB,CAACG,MAAM,GAAG,CAAC,CAAC,GAAmB,IAAI;AAC/G,CAAC"}
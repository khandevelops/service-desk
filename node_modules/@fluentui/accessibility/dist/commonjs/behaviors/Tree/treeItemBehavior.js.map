{"version":3,"file":"treeItemBehavior.js","names":["_keyboardKey","require","_attributes","_treeTitleBehavior","treeItemBehavior","props","_Object$assign","definition","attributes","root","Object","assign","role","hasSubtree","expanded","tabIndex","IS_FOCUSABLE_ATTRIBUTE","treeSize","index","level","selectable","indeterminate","selected","keyActions","performClick","keyCombinations","keyCode","EnterKey","SpacebarKey","collapse","keyboardKey","ArrowLeft","focusFirstChild","ArrowRight","expand","focusParent","expandSiblings","Enter","performSelection","childBehaviors","title","treeTitleBehavior","process","env","NODE_ENV","exports"],"sources":["behaviors/Tree/treeItemBehavior.ts"],"sourcesContent":["import { keyboardKey, SpacebarKey, EnterKey } from '../../keyboard-key';\nimport { Accessibility, AriaRole } from '../../types';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { treeTitleBehavior } from './treeTitleBehavior';\n\n/**\n * @description\n * Triggers 'performClick' action with 'Spacebar' on 'root', when tree item is selectable and has no subtree. In other cases 'performClick' is triggered with 'Spacebar' or 'Enter'.\n * Triggers 'performSelection' action with 'Spacebar' on 'root', when has a opened subtree.\n * Adds attribute 'aria-checked=true' based on the properties 'selectable' & 'selected' if the component has 'hasSubtree' property true. Does not set anything if false or undefined.\n *\n * @specification\n * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.\n * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has no subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const treeItemBehavior: Accessibility<TreeItemBehaviorProps> = props => {\n  const definition = {\n    attributes: {\n      root: {\n        role: 'none',\n        ...(props.hasSubtree && {\n          'aria-expanded': props.expanded,\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'treeitem' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          'aria-level': props.level,\n          ...(props.selectable && {\n            'aria-checked': props.indeterminate ? ('mixed' as const) : !!props.selected,\n          }),\n        }),\n      },\n    },\n    keyActions: {\n      root: {\n        performClick: {\n          keyCombinations: [{ keyCode: EnterKey }, { keyCode: SpacebarKey }],\n        },\n        ...(props.hasSubtree\n          ? props.expanded\n            ? {\n                collapse: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n                },\n                focusFirstChild: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n                },\n              }\n            : {\n                expand: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],\n                },\n                focusParent: {\n                  keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n                },\n              }\n          : {\n              focusParent: {\n                keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],\n              },\n            }),\n        expandSiblings: {\n          keyCombinations: [{ keyCode: keyboardKey['*'] }],\n        },\n        ...(props.selectable && {\n          performClick: {\n            keyCombinations: props.hasSubtree ? [{ keyCode: keyboardKey.Enter }] : [{ keyCode: SpacebarKey }],\n          },\n          performSelection: {\n            keyCombinations: [{ keyCode: SpacebarKey }],\n          },\n        }),\n      },\n    },\n    childBehaviors: {\n      title: treeTitleBehavior,\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production' && !props.hasSubtree) {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'SingleTreeItem';\n  }\n\n  return definition;\n};\n\nexport type TreeItemBehaviorProps = {\n  /** If item is a subtree, it indicates if it's expanded. */\n  expanded?: boolean;\n  level?: number;\n  index?: number;\n  hasSubtree?: boolean;\n  treeSize?: number;\n  selectable?: boolean;\n  selected?: boolean;\n  indeterminate?: boolean;\n};\n"],"mappings":"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"}
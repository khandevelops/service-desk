{"version":3,"file":"treeItemAsOptionBehavior.js","names":["_treeItemBehavior","require","_treeTitleAsOptionBehavior","_attributes","treeItemAsOptionBehavior","props","_Object$assign","behavior","treeItemBehavior","definition","Object","assign","attributes","root","role","hasSubtree","tabIndex","IS_FOCUSABLE_ATTRIBUTE","treeSize","index","selectable","selected","childBehaviors","title","treeTitleAsOptionBehavior","process","env","NODE_ENV","exports"],"sources":["behaviors/Tree/treeItemAsOptionBehavior.ts"],"sourcesContent":["import { Accessibility, AriaRole } from '../../types';\nimport { treeItemBehavior, TreeItemBehaviorProps } from './treeItemBehavior';\nimport { treeTitleAsOptionBehavior } from './treeTitleAsOptionBehavior';\n\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\n\n/**\n * @description\n * Adds role 'option' to a non-leaf item.\n * Adds 'aria-selected' to a non-leaf item if it is selectable, based on the 'selected' property\n * @specification\n * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.\n * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.\n * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.\n * Adds attribute 'role=option' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.\n * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.\n * Triggers 'expandSiblings' action with '*' on 'root'.\n * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.\n * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.\n * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.\n * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.\n */\nexport const treeItemAsOptionBehavior: Accessibility<TreeItemBehaviorProps> = props => {\n  const behavior = treeItemBehavior(props);\n\n  const definition = {\n    ...behavior,\n    attributes: {\n      root: {\n        role: 'none',\n        ...(props.hasSubtree && {\n          tabIndex: -1,\n          [IS_FOCUSABLE_ATTRIBUTE]: true,\n          role: 'option' as AriaRole,\n          'aria-setsize': props.treeSize,\n          'aria-posinset': props.index,\n          ...(props.selectable && { 'aria-selected': !!props.selected }),\n        }),\n      },\n    },\n    childBehaviors: {\n      title: treeTitleAsOptionBehavior,\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.hasSubtree) definition.attributes.root['data-aa-class'] = 'TreeItemOption';\n    else definition.attributes.root['data-aa-class'] = behavior.attributes.root['data-aa-class'];\n  }\n\n  return definition;\n};\n"],"mappings":";;;;AACA,IAAAA,iBAAA,GAAAC,OAAA;AACA,IAAAC,0BAAA,GAAAD,OAAA;AAEA,IAAAE,WAAA,GAAAF,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMG,wBAA8D,GAAG,SAAjEA,wBAA8DA,CAAGC,KAAK,EAAI;EAAA,IAAAC,cAAA;EACrF,IAAMC,QAAQ,GAAG,IAAAC,kCAAgB,EAACH,KAAK,CAAC;EAExC,IAAMI,UAAU,GAAAC,MAAA,CAAAC,MAAA,KACXJ,QAAQ;IACXK,UAAU,EAAE;MACVC,IAAI,EAAAH,MAAA,CAAAC,MAAA;QACFG,IAAI,EAAE;MAAM,GACRT,KAAK,CAACU,UAAU,IAAAL,MAAA,CAAAC,MAAA,EAAAL,cAAA;QAClBU,QAAQ,EAAE,CAAC;MAAC,GAAAV,cAAA,CACXW,kCAAsB,IAAG,IAAI,EAAAX,cAAA,CAC9BQ,IAAI,GAAE,QAAQ,EAAAR,cAAA,CACd,cAAc,IAAED,KAAK,CAACa,QAAQ,EAAAZ,cAAA,CAC9B,eAAe,IAAED,KAAK,CAACc,KAAK,EAAAb,cAAA,GACxBD,KAAK,CAACe,UAAU,IAAI;QAAE,eAAe,EAAE,CAAC,CAACf,KAAK,CAACgB;MAAS,CAAC,CAC9D;IAEL,CAAC;IACDC,cAAc,EAAE;MACdC,KAAK,EAAEC;IACT;EAAC,EACF;EAED,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAItB,KAAK,CAACU,UAAU,EAAEN,UAAU,CAACG,UAAU,CAACC,IAAI,CAAC,eAAe,CAAC,GAAG,gBAAgB,CAAC,KAChFJ,UAAU,CAACG,UAAU,CAACC,IAAI,CAAC,eAAe,CAAC,GAAGN,QAAQ,CAACK,UAAU,CAACC,IAAI,CAAC,eAAe,CAAC;EAC9F;EAEA,OAAOJ,UAAU;AACnB,CAAC;AAACmB,OAAA,CAAAxB,wBAAA,GAAAA,wBAAA"}
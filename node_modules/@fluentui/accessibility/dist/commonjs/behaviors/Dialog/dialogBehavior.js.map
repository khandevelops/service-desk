{"version":3,"file":"dialogBehavior.js","names":["_popupBehavior","require","dialogBehavior","props","behaviorData","popupBehavior","defaultAriaLabelledBy","getDefaultAriaLabelledBy","defaultAriaDescribedBy","getDefaultAriaDescribedBy","attributes","popup","Object","assign","role","header","id","content","exports","undefined","headerId","contentId"],"sources":["behaviors/Dialog/dialogBehavior.ts"],"sourcesContent":["import { Accessibility, AccessibilityAttributes } from '../../types';\nimport { popupBehavior, PopupBehaviorProps } from '../Popup/popupBehavior';\n\n/**\n * @description\n * Implements ARIA Dialog (Modal) design pattern.\n * Adds tabIndex='0' to 'trigger' slot, if it is not tabbable element and no tabIndex attribute provided.\n *\n * @specification\n * Adds attribute 'aria-modal=true' to 'popup' slot.\n * Adds attribute 'role=dialog' to 'popup' slot.\n * Adds attribute 'aria-labelledby' based on the property 'aria-labelledby' to 'popup' slot.\n * Adds attribute 'aria-describedby' based on the property 'aria-describedby' to 'popup' slot.\n */\nexport const dialogBehavior: Accessibility<DialogBehaviorProps> = props => {\n  const behaviorData = popupBehavior(props);\n\n  const defaultAriaLabelledBy = getDefaultAriaLabelledBy(props);\n  const defaultAriaDescribedBy = getDefaultAriaDescribedBy(props);\n\n  behaviorData.attributes.popup = {\n    ...behaviorData.attributes.popup,\n    role: 'dialog',\n    'aria-modal': true,\n    'aria-labelledby': defaultAriaLabelledBy || props['aria-labelledby'],\n    'aria-describedby': defaultAriaDescribedBy || props['aria-describedby'],\n  };\n  behaviorData.attributes.header = {\n    id: defaultAriaLabelledBy,\n  };\n  behaviorData.attributes.content = {\n    id: defaultAriaDescribedBy,\n  };\n\n  return behaviorData;\n};\n\n/**\n * Returns the element id of the header, it is used when user does not provide aria-label or\n * aria-labelledby as props.\n */\nconst getDefaultAriaLabelledBy = (props: DialogBehaviorProps) => {\n  if (props['aria-label'] || props['aria-labelledby']) {\n    return undefined;\n  }\n  return props.headerId;\n};\n\n/**\n * Returns the element id of the content, it is used when user does not provide aria-describedby\n * as props.\n */\nconst getDefaultAriaDescribedBy = (props: DialogBehaviorProps) => {\n  if (props['aria-describedby']) {\n    return undefined;\n  }\n  return props.contentId;\n};\n\nexport type DialogBehaviorProps = {\n  headerId?: string;\n  contentId?: string;\n} & PopupBehaviorProps &\n  Pick<AccessibilityAttributes, 'aria-label' | 'aria-labelledby' | 'aria-describedby'>;\n"],"mappings":";;;;AACA,IAAAA,cAAA,GAAAC,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,cAAkD,GAAG,SAArDA,cAAkDA,CAAGC,KAAK,EAAI;EACzE,IAAMC,YAAY,GAAG,IAAAC,4BAAa,EAACF,KAAK,CAAC;EAEzC,IAAMG,qBAAqB,GAAGC,wBAAwB,CAACJ,KAAK,CAAC;EAC7D,IAAMK,sBAAsB,GAAGC,yBAAyB,CAACN,KAAK,CAAC;EAE/DC,YAAY,CAACM,UAAU,CAACC,KAAK,GAAAC,MAAA,CAAAC,MAAA,KACxBT,YAAY,CAACM,UAAU,CAACC,KAAK;IAChCG,IAAI,EAAE,QAAQ;IACd,YAAY,EAAE,IAAI;IAClB,iBAAiB,EAAER,qBAAqB,IAAIH,KAAK,CAAC,iBAAiB,CAAC;IACpE,kBAAkB,EAAEK,sBAAsB,IAAIL,KAAK,CAAC,kBAAkB;EAAC,EACxE;EACDC,YAAY,CAACM,UAAU,CAACK,MAAM,GAAG;IAC/BC,EAAE,EAAEV;EACN,CAAC;EACDF,YAAY,CAACM,UAAU,CAACO,OAAO,GAAG;IAChCD,EAAE,EAAER;EACN,CAAC;EAED,OAAOJ,YAAY;AACrB,CAAC;;AAED;AACA;AACA;AACA;AAHAc,OAAA,CAAAhB,cAAA,GAAAA,cAAA;AAIA,IAAMK,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIJ,KAA0B,EAAK;EAC/D,IAAIA,KAAK,CAAC,YAAY,CAAC,IAAIA,KAAK,CAAC,iBAAiB,CAAC,EAAE;IACnD,OAAOgB,SAAS;EAClB;EACA,OAAOhB,KAAK,CAACiB,QAAQ;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA,IAAMX,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIN,KAA0B,EAAK;EAChE,IAAIA,KAAK,CAAC,kBAAkB,CAAC,EAAE;IAC7B,OAAOgB,SAAS;EAClB;EACA,OAAOhB,KAAK,CAACkB,SAAS;AACxB,CAAC"}
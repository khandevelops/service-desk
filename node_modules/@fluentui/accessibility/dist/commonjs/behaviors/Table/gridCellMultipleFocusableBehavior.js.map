{"version":3,"file":"gridCellMultipleFocusableBehavior.js","names":["_attributes","require","_types","_keyboardKey","gridCellMultipleFocusableBehavior","_root","attributes","root","role","IS_FOCUSABLE_ATTRIBUTE","focusZone","props","direction","FocusZoneDirection","bidirectional","keyActions","focusCell","keyCombinations","keyCode","keyboardKey","Escape","exports"],"sources":["behaviors/Table/gridCellMultipleFocusableBehavior.ts"],"sourcesContent":["import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport { keyboardKey } from '../../keyboard-key';\n\n/**\n * @specification\n * Adds role='gridcell'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Provides arrow key navigation in bidirectional direction.\n * Triggers 'focusCell' action with 'Escape' on 'root'.\n */\nexport const gridCellMultipleFocusableBehavior: Accessibility<GridCellMultipleFocusableBehavior> = () => ({\n  attributes: {\n    root: {\n      role: 'gridcell',\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n    },\n  },\n  focusZone: {\n    props: {\n      direction: FocusZoneDirection.bidirectional,\n    },\n  },\n  keyActions: {\n    root: {\n      focusCell: {\n        keyCombinations: [{ keyCode: keyboardKey.Escape }],\n      },\n    },\n  },\n});\n\ntype GridCellMultipleFocusableBehavior = never;\n"],"mappings":";;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMG,iCAAmF,GAAG,SAAtFA,iCAAmFA,CAAA;EAAA,IAAAC,KAAA;EAAA,OAAU;IACxGC,UAAU,EAAE;MACVC,IAAI,GAAAF,KAAA;QACFG,IAAI,EAAE;MAAU,GAAAH,KAAA,CACfI,kCAAsB,IAAG,IAAI,EAAAJ,KAAA;IAElC,CAAC;IACDK,SAAS,EAAE;MACTC,KAAK,EAAE;QACLC,SAAS,EAAEC,yBAAkB,CAACC;MAChC;IACF,CAAC;IACDC,UAAU,EAAE;MACVR,IAAI,EAAE;QACJS,SAAS,EAAE;UACTC,eAAe,EAAE,CAAC;YAAEC,OAAO,EAAEC,wBAAW,CAACC;UAAO,CAAC;QACnD;MACF;IACF;EACF,CAAC;AAAA,CAAC;AAACC,OAAA,CAAAjB,iCAAA,GAAAA,iCAAA"}
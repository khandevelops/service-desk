import * as React from 'react';
import cx from 'classnames';
import { useFluentContext } from '../context';
import { getStyles } from '../styles/getStyles';
export var useStyles = function useStyles(displayName, options) {
  var _composeOptions$mapPr;
  var context = useFluentContext();

  // Stores debug information for component.
  var debug = React.useRef({
    fluentUIDebug: null
  });
  if (options.unstyled) {
    var _options$composeOptio;
    var componentClassName = ((_options$composeOptio = options.composeOptions) == null ? void 0 : _options$composeOptio.className) || options.className;
    var classNameProp = options.mapPropsToInlineStyles == null ? void 0 : options.mapPropsToInlineStyles().className;
    return {
      classes: {
        root: cx(componentClassName, classNameProp)
      },
      styles: {}
    };
  }
  var _options$className = options.className,
    className = _options$className === void 0 ? process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰' : _options$className,
    composeOptions = options.composeOptions,
    _options$mapPropsToSt = options.mapPropsToStyles,
    mapPropsToStyles = _options$mapPropsToSt === void 0 ? function () {
      return {};
    } : _options$mapPropsToSt,
    _options$mapPropsToIn = options.mapPropsToInlineStyles,
    mapPropsToInlineStyles = _options$mapPropsToIn === void 0 ? function () {
      return {};
    } : _options$mapPropsToIn,
    _options$unstable_pro = options.unstable_props,
    unstable_props = _options$unstable_pro === void 0 ? {} : _options$unstable_pro,
    _options$rtl = options.rtl,
    rtl = _options$rtl === void 0 ? false : _options$rtl;
  var componentStylesProps = mapPropsToStyles();

  // `composeProps` should include all props including stylesProps as they can contain state
  var composeProps = Object.assign({}, unstable_props, componentStylesProps);
  var composeStylesProps = composeOptions == null ? void 0 : (_composeOptions$mapPr = composeOptions.mapPropsToStylesPropsChain) == null ? void 0 : _composeOptions$mapPr.reduce(function (acc, fn) {
    return Object.assign({}, acc, fn(composeProps));
  }, {});
  var _getStyles = getStyles({
      // Input values
      allDisplayNames: (composeOptions == null ? void 0 : composeOptions.displayNames) || [displayName],
      className: (composeOptions == null ? void 0 : composeOptions.className) || className,
      primaryDisplayName: (composeOptions == null ? void 0 : composeOptions.displayName) || displayName,
      componentProps: Object.assign({}, componentStylesProps, composeStylesProps),
      inlineStylesProps: mapPropsToInlineStyles(),
      // Context values
      disableAnimations: context.disableAnimations,
      renderer: context.renderer,
      rtl: rtl,
      saveDebug: function saveDebug(fluentUIDebug) {
        return debug.current = {
          fluentUIDebug: fluentUIDebug
        };
      },
      theme: context.theme,
      performance: context.performance,
      telemetry: context.telemetry
    }),
    classes = _getStyles.classes,
    resolvedStyles = _getStyles.styles;
  return {
    classes: classes,
    styles: resolvedStyles
  };
};
//# sourceMappingURL=useStyles.js.map

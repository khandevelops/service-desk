{"version":3,"file":"useUnhandledProps.js","names":["getUnhandledProps","useUnhandledProps","handledProps","props","process","env","NODE_ENV","Object","assign"],"sources":["hooks/useUnhandledProps.ts"],"sourcesContent":["import { getUnhandledProps } from '../utils/getUnhandledProps';\n\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\nexport function useUnhandledProps(handledProps: string[], props: Record<string, any>): Record<string, any> {\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps(handledProps, {\n      ...props,\n      'data-uses-unhanded-props': true,\n    } as Record<string, any>);\n  }\n\n  return getUnhandledProps(handledProps, props);\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,4BAA4B;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,YAAsB,EAAEC,KAA0B,EAAuB;EACzG,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;IACnC,OAAON,iBAAiB,CAACE,YAAY,EAAAK,MAAA,CAAAC,MAAA,KAChCL,KAAK;MACR,0BAA0B,EAAE;IAAI,EACV,CAAC;EAC3B;EAEA,OAAOH,iBAAiB,CAACE,YAAY,EAAEC,KAAK,CAAC;AAC/C"}
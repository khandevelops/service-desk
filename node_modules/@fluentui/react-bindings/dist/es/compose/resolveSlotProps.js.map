{"version":3,"file":"resolveSlotProps.js","names":["React","defaultMappedProps","mergeSlotProp","NullRender","resolveSlotProps","result","options","state","slots","slotProps","forEach","definition","nextSlotProps","Object","keys","key","assign","assignToMapObject","getUnhandledProps","slotName","slot","slotProp","undefined","mergedSlotProp","shorthandConfig","mappedProp","children","restProps","_objectWithoutPropertiesLoose","_excluded","Fragment","map","value","props","unhandledProps","_i","_Object$keys","length","handledProps","indexOf"],"sources":["compose/resolveSlotProps.ts"],"sourcesContent":["import * as React from 'react';\nimport { defaultMappedProps, ComposePreparedOptions, GenericDictionary, MergePropsResult } from './consts';\nimport { mergeSlotProp } from './mergeSlotProp';\n\nexport const NullRender = () => null;\n\n/**\n * Helper utility which resolves the slots and slot props derived from user input.\n */\nexport function resolveSlotProps<TProps, TState = TProps>(\n  result: MergePropsResult<TState>,\n  options: ComposePreparedOptions<TProps, TState>,\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  // Derive the default slot props from the config, if provided.\n  options.slotProps.forEach(definition => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const nextSlotProps = definition(state as any);\n\n    Object.keys(nextSlotProps).forEach(key => {\n      slotProps[key] = { ...slotProps[key], ...nextSlotProps[key] };\n    });\n  });\n\n  //  Mix unrecognized props onto root, appropriate, excluding the handled props.\n  assignToMapObject(slotProps, 'root', getUnhandledProps(state, options));\n\n  // Iterate through slots and resolve shorthand values.\n  Object.keys(slots).forEach((slotName: string) => {\n    const slot = slots[slotName];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const slotProp = (state as any)[slotName];\n\n    if (slot && slotProp !== undefined && slotProp !== null) {\n      const mergedSlotProp = mergeSlotProp(\n        slotProp,\n        slotProps[slotName],\n        (slot && slot.shorthandConfig && slot.shorthandConfig.mappedProp) || defaultMappedProps[slot],\n      );\n\n      if (typeof mergedSlotProp.children === 'function') {\n        const { children, ...restProps } = slotProp;\n        // If the children is a function, replace the slot.\n        slots[slotName] = React.Fragment;\n        slotProps[slotName] = {\n          children: slotProp.children(slot, { ...slotProps[slotName], ...restProps }),\n        };\n      } else {\n        slotProps[slotName] = mergedSlotProp;\n      }\n    }\n\n    // Ensure no slots are falsey\n    if (!slots[slotName] || slotProp === null) {\n      slots[slotName] = NullRender;\n    }\n  });\n\n  return result;\n}\n\nfunction assignToMapObject(map: Record<string, {}>, key: string, value: {}) {\n  if (value) {\n    if (!map[key]) {\n      map[key] = {};\n    }\n    map[key] = { ...map[key], ...value };\n  }\n}\n\nfunction getUnhandledProps<TProps, TState>(\n  props: GenericDictionary,\n  options: ComposePreparedOptions<TProps, TState>,\n): GenericDictionary {\n  const unhandledProps: GenericDictionary = {};\n  const slots = Object.keys(options.slots);\n\n  for (const key of Object.keys(props)) {\n    if (\n      key !== 'className' &&\n      key !== 'as' &&\n      options.handledProps.indexOf(key as keyof TProps) === -1 &&\n      slots.indexOf(key) === -1\n    ) {\n      unhandledProps[key] = props[key];\n    }\n  }\n\n  return unhandledProps;\n}\n"],"mappings":"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"}
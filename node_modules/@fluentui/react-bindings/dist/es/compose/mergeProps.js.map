{"version":3,"file":"mergeProps.js","names":["resolveSlotProps","mergeProps","state","options","result","slots","Object","assign","root","as","slotProps"],"sources":["compose/mergeProps.ts"],"sourcesContent":["import { ComposePreparedOptions, MergePropsResult, GenericDictionary } from './consts';\nimport { resolveSlotProps } from './resolveSlotProps';\n\n/**\n * Merge props takes in state and compose options, and resolves slots and slotProps.\n * It's expected that the component will call mergeProps(state, options) from within\n * render; after resolving state and before rendering slots and slotProps.\n */\nexport function mergeProps<\n  TProps,\n  TState = TProps,\n  TSlots = GenericDictionary,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TSlotProps = { [key in keyof TSlots]: any },\n>(state: TState, options: ComposePreparedOptions<TProps, TState>): MergePropsResult<TState, TSlots, TSlotProps> {\n  const result: MergePropsResult<TState> = {\n    state,\n    slots: {\n      ...options.slots,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      root: (state as any).as || options.slots.root || 'div',\n    },\n    slotProps: {},\n  };\n\n  // Resolve slotProps/slots from state.\n  resolveSlotProps(result, options);\n\n  // TODO: Resolve inline styles.\n\n  return result as MergePropsResult<TState, TSlots, TSlotProps>;\n}\n"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,oBAAoB;;AAErD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAMxBC,KAAa,EAAEC,OAA+C,EAAgD;EAC9G,IAAMC,MAAgC,GAAG;IACvCF,KAAK,EAALA,KAAK;IACLG,KAAK,EAAAC,MAAA,CAAAC,MAAA,KACAJ,OAAO,CAACE,KAAK;MAChB;MACAG,IAAI,EAAGN,KAAK,CAASO,EAAE,IAAIN,OAAO,CAACE,KAAK,CAACG,IAAI,IAAI;IAAK,EACvD;IACDE,SAAS,EAAE,CAAC;EACd,CAAC;;EAED;EACAV,gBAAgB,CAACI,MAAM,EAAED,OAAO,CAAC;;EAEjC;;EAEA,OAAOC,MAAM;AACf"}
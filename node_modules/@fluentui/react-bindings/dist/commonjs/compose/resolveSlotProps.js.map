{"version":3,"file":"resolveSlotProps.js","names":["React","_interopRequireWildcard","require","_consts","_mergeSlotProp","_excluded","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","NullRender","exports","resolveSlotProps","result","options","state","slots","slotProps","forEach","definition","nextSlotProps","keys","assign","assignToMapObject","getUnhandledProps","slotName","slot","slotProp","undefined","mergedSlotProp","mergeSlotProp","shorthandConfig","mappedProp","defaultMappedProps","children","restProps","_objectWithoutPropertiesLoose2","Fragment","map","value","props","unhandledProps","_i","_Object$keys","length","handledProps","indexOf"],"sources":["compose/resolveSlotProps.ts"],"sourcesContent":["import * as React from 'react';\nimport { defaultMappedProps, ComposePreparedOptions, GenericDictionary, MergePropsResult } from './consts';\nimport { mergeSlotProp } from './mergeSlotProp';\n\nexport const NullRender = () => null;\n\n/**\n * Helper utility which resolves the slots and slot props derived from user input.\n */\nexport function resolveSlotProps<TProps, TState = TProps>(\n  result: MergePropsResult<TState>,\n  options: ComposePreparedOptions<TProps, TState>,\n): MergePropsResult<TState> {\n  const { state, slots, slotProps } = result;\n\n  // Derive the default slot props from the config, if provided.\n  options.slotProps.forEach(definition => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const nextSlotProps = definition(state as any);\n\n    Object.keys(nextSlotProps).forEach(key => {\n      slotProps[key] = { ...slotProps[key], ...nextSlotProps[key] };\n    });\n  });\n\n  //  Mix unrecognized props onto root, appropriate, excluding the handled props.\n  assignToMapObject(slotProps, 'root', getUnhandledProps(state, options));\n\n  // Iterate through slots and resolve shorthand values.\n  Object.keys(slots).forEach((slotName: string) => {\n    const slot = slots[slotName];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const slotProp = (state as any)[slotName];\n\n    if (slot && slotProp !== undefined && slotProp !== null) {\n      const mergedSlotProp = mergeSlotProp(\n        slotProp,\n        slotProps[slotName],\n        (slot && slot.shorthandConfig && slot.shorthandConfig.mappedProp) || defaultMappedProps[slot],\n      );\n\n      if (typeof mergedSlotProp.children === 'function') {\n        const { children, ...restProps } = slotProp;\n        // If the children is a function, replace the slot.\n        slots[slotName] = React.Fragment;\n        slotProps[slotName] = {\n          children: slotProp.children(slot, { ...slotProps[slotName], ...restProps }),\n        };\n      } else {\n        slotProps[slotName] = mergedSlotProp;\n      }\n    }\n\n    // Ensure no slots are falsey\n    if (!slots[slotName] || slotProp === null) {\n      slots[slotName] = NullRender;\n    }\n  });\n\n  return result;\n}\n\nfunction assignToMapObject(map: Record<string, {}>, key: string, value: {}) {\n  if (value) {\n    if (!map[key]) {\n      map[key] = {};\n    }\n    map[key] = { ...map[key], ...value };\n  }\n}\n\nfunction getUnhandledProps<TProps, TState>(\n  props: GenericDictionary,\n  options: ComposePreparedOptions<TProps, TState>,\n): GenericDictionary {\n  const unhandledProps: GenericDictionary = {};\n  const slots = Object.keys(options.slots);\n\n  for (const key of Object.keys(props)) {\n    if (\n      key !== 'className' &&\n      key !== 'as' &&\n      options.handledProps.indexOf(key as keyof TProps) === -1 &&\n      slots.indexOf(key) === -1\n    ) {\n      unhandledProps[key] = props[key];\n    }\n  }\n\n  return unhandledProps;\n}\n"],"mappings":"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"}
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { render, rehydrate } from 'fela-dom';
import * as React from 'react';
// Copied from https://github.com/robinweser/fela/blob/master/packages/fela-bindings/src/RendererProviderFactory.js

function hasDOM(renderer, targetDocument) {
  // ensure we're on a browser by using document since window is defined in e.g. React Native
  // see https://github.com/robinweser/fela/issues/736
  if (typeof document === 'undefined') {
    return false;
  }
  var doc = targetDocument || document;
  return renderer && doc && doc.createElement;
}
function hasServerRenderedStyle(targetDocument) {
  if (targetDocument === void 0) {
    targetDocument = document;
  }
  return targetDocument.querySelectorAll('[data-fela-type]').length > 0;
}

// Typings provided by "fela" package are outdated, this overrides provides proper definition

export var RendererProvider = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(RendererProvider, _React$Component);
  function RendererProvider(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this._renderStyle();
    return _this;
  }
  var _proto = RendererProvider.prototype;
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (prevProps.renderer !== this.props.renderer) {
      // add warning that renderer is changed
      this._renderStyle();
    }
  };
  _proto._renderStyle = function _renderStyle() {
    var _this$props = this.props,
      renderer = _this$props.renderer,
      shouldRehydrate = _this$props.rehydrate,
      targetDocument = _this$props.targetDocument;
    if (hasDOM(renderer, targetDocument)) {
      if (shouldRehydrate && hasServerRenderedStyle(targetDocument)) {
        rehydrate(renderer, targetDocument);
      } else {
        render(renderer, targetDocument);
      }
    }
  };
  _proto.render = function render() {
    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children);
  };
  return RendererProvider;
}(React.Component);
//# sourceMappingURL=RendererProvider.js.map

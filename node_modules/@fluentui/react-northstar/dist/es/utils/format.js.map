{"version":3,"file":"format.js","names":["FORMAT_ARGS_REGEX","FORMAT_REGEX","format","s","values","args","replaceFunc","match","replacement","replace","undefined"],"sources":["utils/format.ts"],"sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s: string, ...values: any[]): string {\n  const args = values;\n  // Callback match function\n  function replaceFunc(match: string): string {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\n\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}\n"],"mappings":"AAAA;AACA,IAAMA,iBAAiB,GAAG,SAAS;;AAEnC;AACA,IAAMC,YAAY,GAAG,UAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAM,CAACC,CAAS,EAA4B;EAAA,kCAAvBC,MAAM;IAANA,MAAM;EAAA;EACzC,IAAMC,IAAI,GAAGD,MAAM;EACnB;EACA,SAASE,WAAW,CAACC,KAAa,EAAU;IAC1C;IACA;IACA,IAAIC,WAAW,GAAGH,IAAI,CAACE,KAAK,CAACE,OAAO,CAACT,iBAAiB,EAAE,EAAE,CAAC,CAAQ;;IAEnE;IACA,IAAIQ,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKE,SAAS,EAAE;MACrDF,WAAW,GAAG,EAAE;IAClB;IAEA,OAAOA,WAAW;EACpB;EACA,OAAOL,CAAC,CAACM,OAAO,CAACR,YAAY,EAAEK,WAAW,CAAC;AAC7C"}
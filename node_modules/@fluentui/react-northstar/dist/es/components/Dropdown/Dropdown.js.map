{"version":3,"file":"Dropdown.js","names":["getElementType","useAutoControlled","useStyles","useUnhandledProps","useFluentContext","useTelemetry","useMergedRefs","useIsomorphicLayoutEffect","handleRef","Ref","customPropTypes","indicatorBehavior","getCode","keyboardKey","React","PropTypes","cx","computeScrollIntoView","Downshift","commonPropTypes","isFromKeyboard","detectIsFromKeyboard","createShorthand","setWhatInputSource","List","DropdownItem","DropdownSelectedItem","DropdownSearchInput","Button","screenReaderContainerStyles","Box","Portal","ALIGNMENTS","POSITIONS","Popper","partitionPopperPropsFromShorthand","AUTOSIZES","CloseIcon","ChevronDownIcon","dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsCount","itemsList","searchInput","selectedItem","selectedItems","triggerButton","a11yStatusCleanupTime","charKeyPressedCleanupTime","normalizeValue","multiple","rawValue","normalizedValue","Array","isArray","slice","getFilteredValues","options","items","itemToString","itemToValue","search","searchQuery","value","filteredItemsByValue","filteredItemStrings","filteredItem","toLowerCase","filteredItems","filter","indexOf","isEmpty","prop","props","Dropdown","forwardRef","ref","context","displayName","telemetry","setStart","setEnd","ariaLabelledby","ariaDescribedby","ariaInvalid","allowFreeform","clearable","checkable","checkableIndicator","className","design","disabled","error","fluid","getA11ySelectionMessage","a11ySelectedItemsMessage","getA11yStatusMessage","inline","inverted","highlightFirstItemOnOpen","headerMessage","moveFocusOnTab","noResultsMessage","loading","loadingMessage","placeholder","renderItem","renderSelectedItem","styles","variables","align","flipBoundary","overflowBoundary","position","positionFixed","offset","unstable_disableTether","unstable_pinned","autoSize","list","positioningProps","buttonRef","useRef","inputRef","listRef","selectedItemsRef","containerRef","defaultTriggerButtonId","useMemo","selectedItemsCountNarrationId","ElementType","unhandledProps","handledProps","defaultValue","defaultActiveSelectedIndex","initialValue","undefined","activeSelectedIndex","setActiveSelectedIndex","defaultHighlightedIndex","highlightedIndex","setHighlightedIndex","defaultOpen","open","setOpen","defaultSearchQuery","setSearchQuery","setValue","useState","a11ySelectionStatus","setA11ySelectionStatus","focused","setFocused","setIsFromKeyboard","itemIsFromKeyboard","setItemIsFromKeyboard","startingString","setStartingString","inListbox","mapPropsToStyles","isEmptyClearIndicator","hasToggleIndicator","hasItemsSelected","length","mapPropsToInlineStyles","rtl","classes","resolvedStyles","popperRef","current","updatePosition","clearA11ySelectionMessage","clearStartingString","handleChange","e","handleOnBlur","target","renderTriggerButton","getToggleButtonProps","content","getSelectedItemAsString","triggerButtonId","triggerButtonContentId","triggerButtonProps","onFocus","handleTriggerButtonOrListFocus","onBlur","handleTriggerButtonBlur","onKeyDown","handleTriggerButtonKeyDown","Boolean","join","onClick","restTriggerButtonProps","defaultProps","id","overrideProps","predefinedProps","resolvedContent","children","renderSearchInput","accessibilityComboboxProps","getInputProps","selectItemAtIndex","toggleMenu","noPlaceholder","create","handleSearchInputOverrides","renderSelectedItemsCountNarration","narration","renderItemsList","getMenuProps","getItemProps","renderItems","refKey","suppressRefError","innerRef","accessibilityMenuProps","accessibilityInputProps","handleListKeyDown","listElement","tabIndex","listProps","handleListBlur","footerItem","renderItemsListFooter","headerItem","renderItemsListHeader","index","selected","active","hasOwnProperty","key","header","handleItemOverrides","render","push","selectedItemsCountNarration","renderSelectedItems","map","isSelectedItemActive","handleSelectedItemOverrides","downshiftStateReducer","state","changes","activeElement","type","stateChangeTypes","blurButton","isOpen","handleInputValueChange","inputValue","stateAndHelpers","itemSelected","setStateAndInvokeHandler","handleStateChange","newState","changeInput","shouldValueChange","itemIndex","findIndex","i","toLocaleLowerCase","startsWith","shouldMenuClose","keyDownEnter","clickItem","shouldAddHighlightedIndex","isSameItemSelected","newValue","onAdd","setA11ySelectionMessage","defaultView","setTimeout","scrollTop","scrollHeight","tryFocusTriggerButton","keyDownEscape","keyDownArrowDown","keyDownArrowUp","highlightedIndexOnArrowKeyOpen","getHighlightedIndexOnArrowKeyOpen","focus","mouseUp","clickButton","keyDownSpaceButton","itemMouseEnter","unknown","handlers","accessibilityItemProps","stopPropagation","nativeEvent","stopImmediatePropagation","onRemove","dropdownSelectedItemProps","handleSelectedItemRemove","handleSelectedItemKeyDown","handleInputBlur","searchInputProps","handleInputKeyDown","Home","End","Tab","handleTabSelection","ArrowLeft","process","env","NODE_ENV","view","document","trySetLastSelectedItemAsActive","ArrowRight","Backspace","tryRemoveItemFromValue","Escape","ArrowUp","ArrowDown","Enter","onChange","node","onInputBlur","onInputKeyDown","preventDefault","selectionStart","selectionEnd","removeItemFromValue","handleClear","tryFocusSearchInput","handleContainerClick","accessibilityInputPropsKeyDown","keyCode","keyString","String","fromCharCode","test","setHighlightedIndexOnCharKeyDown","previousKey","nextKey","Delete","relatedTarget","newStartingString","newHighlightedIndex","poppedItem","currentElement","pop","handlerNames","event","proposedValue","forEach","handlerName","isArrowUp","isArrowDown","itemsLength","useEffect","cancel","element","root","menu","nodeToScroll","actions","boundary","scrollMode","block","el","top","left","scrollLeft","getRootProps","accessibilityRootPropsRest","showClearIndicator","accessibility","role","propTypes","createCommon","number","bool","shorthandAllowingChildren","string","oneOfType","itemShorthand","collectionShorthand","object","func","onOpenChange","onSearchQueryChange","onActiveSelectedIndexChange","onHighlightedIndexChange","oneOf","arrayOf","Object","keys","isValidElement","Item","SearchInput","SelectedItem"],"sources":["components/Dropdown/Dropdown.tsx"],"sourcesContent":["import {\n  getElementType,\n  useAutoControlled,\n  useStyles,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  ForwardRefWithAs,\n  useMergedRefs,\n  useIsomorphicLayoutEffect,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior, AccessibilityAttributes, getCode, keyboardKey } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport computeScrollIntoView from 'compute-scroll-into-view';\n\nimport { ShorthandRenderFunction, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n  ControllerStateAndHelpers,\n} from 'downshift';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard as detectIsFromKeyboard,\n  createShorthand,\n  setWhatInputSource,\n} from '../../utils';\nimport { List, ListProps } from '../List/List';\nimport { DropdownItem, DropdownItemProps } from './DropdownItem';\nimport { DropdownSelectedItem, DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport { DropdownSearchInput, DropdownSearchInputProps } from './DropdownSearchInput';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Portal } from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  partitionPopperPropsFromShorthand,\n  AutoSize,\n  AUTOSIZES,\n} from '../../utils/positioner';\nimport { CloseIcon, ChevronDownIcon } from '@fluentui/react-icons-northstar';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsCount: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** Whether the ComboBox allows freeform user input, rather than restricting to the provided options. */\n  allowFreeform?: boolean;\n\n  /** Identifies the element (or elements) that labels the current element. Will be passed to `triggerButton`. */\n  'aria-labelledby'?: AccessibilityAttributes['aria-labelledby'];\n  'aria-describedby'?: AccessibilityAttributes['aria-describedby'];\n\n  /** Indicates the entered value does not conform to the format expected by the application. Will be passed to `triggerButton`. */\n  'aria-invalid'?: AccessibilityAttributes['aria-invalid'];\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message about the selected items count a screen reader narrates on input field focus.\n     * @param count - number of items selected.\n     */\n    itemsCount?: (count: number) => string;\n  };\n\n  /** A label for selected items listbox. */\n  a11ySelectedItemsMessage?: string;\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the focus moves out from dropdown.\n   * @param event - React's original SyntheticEvent.\n   */\n  onBlur?: (event: React.FocusEvent | null) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** Dropdown can have errors status  */\n  error?: boolean;\n}\n\nexport type DropdownStylesProps = Required<\n  Pick<DropdownProps, 'disabled' | 'error' | 'fluid' | 'inline' | 'inverted' | 'multiple' | 'position' | 'open'>\n> & {\n  focused: boolean;\n  isEmptyClearIndicator: boolean;\n  hasToggleIndicator: boolean;\n  isFromKeyboard: boolean;\n  search: boolean;\n  hasItemsSelected: boolean;\n};\n\ntype DropdownStateForInvoke = {\n  activeSelectedIndex?: number | null;\n  highlightedIndex?: number | null;\n  itemIsFromKeyboard?: boolean;\n  open?: boolean;\n  searchQuery?: string;\n  value?: ShorthandCollection<DropdownItemProps>;\n};\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsCount: `${dropdownClassName}__items-count`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nconst a11yStatusCleanupTime = 500;\nconst charKeyPressedCleanupTime = 500;\n\n/** `normalizedValue` should be normalized always as it can be received from props */\nfunction normalizeValue(multiple: boolean, rawValue: DropdownProps['value']): ShorthandCollection<DropdownItemProps> {\n  const normalizedValue = Array.isArray(rawValue) ? rawValue : [rawValue];\n\n  if (multiple) {\n    return normalizedValue;\n  }\n\n  if (normalizedValue[0] === '') {\n    return [];\n  }\n\n  return normalizedValue.slice(0, 1);\n}\n\n/**\n * Used to compute the filtered items (by value and search query) and, if needed,\n * their string equivalents, in order to be used throughout the component.\n */\nfunction getFilteredValues(\n  options: Required<\n    Pick<DropdownProps, 'multiple' | 'items' | 'itemToValue' | 'itemToString' | 'search' | 'searchQuery'>\n  > & {\n    value: ShorthandCollection<DropdownItemProps>;\n  },\n) {\n  const { items, itemToString, itemToValue, multiple, search, searchQuery, value } = options;\n\n  const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n  const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n  if (search) {\n    if (_.isFunction(search)) {\n      return {\n        filteredItems: search(filteredItemsByValue, searchQuery),\n        filteredItemStrings,\n      };\n    }\n\n    return {\n      filteredItems: filteredItemsByValue.filter(\n        item => itemToString(item).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1,\n      ),\n      filteredItemStrings,\n    };\n  }\n\n  return {\n    filteredItems: filteredItemsByValue,\n    filteredItemStrings,\n  };\n}\n\nconst isEmpty = prop => {\n  return typeof prop === 'object' && !prop.props && !_.get(prop, 'children') && !_.get(prop, 'content');\n};\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n * [JAWS - ESC (ESCAPE) not closing collapsible listbox (dropdown) on first time #528](https://github.com/FreedomScientific/VFO-standards-support/issues/528)\n */\nexport const Dropdown = (React.forwardRef<HTMLDivElement, DropdownProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Dropdown.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-invalid': ariaInvalid,\n    allowFreeform,\n    clearable,\n    clearIndicator,\n    checkable,\n    checkableIndicator,\n    className,\n    design,\n    disabled,\n    error,\n    fluid,\n    getA11ySelectionMessage,\n    a11ySelectedItemsMessage,\n    getA11yStatusMessage,\n    inline,\n    inverted,\n    itemToString,\n    itemToValue,\n    items,\n    highlightFirstItemOnOpen,\n    multiple,\n    headerMessage,\n    moveFocusOnTab,\n    noResultsMessage,\n    loading,\n    loadingMessage,\n    placeholder,\n    renderItem,\n    renderSelectedItem,\n    search,\n    searchInput,\n    styles,\n    toggleIndicator,\n    triggerButton,\n    variables,\n  } = props;\n\n  const {\n    align,\n    flipBoundary,\n    overflowBoundary,\n    position,\n    positionFixed,\n    offset,\n    unstable_disableTether,\n    unstable_pinned,\n    autoSize,\n  } = props; // PositioningProps passed directly to Dropdown\n  const [list, positioningProps] = partitionPopperPropsFromShorthand(props.list); // PositioningProps passed to Dropdown `list` prop's `popper` key\n\n  const buttonRef = React.useRef<HTMLElement>();\n  const inputRef = React.useRef<HTMLInputElement | undefined>() as React.MutableRefObject<HTMLInputElement | undefined>;\n  const listRef = React.useRef<HTMLElement>();\n  const selectedItemsRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const defaultTriggerButtonId = React.useMemo(() => _.uniqueId('dropdown-trigger-button-'), []);\n  const selectedItemsCountNarrationId = React.useMemo(() => _.uniqueId('dropdown-selected-items-count-'), []);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Dropdown.handledProps, props);\n\n  const [activeSelectedIndex, setActiveSelectedIndex] = useAutoControlled<number | null | undefined>({\n    defaultValue: props.defaultActiveSelectedIndex,\n    initialValue: multiple ? null : undefined,\n    value: props.activeSelectedIndex,\n  });\n  const [highlightedIndex, setHighlightedIndex] = useAutoControlled<number | null>({\n    defaultValue: props.defaultHighlightedIndex,\n    initialValue: highlightFirstItemOnOpen ? 0 : null,\n    value: props.highlightedIndex,\n  });\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    initialValue: false,\n    value: props.open,\n  });\n  const [searchQuery, setSearchQuery] = useAutoControlled<string | undefined>({\n    defaultValue: props.defaultSearchQuery,\n    initialValue: search ? '' : undefined,\n    value: props.searchQuery,\n  });\n  const [rawValue, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    initialValue: [],\n    value: props.value,\n  });\n  const value = normalizeValue(multiple, rawValue);\n\n  const [a11ySelectionStatus, setA11ySelectionStatus] = React.useState('');\n  const [focused, setFocused] = React.useState(false);\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState(false);\n  const [itemIsFromKeyboard, setItemIsFromKeyboard] = React.useState(false);\n  const [startingString, setStartingString] = React.useState<string | undefined>(search ? undefined : '');\n  // used for keeping track of the source of the input, as Downshift does not pass events to the handlers\n  // for free form dropdown:\n  // - if the value is changed based on search query change (from input), accept any value even if not in the list\n  // - if the value is changed based on selection from list, use the value from the list item\n  const inListbox = React.useRef(false);\n\n  const { filteredItems, filteredItemStrings } = getFilteredValues({\n    itemToString,\n    itemToValue,\n    items,\n    multiple,\n    search,\n    searchQuery,\n    value,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownStylesProps>(Dropdown.displayName, {\n    className: dropdownClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      error,\n      fluid,\n      focused,\n      isEmptyClearIndicator: isEmpty(clearIndicator),\n      hasToggleIndicator: !!toggleIndicator,\n      inline,\n      inverted,\n      isFromKeyboard,\n      multiple,\n      open,\n      position: positioningProps?.position ?? position,\n      search: !!search,\n      hasItemsSelected: value.length > 0,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const popperRef = useMergedRefs(props.popperRef);\n\n  useIsomorphicLayoutEffect(() => {\n    popperRef.current?.updatePosition();\n  }, [filteredItems?.length, popperRef]);\n\n  const clearA11ySelectionMessage = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setA11ySelectionStatus('');\n      }, a11yStatusCleanupTime),\n    [],\n  );\n  const clearStartingString = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setStartingString('');\n      }, charKeyPressedCleanupTime),\n    [],\n  );\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, value });\n  };\n\n  const handleOnBlur = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    if (e.target !== buttonRef.current) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const renderTriggerButton = (getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any): JSX.Element => {\n    const content = getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || defaultTriggerButtonId;\n    const triggerButtonContentId = `${triggerButtonId}__content`;\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: handleTriggerButtonOrListFocus,\n      onBlur: handleTriggerButtonBlur,\n      onKeyDown: e => {\n        handleTriggerButtonKeyDown(e);\n      },\n      'aria-invalid': ariaInvalid,\n      'aria-label': undefined,\n      'aria-labelledby': [ariaLabelledby, triggerButtonContentId].filter(Boolean).join(' '),\n      ...(open && { 'aria-expanded': true }),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: resolvedStyles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => {\n            // It can be a shorthand\n            const resolvedContent = _.isPlainObject(predefinedProps.content)\n              ? (predefinedProps.content as {})\n              : predefinedProps.content\n              ? { children: predefinedProps.content }\n              : {};\n\n            return {\n              content:\n                // If `null` is passed we should not render the slot\n                predefinedProps.content === null ? null : { content, id: triggerButtonContentId, ...resolvedContent },\n              onClick: e => {\n                onClick(e);\n                _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n              },\n              onFocus: e => {\n                onFocus(e);\n                _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n              },\n              onBlur: e => {\n                if (!disabled) {\n                  onBlur(e);\n                }\n\n                _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n              },\n              onKeyDown: e => {\n                if (!disabled) {\n                  onKeyDown(e);\n                }\n\n                _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n              },\n            };\n          },\n        })}\n      </Ref>\n    );\n  };\n\n  const renderSearchInput = (\n    accessibilityComboboxProps: Object,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element => {\n    const noPlaceholder = searchQuery?.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        disabled,\n      }),\n      overrideProps: handleSearchInputOverrides(\n        highlightedIndex,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  };\n\n  const renderSelectedItemsCountNarration = id => {\n    // Get narration only if callback is provided, at least one item is selected and only in multiple case\n    if (!getA11ySelectionMessage || !getA11ySelectionMessage.itemsCount || value.length === 0 || !multiple) {\n      return null;\n    }\n    const narration = getA11ySelectionMessage.itemsCount(value.length);\n    return (\n      <span id={id} className={dropdownSlotClassNames.itemsCount} style={screenReaderContainerStyles}>\n        {narration}\n      </span>\n    );\n  };\n  const renderItemsList = (\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => {\n    const items = open ? renderItems(getItemProps) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          rtl={context.rtl}\n          enabled={open}\n          targetRef={containerRef}\n          positioningDependencies={[items.length]}\n          // positioning props:\n          align={align}\n          flipBoundary={flipBoundary}\n          overflowBoundary={overflowBoundary}\n          popperRef={popperRef}\n          position={position}\n          positionFixed={positionFixed}\n          offset={offset}\n          unstable_disableTether={unstable_disableTether}\n          unstable_pinned={unstable_pinned}\n          autoSize={autoSize}\n          {...positioningProps}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: resolvedStyles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  };\n\n  const renderItems = (getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any) => {\n    const footerItem = renderItemsListFooter();\n    const headerItem = renderItemsListHeader();\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  };\n\n  const renderItemsListHeader = () => {\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: resolvedStyles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderItemsListFooter = () => {\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: resolvedStyles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (filteredItems && filteredItems.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: resolvedStyles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const selectedItemsCountNarration = renderSelectedItemsCountNarration(selectedItemsCountNarrationId);\n  const renderSelectedItems = () => {\n    if (value.length === 0) {\n      return null;\n    }\n\n    const selectedItems = value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: isSelectedItemActive(index),\n          disabled,\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: handleSelectedItemOverrides(item),\n        render: renderSelectedItem,\n      }),\n    );\n    return (\n      <>\n        <div role=\"listbox\" tabIndex={-1} aria-label={a11ySelectedItemsMessage}>\n          {selectedItems}\n        </div>\n        {selectedItemsCountNarration}\n      </>\n    );\n  };\n\n  const downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === listRef.current) {\n          return {}; // won't change state in this case.\n        }\n        _.invoke(props, 'onBlur', null);\n      default:\n        return changes;\n    }\n  };\n\n  const handleInputValueChange = (\n    inputValue: string,\n    stateAndHelpers: ControllerStateAndHelpers<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const itemSelected = stateAndHelpers.selectedItem && inputValue === itemToString(stateAndHelpers.selectedItem);\n    if (\n      inputValue !== searchQuery &&\n      !itemSelected // when item is selected, `handleStateChange` will update searchQuery.\n    ) {\n      setStateAndInvokeHandler(['onSearchQueryChange'], null, {\n        searchQuery: inputValue,\n      });\n    }\n  };\n\n  const handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { type } = changes;\n    const newState = {} as DropdownStateForInvoke;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n\n        if (allowFreeform) {\n          // set highlighted index to first item starting with search query\n          const itemIndex = items.findIndex(i =>\n            itemToString(i)?.toLocaleLowerCase().startsWith(changes.inputValue?.toLowerCase()),\n          );\n          if (itemIndex !== -1) {\n            newState.highlightedIndex = itemIndex;\n            // for free form always keep searchQuery and inputValue in sync\n            // as state change might not be called after last letter was entered\n            newState.searchQuery = changes.inputValue;\n          }\n        } else {\n          newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        }\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = getSelectedItemAsString(newValue);\n        if (allowFreeform && !inListbox.current && type === Downshift.stateChangeTypes.keyDownEnter) {\n          const itemIndex = items.findIndex(i =>\n            itemToString(i)?.toLocaleLowerCase().startsWith(searchQuery?.toLocaleLowerCase()),\n          );\n\n          // if there is an item that starts with searchQuery, still apply the search query\n          // to do auto complete (you enter '12:', can be completed to '12:00')\n          if (itemIndex === -1) {\n            delete newState.searchQuery;\n          }\n        }\n\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n        inListbox.current = false;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          context.target?.defaultView.setTimeout(\n            () => (selectedItemsRef.current.scrollTop = selectedItemsRef.current.scrollHeight),\n            0,\n          );\n        }\n\n        // timeout because of NVDA, otherwise it narrates old button value/state\n        context.target?.defaultView.setTimeout(() => tryFocusTriggerButton(), 100);\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search && !multiple) {\n          newState.value = [];\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          if (allowFreeform) {\n            const itemIndex = items.findIndex(i =>\n              itemToString(i)?.toLowerCase().startsWith(searchQuery?.toLowerCase()),\n            );\n\n            // if there is an item that starts with searchQuery, still apply the search query\n            // to do auto complete (you enter '12:', can be completed to '12:00')\n            if (itemIndex !== -1) {\n              newState.searchQuery = itemToString(items[itemIndex]);\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n        newState.itemIsFromKeyboard = isFromKeyboard;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            listRef.current.focus();\n          }\n        } else if (allowFreeform) {\n          const itemIndex = items.findIndex(i =>\n            itemToString(i)?.toLocaleLowerCase().startsWith(searchQuery.toLowerCase()),\n          );\n\n          // if there is an item that starts with searchQuery, still apply the search query\n          // to do auto complete (you enter '12:', can be completed to '12:00')\n          if (itemIndex !== -1) {\n            newState.searchQuery = itemToString(items[itemIndex]);\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n      newState.value !== undefined && 'onChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  const isSelectedItemActive = (index: number): boolean => {\n    return index === activeSelectedIndex;\n  };\n\n  const handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  const handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n  });\n\n  const handleSearchInputOverrides = (\n    highlightedIndex: number,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n\n    const handleInputKeyDown = (\n      e: React.KeyboardEvent<HTMLInputElement>,\n      searchInputProps: DropdownSearchInputProps,\n    ) => {\n      if (!disabled) {\n        switch (getCode(e)) {\n          // https://github.com/downshift-js/downshift/issues/1097\n          // Downshift skips Home/End if Deopdown is opened\n          case keyboardKey.Home:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.End:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.Tab:\n            e.stopPropagation();\n            handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            e.stopPropagation();\n            if (!context.rtl) {\n              // https://github.com/testing-library/user-event/issues/709\n              // JSDOM does not implement `event.view` so prune this code path in test\n              if (process.env.NODE_ENV !== 'test') {\n                setWhatInputSource(e.view.document, 'keyboard');\n              }\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            e.stopPropagation();\n            if (context.rtl) {\n              // https://github.com/testing-library/user-event/issues/709\n              // JSDOM does not implement `event.view` so prune this code path in test\n              if (process.env.NODE_ENV !== 'test') {\n                setWhatInputSource(e.view.document, 'keyboard');\n              }\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            e.stopPropagation();\n            tryRemoveItemFromValue();\n            break;\n          case keyboardKey.Escape:\n            // If dropdown list is open ESC should close it and not propagate to the parent\n            // otherwise event should propagate\n            if (open) {\n              e.stopPropagation();\n            }\n          case keyboardKey.ArrowUp:\n          case keyboardKey.ArrowDown:\n            if (allowFreeform) {\n              inListbox.current = true;\n            }\n            break;\n          default:\n            if (getCode(e) !== keyboardKey.Enter) {\n              inListbox.current = false;\n            }\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n\n            // A state modification should be triggered there otherwise it will go to an another frame and will break\n            // cursor position:\n            // https://github.com/facebook/react/issues/955#issuecomment-469352730\n            setSearchQuery(e.target.value);\n          },\n          'aria-labelledby': ariaLabelledby,\n          'aria-describedby': ariaDescribedby || selectedItemsCountNarrationId,\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n\n      inputRef: (node: HTMLInputElement) => {\n        handleRef(predefinedProps.inputRef, node);\n        inputRef.current = node;\n      },\n      onFocus: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          setFocused(true);\n          setIsFromKeyboard(detectIsFromKeyboard());\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  const handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  const trySetLastSelectedItemAsActive = () => {\n    if (!multiple || (inputRef.current && inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (activeSelectedIndex === value.length - 1) {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      } else {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  const tryRemoveItemFromValue = () => {\n    if (\n      multiple &&\n      (searchQuery === '' || (inputRef.current.selectionStart === 0 && inputRef.current.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      removeItemFromValue();\n    }\n  };\n\n  const handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex: multiple ? null : undefined,\n      highlightedIndex: highlightFirstItemOnOpen ? 0 : null,\n      open: false,\n      searchQuery: search ? '' : undefined,\n      value: [],\n    });\n\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n  };\n\n  const handleContainerClick = () => {\n    tryFocusSearchInput();\n  };\n\n  const handleTriggerButtonKeyDown = (e: React.KeyboardEvent) => {\n    switch (getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const handleListKeyDown = (\n    e: React.KeyboardEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  const handleSelectedItemKeyDown = (\n    e: React.KeyboardEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    const previousKey = context.rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = context.rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex + 1,\n            });\n          } else {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: null,\n            });\n\n            if (search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              inputRef.current.focus();\n            } else {\n              buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  };\n\n  const handleTriggerButtonOrListFocus = () => {\n    setFocused(true);\n    setIsFromKeyboard(detectIsFromKeyboard());\n  };\n\n  const handleTriggerButtonBlur = e => {\n    if (listRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  const handleListBlur = e => {\n    if (buttonRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  const setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    setStartingString(newStartingString);\n    clearStartingString();\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  const handleSelectedItemRemove = (\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    removeItemFromValue(item);\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  };\n\n  const removeItemFromValue = (item?: ShorthandValue<DropdownItemProps>) => {\n    let poppedItem = item;\n    let newValue = [...value];\n\n    if (poppedItem) {\n      newValue = newValue.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = newValue.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    setStateAndInvokeHandler(['onChange'], null, { value: newValue });\n  };\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  const setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: DropdownStateForInvoke,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = multiple ? proposedValue : proposedValue[0] || null;\n\n    if (newState.hasOwnProperty('activeSelectedIndex')) {\n      setActiveSelectedIndex(newState.activeSelectedIndex);\n    }\n    if (newState.hasOwnProperty('highlightedIndex')) {\n      setHighlightedIndex(newState.highlightedIndex);\n    }\n    if (newState.hasOwnProperty('itemIsFromKeyboard')) {\n      setItemIsFromKeyboard(newState.itemIsFromKeyboard);\n    }\n    if (newState.hasOwnProperty('open')) {\n      setOpen(newState.open);\n    }\n    if (newState.hasOwnProperty('searchQuery')) {\n      setSearchQuery(newState.searchQuery);\n    }\n    if (newState.hasOwnProperty('value')) {\n      setValue(newState.value);\n    }\n\n    handlerNames.forEach(handlerName => {\n      _.invoke(props, handlerName, event, { ...props, ...newState, value: newValue });\n    });\n  };\n\n  const tryFocusTriggerButton = () => {\n    if (!search && buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  };\n\n  const tryFocusSearchInput = () => {\n    if (search && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  const getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  const getHighlightedIndexOnArrowKeyOpen = (\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ): number => {\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && value.length > 0) {\n      // in single selection (search or not search), if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (isArrowUp && newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      if (newHighlightedIndex > 0) {\n        return newHighlightedIndex;\n      }\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  const setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    setA11ySelectionStatus(a11ySelectionStatus);\n    clearA11ySelectionMessage();\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearStartingString.cancel();\n      clearA11ySelectionMessage.cancel();\n    };\n  }, [clearA11ySelectionMessage, clearStartingString]);\n\n  const element = (\n    <ElementType\n      className={classes.root}\n      onBlur={handleOnBlur}\n      onChange={handleChange}\n      ref={ref}\n      {...unhandledProps}\n      {...(process.env.NODE_ENV === 'test' && { 'data-test-focused': focused })}\n    >\n      <Downshift\n        isOpen={open}\n        inputValue={search ? searchQuery : null}\n        stateReducer={downshiftStateReducer}\n        itemToString={itemToString}\n        // downshift does not work with arrays as selectedItem.\n        selectedItem={multiple || !value.length ? null : value[0]}\n        scrollIntoView={(node: HTMLElement, menu: HTMLElement) => {\n          if (node) {\n            const { children } = menu;\n            let nodeToScroll = node;\n            /**\n             * If it's loading downshift doesn't take the last node with loadingMessage\n             * in consideration to scrolld so we need to check if the current is the\n             * antepenultimate and is so scroll the loading into view, same for headerMessage\n             */\n            if (loading && children[children.length - 2] === node) {\n              nodeToScroll = children[children.length - 1] as HTMLElement;\n            } else if (headerMessage && children[1] === node) {\n              nodeToScroll = children[0] as HTMLElement;\n            }\n\n            // Replicating same config that Downshift uses\n            const actions = computeScrollIntoView(nodeToScroll, {\n              boundary: menu, // Explicitly set boundary to avoid unnecessary scrolling by checking all parent elements\n              scrollMode: 'if-needed',\n              block: 'nearest',\n              inline: 'nearest',\n            });\n            actions.forEach(({ el, top, left }) => {\n              el.scrollTop = top;\n              el.scrollLeft = left;\n            });\n          }\n        }}\n        getA11yStatusMessage={getA11yStatusMessage}\n        highlightedIndex={highlightedIndex}\n        onStateChange={handleStateChange}\n        onInputValueChange={handleInputValueChange}\n        labelId={ariaLabelledby}\n        environment={context.target?.defaultView}\n        inputId={searchInput && searchInput['id'] ? searchInput['id'] : undefined}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          getRootProps,\n          getToggleButtonProps,\n          toggleMenu,\n          highlightedIndex,\n          selectItemAtIndex,\n        }) => {\n          const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n            { refKey: 'innerRef' },\n            { suppressRefError: true },\n          );\n          const showClearIndicator = clearable && value.length > 0;\n\n          return (\n            <Ref innerRef={innerRef}>\n              <div\n                ref={containerRef}\n                className={cx(dropdownSlotClassNames.container, classes.container)}\n                onClick={search && !open ? handleContainerClick : undefined}\n              >\n                <div ref={selectedItemsRef} className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}>\n                  {/* We previously were rendering the trigger button after selected items list,\n                    after listbox wrapper was introduced we moved it to before and\n                     set as absolute to avoid visual regressions   */}\n                  {!search && renderTriggerButton(getToggleButtonProps)}\n                  {multiple && renderSelectedItems()}\n                  {search &&\n                    renderSearchInput(\n                      accessibilityRootPropsRest,\n                      highlightedIndex,\n                      getInputProps,\n                      selectItemAtIndex,\n                      toggleMenu,\n                      variables,\n                    )}\n                </div>\n                {showClearIndicator\n                  ? Box.create(clearIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.clearIndicator,\n                        styles: resolvedStyles.clearIndicator,\n                        accessibility: indicatorBehavior,\n                        ...(!search && { tabIndex: 0, role: 'button' }),\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                          _.invoke(predefinedProps, 'onClick', e);\n                          handleClear(e);\n                        },\n                      }),\n                    })\n                  : Box.create(toggleIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.toggleIndicator,\n                        styles: resolvedStyles.toggleIndicator,\n                        accessibility: indicatorBehavior,\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: e => {\n                          if (!disabled) {\n                            getToggleButtonProps({ disabled }).onClick(e);\n                          }\n\n                          _.invoke(predefinedProps, 'onClick', e);\n                        },\n                      }),\n                    })}\n                {renderItemsList(\n                  highlightedIndex,\n                  toggleMenu,\n                  selectItemAtIndex,\n                  getMenuProps,\n                  getItemProps,\n                  getInputProps,\n                )}\n              </div>\n            </Ref>\n          );\n        }}\n      </Downshift>\n      <Portal open={!!getA11ySelectionMessage}>\n        <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n          {a11ySelectionStatus}\n        </div>\n      </Portal>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DropdownProps> &\n  FluentComponentStaticProps<DropdownProps> & {\n    Item: typeof DropdownItem;\n    SearchInput: typeof DropdownSearchInput;\n    SelectedItem: typeof DropdownSelectedItem;\n  };\n\nDropdown.displayName = 'Dropdown';\n\nDropdown.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  activeSelectedIndex: PropTypes.number,\n  allowFreeform: PropTypes.bool,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  clearable: PropTypes.bool,\n  clearIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultActiveSelectedIndex: PropTypes.number,\n  defaultOpen: PropTypes.bool,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultSearchQuery: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  fluid: PropTypes.bool,\n  getA11ySelectionMessage: PropTypes.object,\n  getA11yStatusMessage: PropTypes.func,\n  highlightFirstItemOnOpen: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  itemToString: PropTypes.func,\n  itemToValue: PropTypes.func,\n  headerMessage: customPropTypes.itemShorthand,\n  list: customPropTypes.itemShorthand,\n  loading: PropTypes.bool,\n  loadingMessage: customPropTypes.itemShorthand,\n  moveFocusOnTab: PropTypes.bool,\n  multiple: PropTypes.bool,\n  noResultsMessage: customPropTypes.itemShorthand,\n  onOpenChange: PropTypes.func,\n  onSearchQueryChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onActiveSelectedIndexChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  open: PropTypes.bool,\n  placeholder: PropTypes.string,\n  renderItem: PropTypes.func,\n  renderSelectedItem: PropTypes.func,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  searchQuery: PropTypes.string,\n  searchInput: customPropTypes.itemShorthand,\n  toggleIndicator: customPropTypes.shorthandAllowingChildren,\n  triggerButton: customPropTypes.itemShorthand,\n  value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  'aria-labelledby': PropTypes.string,\n  'aria-invalid': PropTypes.bool,\n  a11ySelectedItemsMessage: PropTypes.string,\n  // positioning props\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  popperRef: customPropTypes.ref,\n  position: PropTypes.oneOf(POSITIONS),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n  unstable_pinned: PropTypes.bool,\n  autoSize: PropTypes.oneOf<AutoSize>(AUTOSIZES),\n};\nDropdown.handledProps = Object.keys(Dropdown.propTypes) as any;\n\nDropdown.defaultProps = {\n  align: 'start',\n  clearIndicator: <CloseIcon outline />,\n  itemToString: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  itemToValue: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  list: {},\n  position: 'below',\n  toggleIndicator: <ChevronDownIcon outline />,\n  triggerButton: {},\n};\n\nDropdown.Item = DropdownItem;\nDropdown.SearchInput = DropdownSearchInput;\nDropdown.SelectedItem = DropdownSelectedItem;\n"],"mappings":"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"}
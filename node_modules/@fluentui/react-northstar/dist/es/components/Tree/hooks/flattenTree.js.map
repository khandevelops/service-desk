{"version":3,"file":"flattenTree.js","names":["SECRET_ROOT_ID","flattenTree","items","activeItemIds","selectedItemIds","flatTree","index","level","expanded","treeSize","hasSubtree","flattenSubTree","parent","isParentVisible","visibleItemIds","selectedChildrenNum","selectableChildrenNum","itemsInLeaf","length","selectedNum","selectableNum","forEach","item","indexAmongSiblings","id","childrenItems","selectable","indexOf","undefined","selected","push","childrenIds"],"sources":["components/Tree/hooks/flattenTree.ts"],"sourcesContent":["import { ObjectShorthandValue } from '../../../types';\nimport { TreeItemProps } from '../TreeItem';\n\nexport interface FlatTreeItem {\n  /**\n   * Also in TreeItemProps.\n   * The index of the item among its siblings. Count starts at 1.\n   */\n  index: number;\n\n  /**\n   * Also in TreeItemProps.\n   * Level of the tree/subtree that contains this item.\n   */\n  level: number;\n\n  /**\n   * Also in TreeItemProps.\n   * true if the tree item is expanded (indicating tree item has subtree).\n   * when tree item has no subtree, expanded is undefined\n   */\n  expanded?: boolean;\n\n  /**\n   * Also in TreeItemProps.\n   * parent id of the tree item. For the top level tree items, parent is undefined\n   */\n  parent?: string;\n\n  /**\n   * Also in TreeItemProps.\n   * Size of the tree/subtree that contains this item.\n   */\n  treeSize: number;\n\n  /** true if the tree item has subtree, indicating childrenIds are not undefined */\n  hasSubtree: boolean;\n\n  /** children ids of the tree item. For leaf tree item, childrenIds is undefined */\n  childrenIds?: string[];\n\n  /** Shorthand props for the current item */\n  item: ObjectShorthandValue<TreeItemProps>;\n\n  /**\n   * when selected=true, the tree item is fully selected, indicating all its descendents are fully selected;\n   * when selected=false, the tree item is not selected, indicating none of its descendents is selected;\n   * when selected='indeterminate', only part of the tree item's descendents are selected\n   */\n  selected?: boolean | 'indeterminate';\n}\n\nexport type FlatTree = Record<string, FlatTreeItem>;\n\n// Fluent UI Tree component does not have a root item.\n// Adding a 'secret' root (level=0) helps traversing among the top level (level=1) tree items.\n// This 'secret' root should NOT be returned as part of orderedItemIds, because it is not an item from user props\nconst SECRET_ROOT_ID = 'FLUENT_UI_SECRET_ROOT_ID';\n\n/**\n * @returns returns the flattened tree, and an array of all visible tree item ids in a Depth First order.\n */\nexport function flattenTree(\n  items: ObjectShorthandValue<TreeItemProps>[],\n  activeItemIds: string[],\n  selectedItemIds: string[],\n): { flatTree: FlatTree; visibleItemIds: string[] } {\n  const flatTree = {\n    [SECRET_ROOT_ID]: {\n      index: 1,\n      level: 0,\n      expanded: true,\n      treeSize: 1,\n      hasSubtree: true,\n    } as FlatTreeItem,\n  };\n\n  // returns an extra array of orderedItemIds because flattened tree object does not keep the order of insertion\n  return flattenSubTree(items, 1, SECRET_ROOT_ID, flatTree, true, activeItemIds, [], selectedItemIds);\n}\n\nfunction flattenSubTree(\n  items: ObjectShorthandValue<TreeItemProps>[],\n  level: number = 1,\n  parent: string,\n  flatTree: FlatTree,\n  isParentVisible: boolean = true,\n  activeItemIds: string[],\n  visibleItemIds: string[],\n  selectedItemIds: string[],\n): { flatTree: FlatTree; visibleItemIds: string[]; selectedChildrenNum: number; selectableChildrenNum: number } {\n  if (!items) {\n    return { flatTree, visibleItemIds, selectedChildrenNum: 0, selectableChildrenNum: 0 };\n  }\n\n  const itemsInLeaf = items.length;\n  let selectedNum = 0;\n  let selectableNum = 0;\n\n  items.forEach((item, indexAmongSiblings) => {\n    const { id, items: childrenItems } = item;\n    const selectable = item.selectable !== false; // by default item is selectable, unless selectable=false specified\n    const hasSubtree = childrenItems ? !!childrenItems.length : false;\n    const expanded = hasSubtree && activeItemIds.indexOf(id) !== -1;\n\n    flatTree[id] = {\n      item,\n      index: indexAmongSiblings + 1, // Used for aria-posinset and it's 1-based.\n      level,\n      expanded,\n      parent: parent == null ? undefined : parent,\n      treeSize: itemsInLeaf,\n      hasSubtree,\n      selected: false,\n    };\n\n    if (isParentVisible) {\n      visibleItemIds.push(id);\n    }\n\n    const { selectedChildrenNum, selectableChildrenNum } = flattenSubTree(\n      childrenItems as ObjectShorthandValue<TreeItemProps>[],\n      level + 1,\n      id,\n      flatTree,\n      isParentVisible && expanded, // parent being visible and expanded means subtree is visible\n      activeItemIds,\n      visibleItemIds,\n      selectedItemIds,\n    );\n\n    if (selectable) {\n      selectableNum++;\n      if (\n        (hasSubtree && selectedChildrenNum === selectableChildrenNum) ||\n        (!hasSubtree && selectedItemIds.indexOf(id) >= 0) // selectedItemIds only make sense for leaf nodes\n      ) {\n        flatTree[id].selected = true;\n        selectedNum++;\n      } else if (selectedChildrenNum > 0) {\n        flatTree[id].selected = 'indeterminate';\n        selectedNum += 0.5; // trick to propagate indeterminate state to ancestors\n      }\n    }\n\n    if (flatTree[parent].childrenIds) {\n      flatTree[parent].childrenIds.push(id);\n    } else {\n      flatTree[parent].childrenIds = [id];\n    }\n  });\n\n  return { flatTree, visibleItemIds, selectedChildrenNum: selectedNum, selectableChildrenNum: selectableNum };\n}\n"],"mappings":"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"}
{"version":3,"file":"FormButton.js","names":["compose","commonPropTypes","Button","_FormFieldBase","formButtonClassName","FormButton","className","displayName","overrideStyles","slots","control","propTypes","createCommon","content","children"],"sources":["components/Form/FormButton.tsx"],"sourcesContent":["import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\n\ninterface FormButtonOwnProps extends ButtonProps {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormButtonProps extends SelectedFormFieldCustomProps, FormButtonOwnProps {}\nexport type FormButtonStylesProps = never;\n\nexport const formButtonClassName = 'ui-form__button';\n\n/**\n * An FormButton renders a Button wrapped by FormField.\n */\nexport const FormButton = compose<'button', FormButtonProps, FormButtonStylesProps, SelectedFormFieldCustomProps, {}>(\n  _FormFieldBase,\n  {\n    className: formButtonClassName,\n    displayName: 'FormButton',\n    overrideStyles: true,\n    slots: {\n      control: Button,\n    },\n  },\n);\n\nFormButton.propTypes = commonPropTypes.createCommon({\n  content: false, // Should be `true`, but will be passed via unhandled props to a Button\n  children: false,\n});\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,0BAA0B;AAClD,SAASC,eAAe,QAAQ,aAAa;AAC7C,SAASC,MAAM,QAAqB,kBAAkB;AACtD,SAASC,cAAc,QAA4B,uBAAuB;AAU1E,OAAO,IAAMC,mBAAmB,GAAG,iBAAiB;;AAEpD;AACA;AACA;AACA,OAAO,IAAMC,UAAU;EAAA,IAAVA,UAAU,GAAGL,OAAO,CAC/BG,cAAc,EACd;IACEG,SAAS,EAAEF,mBAAmB;IAC9BG,WAAW,EAAE,YAAY;IACzBC,cAAc,EAAE,IAAI;IACpBC,KAAK,EAAE;MACLC,OAAO,EAAER;IACX;EACF,CAAC,CACF;EAEDG,UAAU,CAACM,SAAS,GAAGV,eAAe,CAACW,YAAY,CAAC;IAClDC,OAAO,EAAE,KAAK;IAAE;IAChBC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAAC,OAfUT,UAAU;AAAA"}
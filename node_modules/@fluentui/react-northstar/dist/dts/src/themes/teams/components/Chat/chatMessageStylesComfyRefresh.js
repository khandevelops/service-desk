"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chatMessageStylesComfyRefresh = void 0;
var lodash_1 = require("lodash");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var ChatMessage_1 = require("../../../../components/Chat/ChatMessage");
var utils_1 = require("../../../../utils");
var accessibilityStyles_1 = require("../../../../utils/accessibility/Styles/accessibilityStyles");
var displayActionMenu = function (overlayZIndex) { return ({
    zIndex: overlayZIndex,
    overflow: 'visible',
    opacity: 1,
    width: 'auto',
}); };
exports.chatMessageStylesComfyRefresh = {
    root: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, theme = _a.theme;
        var borderFocusStyles = getBorderFocusStyles_1.getBorderFocusStyles({
            borderRadius: 'inherit',
            variables: theme.siteVariables,
            // Fixes the bubble focus border rendering on top of the user avatar
            zIndex: 'initial',
        });
        return _b = {
                display: 'flex',
                flexDirection: 'column',
                alignItems: p.mine ? 'flex-end' : 'flex-start',
                outline: 'none'
            },
            _b["&:focus-visible ." + ChatMessage_1.chatMessageSlotClassNames.timestamp] = {
                opacity: 1,
            },
            _b["&:focus-visible ." + ChatMessage_1.chatMessageSlotClassNames.bubble] = borderFocusStyles[':focus-visible'],
            _b;
    },
    header: function (_a) {
        var p = _a.props, theme = _a.theme;
        return ({
            display: 'flex',
            width: '100%',
            justifyContent: p.mine ? 'flex-end' : 'start',
            gap: utils_1.pxToRem(8),
            '& > div': {
                paddingTop: utils_1.pxToRem(8),
            },
            color: theme.siteVariables.colorScheme.default.foreground2,
        });
    },
    author: function (_a) {
        var p = _a.props;
        return (__assign(__assign({}, ((p.mine || p.attached === 'bottom' || p.attached === true) && accessibilityStyles_1.screenReaderContainerStyles)), { fontWeight: 400, marginBottom: utils_1.pxToRem(2), overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis' }));
    },
    timestamp: function (_a) {
        var v = _a.variables;
        return (__assign({ display: 'inline-block', alignSelf: 'self-start', whiteSpace: 'nowrap', opacity: 0 }, (v.hasReducedHorizontalSpace && {
            fontSize: '1rem',
            margin: utils_1.pxToRem(3) + " " + utils_1.pxToRem(2.5) + " 0",
        })));
    },
    body: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign({ display: 'flex', flexDirection: p.mine ? 'row-reverse' : 'row', position: 'relative', maxWidth: '100%' }, (!p.mine &&
            v.hasReducedHorizontalSpace && {
            marginRight: utils_1.pxToRem(16),
        })));
    },
    bubble: function (_a) {
        var _b, _c, _d, _e, _f, _g, _h;
        var p = _a.props, v = _a.variables, theme = _a.theme;
        return __assign(__assign(__assign(__assign(__assign(__assign(__assign({ position: 'relative', border: v.border, borderRadius: utils_1.pxToRem(6), paddingLeft: utils_1.pxToRem(16), paddingRight: utils_1.pxToRem(16), paddingTop: utils_1.pxToRem(8), paddingBottom: p.hasReactions ? utils_1.pxToRem(10) : utils_1.pxToRem(8), backgroundColor: p.mine ? v.backgroundColorMine : v.backgroundColor, backgroundAttachment: 'fixed' }, (p.failed && {
            backgroundImage: 'none',
            backgroundColor: theme.siteVariables.colorScheme.red.background1,
            border: "1px solid " + theme.siteVariables.colorScheme.red.border,
        })), ((v.hasMention || v.isImportant) && (_b = {},
            _b["& ." + ChatMessage_1.chatMessageSlotClassNames.bar] = {
                backgroundColor: v.hasMention ? v.hasMentionColor : v.isImportantColor,
                position: 'absolute',
                borderBottomLeftRadius: 'inherit',
                borderTopLeftRadius: 'inherit',
                height: '100%',
                left: '0',
                top: '0',
                width: utils_1.pxToRem(3),
            },
            _b))), (lodash_1.isNil(v.showActionMenu) &&
            p.hasActionMenu && __assign({ ':hover': (_c = {},
                _c["& > ." + ChatMessage_1.chatMessageSlotClassNames.actionMenu] = displayActionMenu(v.overlayZIndex),
                _c) }, (p.showActionMenu && (_d = {},
            _d["& ." + ChatMessage_1.chatMessageSlotClassNames.actionMenu] = displayActionMenu(v.overlayZIndex),
            _d))))), (_e = {}, _e["&:hover + ." + ChatMessage_1.chatMessageSlotClassNames.bubbleInset + " ." + ChatMessage_1.chatMessageSlotClassNames.timestamp] = {
            opacity: 1,
        }, _e)), (p.attached === true &&
            !v.isImportant && (_f = {},
            _f[p.mine ? 'borderTopRightRadius' : 'borderTopLeftRadius'] = 0,
            _f[p.mine ? 'borderBottomRightRadius' : 'borderBottomLeftRadius'] = 0,
            _f))), (p.attached === 'top' &&
            !v.isImportant && (_g = {},
            _g[p.mine ? 'borderBottomRightRadius' : 'borderBottomLeftRadius'] = 0,
            _g))), (p.attached === 'bottom' &&
            !v.isImportant && (_h = {},
            _h[p.mine ? 'borderTopRightRadius' : 'borderTopLeftRadius'] = 0,
            _h)));
    },
    bubbleInset: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables;
        return (__assign(__assign({ display: 'flex', paddingTop: utils_1.pxToRem(10), paddingBottom: 0, 
            // use padding instead of margin so that the bubble container's :hover
            // styles still apply when mousing over the gap between the container
            // and bubble-inset.
            paddingLeft: v.hasReducedHorizontalSpace ? utils_1.pxToRem(2.5) : utils_1.pxToRem(5), paddingRight: v.hasReducedHorizontalSpace ? utils_1.pxToRem(2.5) : utils_1.pxToRem(5) }, (p.mine ? { right: '100%', flexDirection: 'row-reverse' } : { left: '100%' })), (_b = {}, _b["&:hover ." + ChatMessage_1.chatMessageSlotClassNames.timestamp] = {
            opacity: 1,
        }, _b)));
    },
    badge: function (_a) {
        var p = _a.props, v = _a.variables;
        return (__assign({ position: 'relative', top: utils_1.pxToRem(-5), width: utils_1.pxToRem(25), height: utils_1.pxToRem(25), backgroundColor: 'none', color: v.isImportantColor, zIndex: v.zIndex, '& > :first-child': {
                display: 'inline-flex',
                margin: '0 auto',
            } }, (p.mine ? { marginRight: utils_1.pxToRem(-5) } : { marginLeft: utils_1.pxToRem(-5) })));
    },
    reactionGroup: function (_a) {
        var p = _a.props;
        return (__assign({ position: 'relative', display: 'flex', float: 'left', zIndex: 1 }, (p.mine && {
            float: 'right',
            marginRight: utils_1.pxToRem(-4),
        })));
    },
};

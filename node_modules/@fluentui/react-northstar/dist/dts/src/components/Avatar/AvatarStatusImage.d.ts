import * as React from 'react';
import { Accessibility, ImageBehaviorProps } from '@fluentui/accessibility';
import { FluentComponentStaticProps } from '../../types';
import { UIComponentProps } from '../../utils';
import { AvatarSizeValue } from './Avatar';
export interface AvatarStatusImageProps extends UIComponentProps {
    /** Accessibility behavior if overridden by the user. */
    accessibility?: Accessibility<ImageBehaviorProps>;
    /** Size multiplier */
    size?: AvatarSizeValue;
    /** AvatarImage source URL. */
    src?: string;
}
export declare type AvatarStatusImageStylesProps = Required<Pick<AvatarStatusImageProps, 'size'>>;
export declare const avatarStatusImageClassName = "ui-avatar__statusimage";
/**
 * A AvatarStatusImage provides a status image for the Avatar.
 */
export declare const AvatarStatusImage: (<TExtendedElementType extends React.ElementType<any> = "img">(props: React.RefAttributes<HTMLImageElement> & Omit<import("@fluentui/react-bindings").PropsOfElement<TExtendedElementType>, "as" | keyof AvatarStatusImageProps> & {
    as?: TExtendedElementType;
} & AvatarStatusImageProps) => JSX.Element) & {
    propTypes?: React.WeakValidationMap<AvatarStatusImageProps> & {
        as: React.Requireable<string | ((props: any, context?: any) => any) | (new (props: any, context?: any) => any)>;
    };
    contextTypes?: import("prop-types").ValidationMap<any>;
    defaultProps?: Partial<AvatarStatusImageProps & {
        as: "img";
    }>;
    displayName?: string;
    readonly __PRIVATE_PROPS?: React.RefAttributes<HTMLImageElement> & Omit<Pick<React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "key" | keyof React.ImgHTMLAttributes<HTMLImageElement>> & {
        ref?: React.Ref<HTMLImageElement>;
    }, "as" | keyof AvatarStatusImageProps> & {
        as?: "img";
    } & AvatarStatusImageProps;
} & FluentComponentStaticProps<AvatarStatusImageProps>;

{"version":3,"file":"types.js","names":[],"sources":["utils/positioner/types.ts"],"sourcesContent":["import * as PopperJs from '@popperjs/core';\nimport * as React from 'react';\n\n// Temporary typings for modifiers\n\ntype ModifierProps<Name, Options> = {\n  enabled?: boolean;\n  name: Name;\n  options?: Options;\n};\n\nexport type ArrowModifier = ModifierProps<\n  'arrow',\n  Partial<{\n    element: HTMLElement | string;\n    padding: PopperJs.Padding;\n  }>\n>;\n\nexport type FlipModifier = ModifierProps<\n  'flip',\n  Partial<{\n    fallbackPlacements: PopperJs.Placement[];\n    padding: PopperJs.Padding;\n    boundary: PopperJs.Boundary;\n    rootBoundary: PopperJs.RootBoundary;\n    altBoundary: boolean;\n    flipVariations: boolean;\n  }>\n>;\n\nexport type OffsetFunctionParam = {\n  popper: PopperJs.Rect;\n  reference: PopperJs.Rect;\n  placement: PopperJs.Placement;\n};\n\nexport type OffsetFunction = (param: OffsetFunctionParam) => [number | null | undefined, number | null | undefined];\n\nexport type Offset = OffsetFunction | [number | null | undefined, number | null | undefined];\n\nexport type OffsetModifier = ModifierProps<\n  'offset',\n  Partial<{\n    offset: Offset;\n  }>\n>;\n\nexport type PreventOverflowModifier = ModifierProps<\n  'preventOverflow',\n  Partial<{\n    mainAxis: boolean;\n    altAxis: boolean;\n    boundary: PopperJs.Boundary;\n    rootBoundary: PopperJs.RootBoundary;\n    altBoundary: boolean;\n    /**\n     * Allows the popper to overflow from its boundaries to keep it near its\n     * reference element\n     */\n    tether: boolean;\n    tetherOffset: (arg0: { popper: PopperJs.Rect; reference: PopperJs.Rect; placement: PopperJs.Placement }) => number;\n    padding: PopperJs.Padding;\n  }>\n>;\n\nexport type PopperModifiers = (ArrowModifier | FlipModifier | OffsetModifier | PreventOverflowModifier)[];\nexport type PopperModifiersFn = (\n  target: HTMLElement | PopperJs.VirtualElement,\n  container: HTMLElement,\n  arrow: HTMLElement | null,\n) => PopperModifiers;\n\nexport type Position = 'above' | 'below' | 'before' | 'after';\nexport type Alignment = 'top' | 'bottom' | 'start' | 'end' | 'center';\n\nexport type AutoSize = 'height' | 'height-always' | 'width' | 'width-always' | 'always' | boolean;\n\nexport type PopperChildrenFn = (props: PopperChildrenProps) => React.ReactElement;\n\nexport type Boundary = PopperJs.Boundary | 'scrollParent' | 'window';\n\nexport type PopperRefHandle = { updatePosition: () => void };\n\nexport interface PositioningProps {\n  /**\n   * Alignment for the component.\n   */\n  align?: Alignment;\n\n  /** The element which will define the boundaries of the popper position for the flip behavior. */\n  flipBoundary?: Boundary;\n\n  /** The element which will define the boundaries of the popper position for the overflow behavior. */\n  overflowBoundary?: Boundary;\n\n  /** An imperative handle to Popper methods. */\n  popperRef?: React.Ref<PopperRefHandle>;\n\n  /**\n   * Position for the component. Position has higher priority than align. If position is vertical ('above' | 'below')\n   * and align is also vertical ('top' | 'bottom') or if both position and align are horizontal ('before' | 'after'\n   * and 'start' | 'end' respectively), then provided value for 'align' will be ignored and 'center' will be used instead.\n   */\n  position?: Position;\n\n  /**\n   * Enables the Popper box to position itself in 'fixed' mode (default value is position: 'absolute')\n   * @default false\n   */\n  positionFixed?: boolean;\n\n  /**\n   * Lets you displace a popper element from its reference element.\n   * This can be useful if you need to apply some margin between them or if you need to fine tune the\n   * position according to some custom logic.\n   */\n  offset?: Offset;\n\n  /**\n   * When the reference element or the viewport is outside viewport allows a popper element to be fully in viewport.\n   * \"all\" enables this behavior for all axis.\n   */\n  unstable_disableTether?: boolean | 'all';\n\n  /**\n   * Disables automatic repositioning of the component; it will always be placed according to the values of `align` and\n   * `position` props, regardless of the size of the component, the reference element or the viewport.\n   */\n  unstable_pinned?: boolean;\n\n  /**\n   * Applies max-height and max-width on popper to fit it within the available space in viewport.\n   * true enables this for both width and height when overflow happens. 'always' applies `max-height`/`max-width` regardless of overflow.\n   * 'height' applies `max-height` when overflow happens, and 'width' for `max-width`\n   * `height-always` applies `max-height` regardless of overflow, and 'width-always' for always applying `max-width`\n   */\n  autoSize?: AutoSize;\n}\n\nexport interface PopperProps extends PositioningProps {\n  /**\n   * Ref object containing the pointer node.\n   */\n  pointerTargetRef?: React.RefObject<Element>;\n\n  /**\n   * The content of the Popper box (the element that is going to be repositioned).\n   */\n  children: PopperChildrenFn | React.ReactElement;\n\n  /**\n   * If false, delays Popper's creation.\n   * @default true\n   */\n  enabled?: boolean;\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the Popper box.\n   * They provide most of the functionality of Popper.js.\n   */\n  modifiers?: PopperModifiers | PopperModifiersFn;\n\n  /**\n   * Array of conditions to be met in order to trigger a subsequent render to reposition the elements.\n   */\n  positioningDependencies?: React.DependencyList;\n\n  /**\n   * Ref object containing the target node (the element that we're using as reference for Popper box).\n   */\n  targetRef: React.RefObject<Element> | PopperJs.VirtualElement;\n\n  /** Rtl attribute for the component. */\n  rtl?: boolean;\n}\n\nexport interface PopperChildrenProps {\n  /**\n   * Popper's placement.\n   */\n  placement: PopperJs.Placement;\n\n  /**\n   * Function that updates the position of the Popper box, computing the new offsets and applying the new style.\n   */\n  scheduleUpdate(): void;\n}\n\nexport type PopperShorthandProps = PositioningProps;\n\nexport type PopperOptions = Omit<PopperProps, 'children' | 'targetRef'> & {\n  onStateUpdate?: (state: Partial<PopperJs.State>) => void;\n};\n\nexport type PopperInstance = PopperJs.Instance & { isFirstRun?: boolean };\n"],"mappings":""}
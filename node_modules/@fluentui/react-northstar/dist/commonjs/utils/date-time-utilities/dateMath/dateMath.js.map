{"version":3,"file":"dateMath.js","names":["addDays","date","days","result","Date","getTime","setDate","getDate","addWeeks","weeks","TimeConstants","DaysInOneWeek","addMonths","months","newMonth","getMonth","setMonth","MonthInOneYear","addYears","years","setFullYear","getFullYear","getMonthStart","getMonthEnd","getYearStart","getYearEnd","month","compareDates","date1","date2","compareDatePart","getDatePartHashValue","getDateRangeArray","dateRangeType","firstDayOfWeek","workWeekDays","daysToSelectInDayView","datesArray","startDate","endDate","DayOfWeek","Monday","Tuesday","Wednesday","Thursday","Friday","Math","max","DateRangeType","Day","getDatePart","Week","WorkWeek","getStartDateOfWeek","Month","Error","nextDate","push","indexOf","getDay","isInDateRangeArray","dateRange","dateInRange","getWeekNumbersInMonth","weeksInMonth","firstWeekOfYear","navigatedDate","selectedYear","selectedMonth","dayOfMonth","fistDayOfMonth","endOfFirstWeek","adjustWeekDay","endOfWeekRange","weeksArray","i","getWeekNumber","fourDayWeek","FirstWeekOfYear","FirstFullWeek","getWeekOfYearFullDays","FirstFourDayWeek","getFirstDayWeekOfYear","daysOffset","getEndDateOfWeek","lastDayOfWeek","numberOfFullDays","dayOfYear","getDayOfYear","num","lastDayOfPrevYear","MonthOfYear","December","daysInYear","num2","num3","floor","dateWeekDay","Sunday","year","daysUntilDate","daysInMonth"],"sources":["utils/date-time-utilities/dateMath/dateMath.ts"],"sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/dateValues';\nimport { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */\nexport function addDays(date: Date, days: number): Date {\n  const result = new Date(date.getTime());\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */\nexport function addWeeks(date: Date, weeks: number): Date {\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */\nexport function addMonths(date: Date, months: number): Date {\n  let result = new Date(date.getTime());\n  const newMonth = result.getMonth() + months;\n  result.setMonth(newMonth);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */\nexport function addYears(date: Date, years: number): Date {\n  let result = new Date(date.getTime());\n  result.setFullYear(date.getFullYear() + years);\n\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n  // Loop until we back up to a day the new month has.\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n  if (\n    result.getMonth() !==\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\n  ) {\n    result = addDays(result, -result.getDate());\n  }\n  return result;\n}\n\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */\nexport function getMonthStart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */\nexport function getMonthEnd(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */\nexport function getYearStart(date: Date): Date {\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */\nexport function getYearEnd(date: Date): Date {\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */\nexport function setMonth(date: Date, month: number): Date {\n  return addMonths(date, month - date.getMonth());\n}\n\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */\nexport function compareDates(date1: Date, date2: Date): boolean {\n  if (!date1 && !date2) {\n    return true;\n  }\n  if (!date1 || !date2) {\n    return false;\n  }\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */\nexport function compareDatePart(date1: Date, date2: Date): Number {\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */\nexport function getDateRangeArray(\n  date: Date,\n  dateRangeType: DateRangeType,\n  firstDayOfWeek: DayOfWeek,\n  workWeekDays?: DayOfWeek[],\n  daysToSelectInDayView: number = 1,\n): Date[] {\n  const datesArray: Date[] = [];\n  let startDate: Date;\n  let endDate = null;\n\n  if (!workWeekDays) {\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\n  }\n\n  daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n\n  switch (dateRangeType) {\n    case DateRangeType.Day:\n      startDate = getDatePart(date);\n      endDate = addDays(startDate, daysToSelectInDayView);\n      break;\n\n    case DateRangeType.Week:\n    case DateRangeType.WorkWeek:\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n      break;\n\n    case DateRangeType.Month:\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n      endDate = addMonths(startDate, 1);\n      break;\n\n    default:\n      throw new Error(`Unexpected object: ${dateRangeType}`);\n  }\n\n  // Populate the dates array with the dates in range\n  let nextDate = startDate;\n\n  do {\n    if (dateRangeType !== DateRangeType.WorkWeek) {\n      // push all days not in work week view\n      datesArray.push(nextDate);\n    } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n      datesArray.push(nextDate);\n    }\n    nextDate = addDays(nextDate, 1);\n  } while (!compareDates(nextDate, endDate));\n\n  return datesArray;\n}\n\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\n  for (const dateInRange of dateRange) {\n    if (compareDates(date, dateInRange)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */\nexport function getWeekNumbersInMonth(\n  weeksInMonth: number,\n  firstDayOfWeek: DayOfWeek,\n  firstWeekOfYear: FirstWeekOfYear,\n  navigatedDate: Date,\n): number[] {\n  const selectedYear = navigatedDate.getFullYear();\n  const selectedMonth = navigatedDate.getMonth();\n  let dayOfMonth = 1;\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n  const endOfFirstWeek =\n    dayOfMonth +\n    (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) -\n    adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n  dayOfMonth = endOfWeekRange.getDate();\n\n  const weeksArray = [];\n  for (let i = 0; i < weeksInMonth; i++) {\n    // Get week number for end of week\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n    dayOfMonth += TimeConstants.DaysInOneWeek;\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n  }\n  return weeksArray;\n}\n\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\n  // First four-day week of the year - minumum days count\n  const fourDayWeek = 4;\n\n  switch (firstWeekOfYear) {\n    case FirstWeekOfYear.FirstFullWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n\n    case FirstWeekOfYear.FirstFourDayWeek:\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n\n    default:\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\n  }\n}\n\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  let daysOffset = firstDayOfWeek - date.getDay();\n  if (daysOffset > 0) {\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n    daysOffset -= TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */\nexport function getEndDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\n  const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n  let daysOffset = lastDayOfWeek - date.getDay();\n  if (daysOffset < 0) {\n    // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n    daysOffset += TimeConstants.DaysInOneWeek;\n  }\n  return addDays(date, daysOffset);\n}\n\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */\nfunction getDatePart(date: Date): Date {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n\n/**\n * Helper function to assist in date comparisons\n */\nexport function getDatePartHashValue(date: Date): number {\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\n  const dayOfYear = getDayOfYear(date) - 1;\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\n\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\n    num2 -= TimeConstants.DaysInOneWeek;\n  }\n\n  let num3 = dayOfYear - num2;\n  if (num3 < 0) {\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n      num2 -= TimeConstants.DaysInOneWeek;\n    }\n\n    num3 = daysInYear - num2;\n  }\n\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns week number for a date\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\n  const num = getDayOfYear(date) - 1;\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n\n/**\n * Helper function for getWeekNumber.\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek\n    ? dateWeekDay + TimeConstants.DaysInOneWeek\n    : dateWeekDay;\n}\n\n/**\n * Returns the day number for a date in a year\n * The number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */\nfunction getDayOfYear(date: Date): number {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  let daysUntilDate = 0;\n\n  for (let i = 0; i < month; i++) {\n    daysUntilDate += daysInMonth(i + 1, year);\n  }\n\n  daysUntilDate += date.getDate();\n\n  return daysUntilDate;\n}\n\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */\nfunction daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate();\n}\n"],"mappings":"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"}
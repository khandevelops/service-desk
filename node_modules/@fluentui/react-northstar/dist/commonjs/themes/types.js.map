{"version":3,"file":"types.js","names":[],"sources":["themes/types.ts"],"sourcesContent":["import { Extendable } from '@fluentui/styles';\n\n// Themes go through 3 phases.\n// 1. Input - (from the user), variable and style objects/functions, some values optional\n// 2. Prepared - (on context), variable and style functions only, all values required\n// 3. Resolved - (for rendering), plain object variables and styles, all values required\n//\n// We use these terms in typings to indicate which phase the typings apply to.\n\n// ========================================================\n// Colors\n// ========================================================\n\n/**\n * A type for a palette for a single color.\n */\nexport type ColorVariants = Extendable<\n  Partial<{\n    50: string;\n    100: string;\n    150: string;\n    200: string;\n    250: string;\n    300: string;\n    350: string;\n    400: string;\n    450: string;\n    500: string;\n    550: string;\n    600: string;\n    650: string;\n    700: string;\n    750: string;\n    800: string;\n    850: string;\n    900: string;\n  }>,\n  string\n>;\n/**\n * A type for a predefined natural colors.\n */\ntype NaturalColorsStrict = Partial<{\n  blue: ColorVariants;\n  green: ColorVariants;\n  grey: ColorVariants;\n  orange: ColorVariants;\n  pink: ColorVariants;\n  purple: ColorVariants;\n  teal: ColorVariants;\n  red: ColorVariants;\n  yellow: ColorVariants;\n}>;\n\nexport type NaturalColors = Extendable<NaturalColorsStrict, ColorVariants>;\n\n/**\n * A type for a predefined state colors.\n */\nexport type ContextualColorsStrict = Partial<{\n  text: ColorVariants;\n\n  brand: ColorVariants;\n  danger: ColorVariants;\n  info: ColorVariants;\n  success: ColorVariants;\n  warning: ColorVariants;\n}>;\n\nexport type ContextualColors = Extendable<ContextualColorsStrict, ColorVariants>;\n\n/**\n * A type for a predefined emphasis colors.\n */\ntype EmphasisColorsStrict = Partial<{\n  primary: ColorVariants;\n  secondary: ColorVariants;\n}>;\n\nexport type EmphasisColors = Extendable<EmphasisColorsStrict, ColorVariants>;\n\n/**\n * A type for extracting the color names.\n */\nexport type ColorNames = keyof (EmphasisColorsStrict & NaturalColorsStrict);\n\n/**\n * A type for an extendable set of ColorNames properties of type T\n */\nexport type ColorValues<T, Colors extends string | number | symbol = ColorNames> = Extendable<\n  Partial<Record<Colors, T>>,\n  T\n>;\n\n/**\n * A type for a base colors.\n */\nexport type PrimitiveColors = Partial<{\n  black: string;\n  white: string;\n}>;\n\ntype ExtendablePalette<T> = T & { [K in keyof T]?: K extends keyof PrimitiveColors ? string : ColorVariants };\n\nexport type ColorPalette<T = {}> = ExtendablePalette<\n  EmphasisColorsStrict & ContextualColorsStrict & NaturalColorsStrict & PrimitiveColors & T\n>;\n\n/**\n * A type for all area names that can define color\n */\nexport type ComponentAreaName =\n  | 'foreground'\n  | 'background'\n  | 'border'\n  | 'shadow'\n  | 'foregroundHover'\n  | 'backgroundHover'\n  | 'borderHover'\n  | 'shadowHover'\n  | 'foregroundActive'\n  | 'backgroundActive'\n  | 'borderActive'\n  | 'shadowActive'\n  | 'foregroundFocus'\n  | 'backgroundFocus'\n  | 'borderFocus'\n  | 'shadowFocus'\n  | 'foregroundPressed'\n  | 'backgroundPressed'\n  | 'borderPressed'\n  | 'shadowPressed'\n  | 'foregroundDisabled'\n  | 'backgroundDisabled'\n  | 'borderDisabled'\n  | 'shadowDisabled';\n\n/**\n * A type for the generic color scheme of a component based on CSS property names\n */\nexport type ColorScheme<T extends string | number | symbol = ComponentAreaName> = Extendable<Record<T, string>, string>;\n\nexport type ColorSchemeMapping<\n  Scheme = ColorScheme,\n  Colors extends string | number | symbol = ColorNames\n> = ColorValues<Extendable<Scheme, string>, Colors> & {\n  default?: Extendable<Scheme, string>;\n};\n\nexport type StrictColorScheme<T extends string | number | symbol = ComponentAreaName> = Record<T, string>;\n\nexport type StrictColorSchemeMapping<\n  Scheme = StrictColorScheme,\n  Colors extends string | number | symbol = ColorNames\n> = ColorValues<Scheme, Colors> & {\n  default?: Scheme;\n};\n\nexport type ColorSchemeMappingOverrides<\n  Scheme = ColorScheme,\n  Colors extends string | number | symbol = ColorNames\n> = ColorValues<Partial<Extendable<Scheme, string>>, Colors> & {\n  default?: Partial<Extendable<ColorScheme, string>>;\n};\n\nexport type ItemType<T> = T extends (infer TItem)[] ? TItem : never;\n"],"mappings":""}
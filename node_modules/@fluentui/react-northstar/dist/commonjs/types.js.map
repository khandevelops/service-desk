{"version":3,"file":"types.js","names":[],"sources":["types.ts"],"sourcesContent":["import { ShorthandConfig } from '@fluentui/react-bindings';\nimport * as React from 'react';\n\nimport { ShorthandFactory } from './utils/factories';\n\n// ========================================================\n// Utilities\n// ========================================================\n\nexport type ResultOf<T> = T extends (...arg: any[]) => infer TResult ? TResult : never;\n\nexport type ObjectOf<T> = { [key: string]: T };\n\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n// ========================================================\n// Components\n// ========================================================\n\nexport type FluentComponentStaticProps<P = {}> = {\n  handledProps: (keyof P)[];\n  create?: ShorthandFactory<P>;\n  shorthandConfig?: ShorthandConfig<P>;\n};\n\n// ========================================================\n// Props\n// ========================================================\n\nexport type Props<T = {}> = T & ObjectOf<any>;\nexport type ReactChildren = React.ReactNode[] | React.ReactNode;\n\nexport type ComponentEventHandler<TProps> = (event: React.SyntheticEvent<HTMLElement>, data?: TProps) => void;\n\nexport type ComponentKeyboardEventHandler<TProps> = (event: React.KeyboardEvent<any>, data?: TProps) => void;\n\nexport type InstanceOf<T> = T extends { new (...args: any[]): infer TInstance } ? TInstance : never;\n\nexport type PropsOf<T> = T extends React.Component<infer TProps>\n  ? TProps\n  : T extends React.FunctionComponent<infer TProps>\n  ? TProps\n  : T extends keyof JSX.IntrinsicElements\n  ? JSX.IntrinsicElements[T]\n  : never;\n\n// ========================================================\n// Shorthand Factories\n// ========================================================\n\nexport type ShorthandRenderFunction<P> = (Component: React.ElementType<P>, props: P) => React.ReactNode;\n\n// The ReactFragment here is replaced from the original typings with React.ReactNode[] because of incorrect inheriting of the type when it is defined as {}\ntype ReactNode = React.ReactChild | React.ReactNode[] | React.ReactPortal | boolean | null | undefined;\n\nexport type ShorthandValue<P extends Props> = ReactNode | ObjectShorthandValue<P>;\n\ntype KindSelector<T> = {\n  [P in keyof T]: { kind?: P } & T[P];\n}[keyof T];\n\nexport type ShorthandCollection<Props, Kinds = Record<string, {}>> = ShorthandValue<\n  Props | (KindSelector<Kinds> & Props)\n>[];\n\nexport type ObjectShorthandValue<P extends Props> = Props<P> & {\n  children?: P['children'] | ShorthandRenderFunction<P>;\n};\n\nexport type ObjectShorthandCollection<P, K = never> = ObjectShorthandValue<P & { kind?: K }>[];\n"],"mappings":""}
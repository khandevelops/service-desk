{"version":3,"file":"navigateToNewDate.js","names":["contstraintNavigatedDate","initialDate","targetDate","direction","restrictedDatesOptions","navigateToDisabledDates","undefined","findAvailableDateOptions","newNavigatedDate","findAvailableDate","isAfterMaxDate","maxDate","isBeforeMinDate","minDate","navigateToNewDate","originalDate","kind","step","targetDayDirection","addMonths","addWeeks","addDays"],"sources":["components/Datepicker/navigateToNewDate.tsx"],"sourcesContent":["import {\n  addMonths,\n  IAvailableDateOptions,\n  IRestrictedDatesOptions,\n  findAvailableDate,\n  addDays,\n  addWeeks,\n  isAfterMaxDate,\n  isBeforeMinDate,\n} from '../../utils/date-time-utilities';\n\nexport type NavigationKind = 'Month' | 'Week' | 'Day';\n\nexport const contstraintNavigatedDate = (\n  initialDate: Date,\n  targetDate: Date,\n  direction: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n) => {\n  if (!targetDate) {\n    // if we couldn't find a target date at all, do nothing\n    return undefined;\n  }\n\n  const findAvailableDateOptions: IAvailableDateOptions = {\n    initialDate,\n    targetDate,\n    direction,\n    ...(!navigateToDisabledDates && restrictedDatesOptions),\n  };\n\n  let newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n\n  if (!newNavigatedDate) {\n    // if no dates available in initial direction, try going backwards\n    findAvailableDateOptions.direction = -direction;\n    newNavigatedDate = findAvailableDate(findAvailableDateOptions);\n  }\n\n  if (!navigateToDisabledDates && isAfterMaxDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.maxDate;\n  } else if (!navigateToDisabledDates && isBeforeMinDate(targetDate, restrictedDatesOptions)) {\n    newNavigatedDate = restrictedDatesOptions.minDate;\n  }\n\n  return newNavigatedDate;\n};\n\nexport const navigateToNewDate = (\n  originalDate: Date,\n  kind: NavigationKind,\n  step: number,\n  restrictedDatesOptions: IRestrictedDatesOptions,\n  navigateToDisabledDates: boolean,\n): Date => {\n  let targetDate: Date | null = null;\n  const targetDayDirection = step > 0 ? 1 : -1;\n\n  switch (kind) {\n    case 'Month': {\n      targetDate = addMonths(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Week': {\n      targetDate = addWeeks(originalDate, targetDayDirection);\n      break;\n    }\n    case 'Day': {\n      targetDate = addDays(originalDate, targetDayDirection);\n      break;\n    }\n    default:\n      break;\n  }\n\n  return contstraintNavigatedDate(originalDate, targetDate, step, restrictedDatesOptions, navigateToDisabledDates);\n};\n"],"mappings":";;;;AAAA;AAaO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAAwB,CACnCC,WAAiB,EACjBC,UAAgB,EAChBC,SAAiB,EACjBC,sBAA+C,EAC/CC,uBAAgC,EAC7B;EACH,IAAI,CAACH,UAAU,EAAE;IACf;IACA,OAAOI,SAAS;EAClB;EAEA,IAAMC,wBAA+C;IACnDN,WAAW,EAAXA,WAAW;IACXC,UAAU,EAAVA,UAAU;IACVC,SAAS,EAATA;EAAS,GACL,CAACE,uBAAuB,IAAID,sBAAsB,CACvD;EAED,IAAII,gBAAgB,GAAG,IAAAC,oCAAiB,EAACF,wBAAwB,CAAC;EAElE,IAAI,CAACC,gBAAgB,EAAE;IACrB;IACAD,wBAAwB,CAACJ,SAAS,GAAG,CAACA,SAAS;IAC/CK,gBAAgB,GAAG,IAAAC,oCAAiB,EAACF,wBAAwB,CAAC;EAChE;EAEA,IAAI,CAACF,uBAAuB,IAAI,IAAAK,iCAAc,EAACR,UAAU,EAAEE,sBAAsB,CAAC,EAAE;IAClFI,gBAAgB,GAAGJ,sBAAsB,CAACO,OAAO;EACnD,CAAC,MAAM,IAAI,CAACN,uBAAuB,IAAI,IAAAO,kCAAe,EAACV,UAAU,EAAEE,sBAAsB,CAAC,EAAE;IAC1FI,gBAAgB,GAAGJ,sBAAsB,CAACS,OAAO;EACnD;EAEA,OAAOL,gBAAgB;AACzB,CAAC;AAAC;AAEK,IAAMM,iBAAiB,GAAG,SAApBA,iBAAiB,CAC5BC,YAAkB,EAClBC,IAAoB,EACpBC,IAAY,EACZb,sBAA+C,EAC/CC,uBAAgC,EACvB;EACT,IAAIH,UAAuB,GAAG,IAAI;EAClC,IAAMgB,kBAAkB,GAAGD,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAE5C,QAAQD,IAAI;IACV,KAAK,OAAO;MAAE;QACZd,UAAU,GAAG,IAAAiB,4BAAS,EAACJ,YAAY,EAAEG,kBAAkB,CAAC;QACxD;MACF;IACA,KAAK,MAAM;MAAE;QACXhB,UAAU,GAAG,IAAAkB,2BAAQ,EAACL,YAAY,EAAEG,kBAAkB,CAAC;QACvD;MACF;IACA,KAAK,KAAK;MAAE;QACVhB,UAAU,GAAG,IAAAmB,0BAAO,EAACN,YAAY,EAAEG,kBAAkB,CAAC;QACtD;MACF;IACA;MACE;EAAM;EAGV,OAAOlB,wBAAwB,CAACe,YAAY,EAAEb,UAAU,EAAEe,IAAI,EAAEb,sBAAsB,EAAEC,uBAAuB,CAAC;AAClH,CAAC;AAAC"}
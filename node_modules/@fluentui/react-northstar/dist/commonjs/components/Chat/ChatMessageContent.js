"use strict";

exports.__esModule = true;
exports.chatMessageContentClassName = exports.ChatMessageContent = void 0;
var _reactBindings = require("@fluentui/react-bindings");
var PropTypes = _interopRequireWildcard(require("prop-types"));
var _utils = require("../../utils");
var _Box = require("../Box/Box");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var chatMessageContentClassName = 'ui-chat__messagecontent';

/**
 * A ChatMessageContent provides a slot for content in the ChatMessage.
 */
exports.chatMessageContentClassName = chatMessageContentClassName;
var ChatMessageContent = (0, _reactBindings.compose)(_Box.Box, {
  className: chatMessageContentClassName,
  displayName: 'ChatMessageContent',
  handledProps: ['badgePosition', 'density', 'failed', 'hasBadge', 'mine', 'unstable_layout'],
  mapPropsToStylesProps: function mapPropsToStylesProps(_ref) {
    var badgePosition = _ref.badgePosition,
      density = _ref.density,
      failed = _ref.failed,
      hasBadge = _ref.hasBadge,
      mine = _ref.mine,
      unstable_layout = _ref.unstable_layout;
    return {
      badgePosition: badgePosition,
      density: density,
      failed: failed,
      hasBadge: hasBadge,
      layout: unstable_layout,
      mine: mine
    };
  },
  overrideStyles: true,
  shorthandConfig: {
    mappedProp: 'content'
  }
});
exports.ChatMessageContent = ChatMessageContent;
ChatMessageContent.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon(), {
  badgePosition: PropTypes.oneOf(['start', 'end']),
  density: PropTypes.oneOf(['comfy', 'compact']),
  failed: PropTypes.bool,
  hasBadge: PropTypes.bool,
  mine: PropTypes.bool,
  unstable_layout: PropTypes.oneOf(['default', 'refresh'])
});
//# sourceMappingURL=ChatMessageContent.js.map

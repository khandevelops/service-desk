{"version":3,"file":"FormButton.js","names":["formButtonClassName","FormButton","compose","_FormFieldBase","className","displayName","overrideStyles","slots","control","Button","propTypes","commonPropTypes","createCommon","content","children"],"sources":["components/Form/FormButton.tsx"],"sourcesContent":["import { compose } from '@fluentui/react-bindings';\nimport { commonPropTypes } from '../../utils';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { _FormFieldBase, FormFieldBaseProps } from './utils/formFieldBase';\n\ninterface FormButtonOwnProps extends ButtonProps {}\ntype SelectedFormFieldCustomProps = Omit<\n  FormFieldBaseProps,\n  'control' | 'styles' | 'accessibility' | 'design' | 'variables'\n>;\nexport interface FormButtonProps extends SelectedFormFieldCustomProps, FormButtonOwnProps {}\nexport type FormButtonStylesProps = never;\n\nexport const formButtonClassName = 'ui-form__button';\n\n/**\n * An FormButton renders a Button wrapped by FormField.\n */\nexport const FormButton = compose<'button', FormButtonProps, FormButtonStylesProps, SelectedFormFieldCustomProps, {}>(\n  _FormFieldBase,\n  {\n    className: formButtonClassName,\n    displayName: 'FormButton',\n    overrideStyles: true,\n    slots: {\n      control: Button,\n    },\n  },\n);\n\nFormButton.propTypes = commonPropTypes.createCommon({\n  content: false, // Should be `true`, but will be passed via unhandled props to a Button\n  children: false,\n});\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AAUO,IAAMA,mBAAmB,GAAG,iBAAiB;;AAEpD;AACA;AACA;AAFA;AAGO,IAAMC,UAAU,GAAG,IAAAC,sBAAO,EAC/BC,6BAAc,EACd;EACEC,SAAS,EAAEJ,mBAAmB;EAC9BK,WAAW,EAAE,YAAY;EACzBC,cAAc,EAAE,IAAI;EACpBC,KAAK,EAAE;IACLC,OAAO,EAAEC;EACX;AACF,CAAC,CACF;AAAC;AAEFR,UAAU,CAACS,SAAS,GAAGC,sBAAe,CAACC,YAAY,CAAC;EAClDC,OAAO,EAAE,KAAK;EAAE;EAChBC,QAAQ,EAAE;AACZ,CAAC,CAAC"}
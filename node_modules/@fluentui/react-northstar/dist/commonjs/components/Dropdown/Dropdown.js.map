{"version":3,"file":"Dropdown.js","names":["dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsCount","itemsList","searchInput","selectedItem","selectedItems","triggerButton","a11yStatusCleanupTime","charKeyPressedCleanupTime","normalizeValue","multiple","rawValue","normalizedValue","Array","isArray","slice","getFilteredValues","options","items","itemToString","itemToValue","search","searchQuery","value","filteredItemsByValue","filteredItemStrings","filteredItem","toLowerCase","filteredItems","filter","indexOf","isEmpty","prop","props","Dropdown","React","forwardRef","ref","context","useFluentContext","useTelemetry","displayName","telemetry","setStart","setEnd","ariaLabelledby","ariaDescribedby","ariaInvalid","allowFreeform","clearable","checkable","checkableIndicator","className","design","disabled","error","fluid","getA11ySelectionMessage","a11ySelectedItemsMessage","getA11yStatusMessage","inline","inverted","highlightFirstItemOnOpen","headerMessage","moveFocusOnTab","noResultsMessage","loading","loadingMessage","placeholder","renderItem","renderSelectedItem","styles","variables","align","flipBoundary","overflowBoundary","position","positionFixed","offset","unstable_disableTether","unstable_pinned","autoSize","partitionPopperPropsFromShorthand","list","positioningProps","buttonRef","useRef","inputRef","listRef","selectedItemsRef","containerRef","defaultTriggerButtonId","useMemo","selectedItemsCountNarrationId","ElementType","getElementType","unhandledProps","useUnhandledProps","handledProps","useAutoControlled","defaultValue","defaultActiveSelectedIndex","initialValue","undefined","activeSelectedIndex","setActiveSelectedIndex","defaultHighlightedIndex","highlightedIndex","setHighlightedIndex","defaultOpen","open","setOpen","defaultSearchQuery","setSearchQuery","setValue","useState","a11ySelectionStatus","setA11ySelectionStatus","focused","setFocused","isFromKeyboard","setIsFromKeyboard","itemIsFromKeyboard","setItemIsFromKeyboard","startingString","setStartingString","inListbox","useStyles","mapPropsToStyles","isEmptyClearIndicator","hasToggleIndicator","hasItemsSelected","length","mapPropsToInlineStyles","rtl","classes","resolvedStyles","popperRef","useMergedRefs","useIsomorphicLayoutEffect","current","updatePosition","clearA11ySelectionMessage","clearStartingString","handleChange","e","handleOnBlur","target","renderTriggerButton","getToggleButtonProps","content","getSelectedItemAsString","triggerButtonId","triggerButtonContentId","triggerButtonProps","onFocus","handleTriggerButtonOrListFocus","onBlur","handleTriggerButtonBlur","onKeyDown","handleTriggerButtonKeyDown","Boolean","join","onClick","restTriggerButtonProps","createShorthand","Button","defaultProps","id","overrideProps","predefinedProps","resolvedContent","children","renderSearchInput","accessibilityComboboxProps","getInputProps","selectItemAtIndex","toggleMenu","noPlaceholder","DropdownSearchInput","create","handleSearchInputOverrides","renderSelectedItemsCountNarration","narration","screenReaderContainerStyles","renderItemsList","getMenuProps","getItemProps","renderItems","refKey","suppressRefError","innerRef","accessibilityMenuProps","accessibilityInputProps","handleListKeyDown","listElement","handleRef","List","tabIndex","listProps","handleListBlur","footerItem","renderItemsListFooter","headerItem","renderItemsListHeader","index","selected","DropdownItem","active","hasOwnProperty","key","header","handleItemOverrides","render","push","selectedItemsCountNarration","renderSelectedItems","map","DropdownSelectedItem","isSelectedItemActive","handleSelectedItemOverrides","downshiftStateReducer","state","changes","activeElement","type","Downshift","stateChangeTypes","blurButton","isOpen","handleInputValueChange","inputValue","stateAndHelpers","itemSelected","setStateAndInvokeHandler","handleStateChange","newState","changeInput","shouldValueChange","itemIndex","findIndex","i","toLocaleLowerCase","startsWith","shouldMenuClose","keyDownEnter","clickItem","shouldAddHighlightedIndex","isSameItemSelected","newValue","onAdd","setA11ySelectionMessage","defaultView","setTimeout","scrollTop","scrollHeight","tryFocusTriggerButton","keyDownEscape","keyDownArrowDown","keyDownArrowUp","highlightedIndexOnArrowKeyOpen","getHighlightedIndexOnArrowKeyOpen","focus","mouseUp","clickButton","keyDownSpaceButton","itemMouseEnter","unknown","handlers","accessibilityItemProps","stopPropagation","nativeEvent","stopImmediatePropagation","onRemove","dropdownSelectedItemProps","handleSelectedItemRemove","handleSelectedItemKeyDown","handleInputBlur","searchInputProps","detectIsFromKeyboard","handleInputKeyDown","getCode","keyboardKey","Home","End","Tab","handleTabSelection","ArrowLeft","process","env","NODE_ENV","setWhatInputSource","view","document","trySetLastSelectedItemAsActive","ArrowRight","Backspace","tryRemoveItemFromValue","Escape","ArrowUp","ArrowDown","Enter","onChange","node","onInputBlur","onInputKeyDown","preventDefault","selectionStart","selectionEnd","removeItemFromValue","handleClear","tryFocusSearchInput","handleContainerClick","accessibilityInputPropsKeyDown","keyCode","keyString","String","fromCharCode","test","setHighlightedIndexOnCharKeyDown","previousKey","nextKey","Delete","relatedTarget","newStartingString","newHighlightedIndex","poppedItem","currentElement","pop","handlerNames","event","proposedValue","forEach","handlerName","isArrowUp","isArrowDown","itemsLength","useEffect","cancel","element","root","menu","nodeToScroll","actions","computeScrollIntoView","boundary","scrollMode","block","el","top","left","scrollLeft","getRootProps","accessibilityRootPropsRest","showClearIndicator","cx","Box","accessibility","indicatorBehavior","role","propTypes","commonPropTypes","createCommon","PropTypes","number","bool","customPropTypes","shorthandAllowingChildren","string","oneOfType","itemShorthand","collectionShorthand","object","func","onOpenChange","onSearchQueryChange","onActiveSelectedIndexChange","onHighlightedIndexChange","oneOf","ALIGNMENTS","arrayOf","POSITIONS","AUTOSIZES","Object","keys","isValidElement","Item","SearchInput","SelectedItem"],"sources":["components/Dropdown/Dropdown.tsx"],"sourcesContent":["import {\n  getElementType,\n  useAutoControlled,\n  useStyles,\n  useUnhandledProps,\n  useFluentContext,\n  useTelemetry,\n  ForwardRefWithAs,\n  useMergedRefs,\n  useIsomorphicLayoutEffect,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior, AccessibilityAttributes, getCode, keyboardKey } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport computeScrollIntoView from 'compute-scroll-into-view';\n\nimport { ShorthandRenderFunction, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n  ControllerStateAndHelpers,\n} from 'downshift';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard as detectIsFromKeyboard,\n  createShorthand,\n  setWhatInputSource,\n} from '../../utils';\nimport { List, ListProps } from '../List/List';\nimport { DropdownItem, DropdownItemProps } from './DropdownItem';\nimport { DropdownSelectedItem, DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport { DropdownSearchInput, DropdownSearchInputProps } from './DropdownSearchInput';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Portal } from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  partitionPopperPropsFromShorthand,\n  AutoSize,\n  AUTOSIZES,\n} from '../../utils/positioner';\nimport { CloseIcon, ChevronDownIcon } from '@fluentui/react-icons-northstar';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsCount: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** Whether the ComboBox allows freeform user input, rather than restricting to the provided options. */\n  allowFreeform?: boolean;\n\n  /** Identifies the element (or elements) that labels the current element. Will be passed to `triggerButton`. */\n  'aria-labelledby'?: AccessibilityAttributes['aria-labelledby'];\n  'aria-describedby'?: AccessibilityAttributes['aria-describedby'];\n\n  /** Indicates the entered value does not conform to the format expected by the application. Will be passed to `triggerButton`. */\n  'aria-invalid'?: AccessibilityAttributes['aria-invalid'];\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message about the selected items count a screen reader narrates on input field focus.\n     * @param count - number of items selected.\n     */\n    itemsCount?: (count: number) => string;\n  };\n\n  /** A label for selected items listbox. */\n  a11ySelectedItemsMessage?: string;\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the focus moves out from dropdown.\n   * @param event - React's original SyntheticEvent.\n   */\n  onBlur?: (event: React.FocusEvent | null) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** Dropdown can have errors status  */\n  error?: boolean;\n}\n\nexport type DropdownStylesProps = Required<\n  Pick<DropdownProps, 'disabled' | 'error' | 'fluid' | 'inline' | 'inverted' | 'multiple' | 'position' | 'open'>\n> & {\n  focused: boolean;\n  isEmptyClearIndicator: boolean;\n  hasToggleIndicator: boolean;\n  isFromKeyboard: boolean;\n  search: boolean;\n  hasItemsSelected: boolean;\n};\n\ntype DropdownStateForInvoke = {\n  activeSelectedIndex?: number | null;\n  highlightedIndex?: number | null;\n  itemIsFromKeyboard?: boolean;\n  open?: boolean;\n  searchQuery?: string;\n  value?: ShorthandCollection<DropdownItemProps>;\n};\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsCount: `${dropdownClassName}__items-count`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nconst a11yStatusCleanupTime = 500;\nconst charKeyPressedCleanupTime = 500;\n\n/** `normalizedValue` should be normalized always as it can be received from props */\nfunction normalizeValue(multiple: boolean, rawValue: DropdownProps['value']): ShorthandCollection<DropdownItemProps> {\n  const normalizedValue = Array.isArray(rawValue) ? rawValue : [rawValue];\n\n  if (multiple) {\n    return normalizedValue;\n  }\n\n  if (normalizedValue[0] === '') {\n    return [];\n  }\n\n  return normalizedValue.slice(0, 1);\n}\n\n/**\n * Used to compute the filtered items (by value and search query) and, if needed,\n * their string equivalents, in order to be used throughout the component.\n */\nfunction getFilteredValues(\n  options: Required<\n    Pick<DropdownProps, 'multiple' | 'items' | 'itemToValue' | 'itemToString' | 'search' | 'searchQuery'>\n  > & {\n    value: ShorthandCollection<DropdownItemProps>;\n  },\n) {\n  const { items, itemToString, itemToValue, multiple, search, searchQuery, value } = options;\n\n  const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n  const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n  if (search) {\n    if (_.isFunction(search)) {\n      return {\n        filteredItems: search(filteredItemsByValue, searchQuery),\n        filteredItemStrings,\n      };\n    }\n\n    return {\n      filteredItems: filteredItemsByValue.filter(\n        item => itemToString(item).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1,\n      ),\n      filteredItemStrings,\n    };\n  }\n\n  return {\n    filteredItems: filteredItemsByValue,\n    filteredItemStrings,\n  };\n}\n\nconst isEmpty = prop => {\n  return typeof prop === 'object' && !prop.props && !_.get(prop, 'children') && !_.get(prop, 'content');\n};\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n * [JAWS - ESC (ESCAPE) not closing collapsible listbox (dropdown) on first time #528](https://github.com/FreedomScientific/VFO-standards-support/issues/528)\n */\nexport const Dropdown = (React.forwardRef<HTMLDivElement, DropdownProps>((props, ref) => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Dropdown.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-invalid': ariaInvalid,\n    allowFreeform,\n    clearable,\n    clearIndicator,\n    checkable,\n    checkableIndicator,\n    className,\n    design,\n    disabled,\n    error,\n    fluid,\n    getA11ySelectionMessage,\n    a11ySelectedItemsMessage,\n    getA11yStatusMessage,\n    inline,\n    inverted,\n    itemToString,\n    itemToValue,\n    items,\n    highlightFirstItemOnOpen,\n    multiple,\n    headerMessage,\n    moveFocusOnTab,\n    noResultsMessage,\n    loading,\n    loadingMessage,\n    placeholder,\n    renderItem,\n    renderSelectedItem,\n    search,\n    searchInput,\n    styles,\n    toggleIndicator,\n    triggerButton,\n    variables,\n  } = props;\n\n  const {\n    align,\n    flipBoundary,\n    overflowBoundary,\n    position,\n    positionFixed,\n    offset,\n    unstable_disableTether,\n    unstable_pinned,\n    autoSize,\n  } = props; // PositioningProps passed directly to Dropdown\n  const [list, positioningProps] = partitionPopperPropsFromShorthand(props.list); // PositioningProps passed to Dropdown `list` prop's `popper` key\n\n  const buttonRef = React.useRef<HTMLElement>();\n  const inputRef = React.useRef<HTMLInputElement | undefined>() as React.MutableRefObject<HTMLInputElement | undefined>;\n  const listRef = React.useRef<HTMLElement>();\n  const selectedItemsRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const defaultTriggerButtonId = React.useMemo(() => _.uniqueId('dropdown-trigger-button-'), []);\n  const selectedItemsCountNarrationId = React.useMemo(() => _.uniqueId('dropdown-selected-items-count-'), []);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Dropdown.handledProps, props);\n\n  const [activeSelectedIndex, setActiveSelectedIndex] = useAutoControlled<number | null | undefined>({\n    defaultValue: props.defaultActiveSelectedIndex,\n    initialValue: multiple ? null : undefined,\n    value: props.activeSelectedIndex,\n  });\n  const [highlightedIndex, setHighlightedIndex] = useAutoControlled<number | null>({\n    defaultValue: props.defaultHighlightedIndex,\n    initialValue: highlightFirstItemOnOpen ? 0 : null,\n    value: props.highlightedIndex,\n  });\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    initialValue: false,\n    value: props.open,\n  });\n  const [searchQuery, setSearchQuery] = useAutoControlled<string | undefined>({\n    defaultValue: props.defaultSearchQuery,\n    initialValue: search ? '' : undefined,\n    value: props.searchQuery,\n  });\n  const [rawValue, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    initialValue: [],\n    value: props.value,\n  });\n  const value = normalizeValue(multiple, rawValue);\n\n  const [a11ySelectionStatus, setA11ySelectionStatus] = React.useState('');\n  const [focused, setFocused] = React.useState(false);\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState(false);\n  const [itemIsFromKeyboard, setItemIsFromKeyboard] = React.useState(false);\n  const [startingString, setStartingString] = React.useState<string | undefined>(search ? undefined : '');\n  // used for keeping track of the source of the input, as Downshift does not pass events to the handlers\n  // for free form dropdown:\n  // - if the value is changed based on search query change (from input), accept any value even if not in the list\n  // - if the value is changed based on selection from list, use the value from the list item\n  const inListbox = React.useRef(false);\n\n  const { filteredItems, filteredItemStrings } = getFilteredValues({\n    itemToString,\n    itemToValue,\n    items,\n    multiple,\n    search,\n    searchQuery,\n    value,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownStylesProps>(Dropdown.displayName, {\n    className: dropdownClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      error,\n      fluid,\n      focused,\n      isEmptyClearIndicator: isEmpty(clearIndicator),\n      hasToggleIndicator: !!toggleIndicator,\n      inline,\n      inverted,\n      isFromKeyboard,\n      multiple,\n      open,\n      position: positioningProps?.position ?? position,\n      search: !!search,\n      hasItemsSelected: value.length > 0,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const popperRef = useMergedRefs(props.popperRef);\n\n  useIsomorphicLayoutEffect(() => {\n    popperRef.current?.updatePosition();\n  }, [filteredItems?.length, popperRef]);\n\n  const clearA11ySelectionMessage = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setA11ySelectionStatus('');\n      }, a11yStatusCleanupTime),\n    [],\n  );\n  const clearStartingString = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setStartingString('');\n      }, charKeyPressedCleanupTime),\n    [],\n  );\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, value });\n  };\n\n  const handleOnBlur = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    if (e.target !== buttonRef.current) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const renderTriggerButton = (getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any): JSX.Element => {\n    const content = getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || defaultTriggerButtonId;\n    const triggerButtonContentId = `${triggerButtonId}__content`;\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: handleTriggerButtonOrListFocus,\n      onBlur: handleTriggerButtonBlur,\n      onKeyDown: e => {\n        handleTriggerButtonKeyDown(e);\n      },\n      'aria-invalid': ariaInvalid,\n      'aria-label': undefined,\n      'aria-labelledby': [ariaLabelledby, triggerButtonContentId].filter(Boolean).join(' '),\n      ...(open && { 'aria-expanded': true }),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: resolvedStyles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => {\n            // It can be a shorthand\n            const resolvedContent = _.isPlainObject(predefinedProps.content)\n              ? (predefinedProps.content as {})\n              : predefinedProps.content\n              ? { children: predefinedProps.content }\n              : {};\n\n            return {\n              content:\n                // If `null` is passed we should not render the slot\n                predefinedProps.content === null ? null : { content, id: triggerButtonContentId, ...resolvedContent },\n              onClick: e => {\n                onClick(e);\n                _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n              },\n              onFocus: e => {\n                onFocus(e);\n                _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n              },\n              onBlur: e => {\n                if (!disabled) {\n                  onBlur(e);\n                }\n\n                _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n              },\n              onKeyDown: e => {\n                if (!disabled) {\n                  onKeyDown(e);\n                }\n\n                _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n              },\n            };\n          },\n        })}\n      </Ref>\n    );\n  };\n\n  const renderSearchInput = (\n    accessibilityComboboxProps: Object,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element => {\n    const noPlaceholder = searchQuery?.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        disabled,\n      }),\n      overrideProps: handleSearchInputOverrides(\n        highlightedIndex,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  };\n\n  const renderSelectedItemsCountNarration = id => {\n    // Get narration only if callback is provided, at least one item is selected and only in multiple case\n    if (!getA11ySelectionMessage || !getA11ySelectionMessage.itemsCount || value.length === 0 || !multiple) {\n      return null;\n    }\n    const narration = getA11ySelectionMessage.itemsCount(value.length);\n    return (\n      <span id={id} className={dropdownSlotClassNames.itemsCount} style={screenReaderContainerStyles}>\n        {narration}\n      </span>\n    );\n  };\n  const renderItemsList = (\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => {\n    const items = open ? renderItems(getItemProps) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          rtl={context.rtl}\n          enabled={open}\n          targetRef={containerRef}\n          positioningDependencies={[items.length]}\n          // positioning props:\n          align={align}\n          flipBoundary={flipBoundary}\n          overflowBoundary={overflowBoundary}\n          popperRef={popperRef}\n          position={position}\n          positionFixed={positionFixed}\n          offset={offset}\n          unstable_disableTether={unstable_disableTether}\n          unstable_pinned={unstable_pinned}\n          autoSize={autoSize}\n          {...positioningProps}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: resolvedStyles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  };\n\n  const renderItems = (getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any) => {\n    const footerItem = renderItemsListFooter();\n    const headerItem = renderItemsListHeader();\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  };\n\n  const renderItemsListHeader = () => {\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: resolvedStyles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderItemsListFooter = () => {\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: resolvedStyles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (filteredItems && filteredItems.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: resolvedStyles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const selectedItemsCountNarration = renderSelectedItemsCountNarration(selectedItemsCountNarrationId);\n  const renderSelectedItems = () => {\n    if (value.length === 0) {\n      return null;\n    }\n\n    const selectedItems = value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: isSelectedItemActive(index),\n          disabled,\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: handleSelectedItemOverrides(item),\n        render: renderSelectedItem,\n      }),\n    );\n    return (\n      <>\n        <div role=\"listbox\" tabIndex={-1} aria-label={a11ySelectedItemsMessage}>\n          {selectedItems}\n        </div>\n        {selectedItemsCountNarration}\n      </>\n    );\n  };\n\n  const downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === listRef.current) {\n          return {}; // won't change state in this case.\n        }\n        _.invoke(props, 'onBlur', null);\n      default:\n        return changes;\n    }\n  };\n\n  const handleInputValueChange = (\n    inputValue: string,\n    stateAndHelpers: ControllerStateAndHelpers<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const itemSelected = stateAndHelpers.selectedItem && inputValue === itemToString(stateAndHelpers.selectedItem);\n    if (\n      inputValue !== searchQuery &&\n      !itemSelected // when item is selected, `handleStateChange` will update searchQuery.\n    ) {\n      setStateAndInvokeHandler(['onSearchQueryChange'], null, {\n        searchQuery: inputValue,\n      });\n    }\n  };\n\n  const handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { type } = changes;\n    const newState = {} as DropdownStateForInvoke;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n\n        if (allowFreeform) {\n          // set highlighted index to first item starting with search query\n          const itemIndex = items.findIndex(i =>\n            itemToString(i)?.toLocaleLowerCase().startsWith(changes.inputValue?.toLowerCase()),\n          );\n          if (itemIndex !== -1) {\n            newState.highlightedIndex = itemIndex;\n            // for free form always keep searchQuery and inputValue in sync\n            // as state change might not be called after last letter was entered\n            newState.searchQuery = changes.inputValue;\n          }\n        } else {\n          newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        }\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = getSelectedItemAsString(newValue);\n        if (allowFreeform && !inListbox.current && type === Downshift.stateChangeTypes.keyDownEnter) {\n          const itemIndex = items.findIndex(i =>\n            itemToString(i)?.toLocaleLowerCase().startsWith(searchQuery?.toLocaleLowerCase()),\n          );\n\n          // if there is an item that starts with searchQuery, still apply the search query\n          // to do auto complete (you enter '12:', can be completed to '12:00')\n          if (itemIndex === -1) {\n            delete newState.searchQuery;\n          }\n        }\n\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n        inListbox.current = false;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          context.target?.defaultView.setTimeout(\n            () => (selectedItemsRef.current.scrollTop = selectedItemsRef.current.scrollHeight),\n            0,\n          );\n        }\n\n        // timeout because of NVDA, otherwise it narrates old button value/state\n        context.target?.defaultView.setTimeout(() => tryFocusTriggerButton(), 100);\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search && !multiple) {\n          newState.value = [];\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          if (allowFreeform) {\n            const itemIndex = items.findIndex(i =>\n              itemToString(i)?.toLowerCase().startsWith(searchQuery?.toLowerCase()),\n            );\n\n            // if there is an item that starts with searchQuery, still apply the search query\n            // to do auto complete (you enter '12:', can be completed to '12:00')\n            if (itemIndex !== -1) {\n              newState.searchQuery = itemToString(items[itemIndex]);\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n        newState.itemIsFromKeyboard = isFromKeyboard;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            listRef.current.focus();\n          }\n        } else if (allowFreeform) {\n          const itemIndex = items.findIndex(i =>\n            itemToString(i)?.toLocaleLowerCase().startsWith(searchQuery.toLowerCase()),\n          );\n\n          // if there is an item that starts with searchQuery, still apply the search query\n          // to do auto complete (you enter '12:', can be completed to '12:00')\n          if (itemIndex !== -1) {\n            newState.searchQuery = itemToString(items[itemIndex]);\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n      newState.value !== undefined && 'onChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  const isSelectedItemActive = (index: number): boolean => {\n    return index === activeSelectedIndex;\n  };\n\n  const handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  const handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n  });\n\n  const handleSearchInputOverrides = (\n    highlightedIndex: number,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n\n    const handleInputKeyDown = (\n      e: React.KeyboardEvent<HTMLInputElement>,\n      searchInputProps: DropdownSearchInputProps,\n    ) => {\n      if (!disabled) {\n        switch (getCode(e)) {\n          // https://github.com/downshift-js/downshift/issues/1097\n          // Downshift skips Home/End if Deopdown is opened\n          case keyboardKey.Home:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.End:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.Tab:\n            e.stopPropagation();\n            handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            e.stopPropagation();\n            if (!context.rtl) {\n              // https://github.com/testing-library/user-event/issues/709\n              // JSDOM does not implement `event.view` so prune this code path in test\n              if (process.env.NODE_ENV !== 'test') {\n                setWhatInputSource(e.view.document, 'keyboard');\n              }\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            e.stopPropagation();\n            if (context.rtl) {\n              // https://github.com/testing-library/user-event/issues/709\n              // JSDOM does not implement `event.view` so prune this code path in test\n              if (process.env.NODE_ENV !== 'test') {\n                setWhatInputSource(e.view.document, 'keyboard');\n              }\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            e.stopPropagation();\n            tryRemoveItemFromValue();\n            break;\n          case keyboardKey.Escape:\n            // If dropdown list is open ESC should close it and not propagate to the parent\n            // otherwise event should propagate\n            if (open) {\n              e.stopPropagation();\n            }\n          case keyboardKey.ArrowUp:\n          case keyboardKey.ArrowDown:\n            if (allowFreeform) {\n              inListbox.current = true;\n            }\n            break;\n          default:\n            if (getCode(e) !== keyboardKey.Enter) {\n              inListbox.current = false;\n            }\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n\n            // A state modification should be triggered there otherwise it will go to an another frame and will break\n            // cursor position:\n            // https://github.com/facebook/react/issues/955#issuecomment-469352730\n            setSearchQuery(e.target.value);\n          },\n          'aria-labelledby': ariaLabelledby,\n          'aria-describedby': ariaDescribedby || selectedItemsCountNarrationId,\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n\n      inputRef: (node: HTMLInputElement) => {\n        handleRef(predefinedProps.inputRef, node);\n        inputRef.current = node;\n      },\n      onFocus: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          setFocused(true);\n          setIsFromKeyboard(detectIsFromKeyboard());\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  const handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  const trySetLastSelectedItemAsActive = () => {\n    if (!multiple || (inputRef.current && inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (activeSelectedIndex === value.length - 1) {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      } else {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  const tryRemoveItemFromValue = () => {\n    if (\n      multiple &&\n      (searchQuery === '' || (inputRef.current.selectionStart === 0 && inputRef.current.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      removeItemFromValue();\n    }\n  };\n\n  const handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex: multiple ? null : undefined,\n      highlightedIndex: highlightFirstItemOnOpen ? 0 : null,\n      open: false,\n      searchQuery: search ? '' : undefined,\n      value: [],\n    });\n\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n  };\n\n  const handleContainerClick = () => {\n    tryFocusSearchInput();\n  };\n\n  const handleTriggerButtonKeyDown = (e: React.KeyboardEvent) => {\n    switch (getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const handleListKeyDown = (\n    e: React.KeyboardEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  const handleSelectedItemKeyDown = (\n    e: React.KeyboardEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    const previousKey = context.rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = context.rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex + 1,\n            });\n          } else {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: null,\n            });\n\n            if (search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              inputRef.current.focus();\n            } else {\n              buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  };\n\n  const handleTriggerButtonOrListFocus = () => {\n    setFocused(true);\n    setIsFromKeyboard(detectIsFromKeyboard());\n  };\n\n  const handleTriggerButtonBlur = e => {\n    if (listRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  const handleListBlur = e => {\n    if (buttonRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  const setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    setStartingString(newStartingString);\n    clearStartingString();\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  const handleSelectedItemRemove = (\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    removeItemFromValue(item);\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  };\n\n  const removeItemFromValue = (item?: ShorthandValue<DropdownItemProps>) => {\n    let poppedItem = item;\n    let newValue = [...value];\n\n    if (poppedItem) {\n      newValue = newValue.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = newValue.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    setStateAndInvokeHandler(['onChange'], null, { value: newValue });\n  };\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  const setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: DropdownStateForInvoke,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = multiple ? proposedValue : proposedValue[0] || null;\n\n    if (newState.hasOwnProperty('activeSelectedIndex')) {\n      setActiveSelectedIndex(newState.activeSelectedIndex);\n    }\n    if (newState.hasOwnProperty('highlightedIndex')) {\n      setHighlightedIndex(newState.highlightedIndex);\n    }\n    if (newState.hasOwnProperty('itemIsFromKeyboard')) {\n      setItemIsFromKeyboard(newState.itemIsFromKeyboard);\n    }\n    if (newState.hasOwnProperty('open')) {\n      setOpen(newState.open);\n    }\n    if (newState.hasOwnProperty('searchQuery')) {\n      setSearchQuery(newState.searchQuery);\n    }\n    if (newState.hasOwnProperty('value')) {\n      setValue(newState.value);\n    }\n\n    handlerNames.forEach(handlerName => {\n      _.invoke(props, handlerName, event, { ...props, ...newState, value: newValue });\n    });\n  };\n\n  const tryFocusTriggerButton = () => {\n    if (!search && buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  };\n\n  const tryFocusSearchInput = () => {\n    if (search && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  const getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  const getHighlightedIndexOnArrowKeyOpen = (\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ): number => {\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && value.length > 0) {\n      // in single selection (search or not search), if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (isArrowUp && newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      if (newHighlightedIndex > 0) {\n        return newHighlightedIndex;\n      }\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  const setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    setA11ySelectionStatus(a11ySelectionStatus);\n    clearA11ySelectionMessage();\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearStartingString.cancel();\n      clearA11ySelectionMessage.cancel();\n    };\n  }, [clearA11ySelectionMessage, clearStartingString]);\n\n  const element = (\n    <ElementType\n      className={classes.root}\n      onBlur={handleOnBlur}\n      onChange={handleChange}\n      ref={ref}\n      {...unhandledProps}\n      {...(process.env.NODE_ENV === 'test' && { 'data-test-focused': focused })}\n    >\n      <Downshift\n        isOpen={open}\n        inputValue={search ? searchQuery : null}\n        stateReducer={downshiftStateReducer}\n        itemToString={itemToString}\n        // downshift does not work with arrays as selectedItem.\n        selectedItem={multiple || !value.length ? null : value[0]}\n        scrollIntoView={(node: HTMLElement, menu: HTMLElement) => {\n          if (node) {\n            const { children } = menu;\n            let nodeToScroll = node;\n            /**\n             * If it's loading downshift doesn't take the last node with loadingMessage\n             * in consideration to scrolld so we need to check if the current is the\n             * antepenultimate and is so scroll the loading into view, same for headerMessage\n             */\n            if (loading && children[children.length - 2] === node) {\n              nodeToScroll = children[children.length - 1] as HTMLElement;\n            } else if (headerMessage && children[1] === node) {\n              nodeToScroll = children[0] as HTMLElement;\n            }\n\n            // Replicating same config that Downshift uses\n            const actions = computeScrollIntoView(nodeToScroll, {\n              boundary: menu, // Explicitly set boundary to avoid unnecessary scrolling by checking all parent elements\n              scrollMode: 'if-needed',\n              block: 'nearest',\n              inline: 'nearest',\n            });\n            actions.forEach(({ el, top, left }) => {\n              el.scrollTop = top;\n              el.scrollLeft = left;\n            });\n          }\n        }}\n        getA11yStatusMessage={getA11yStatusMessage}\n        highlightedIndex={highlightedIndex}\n        onStateChange={handleStateChange}\n        onInputValueChange={handleInputValueChange}\n        labelId={ariaLabelledby}\n        environment={context.target?.defaultView}\n        inputId={searchInput && searchInput['id'] ? searchInput['id'] : undefined}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          getRootProps,\n          getToggleButtonProps,\n          toggleMenu,\n          highlightedIndex,\n          selectItemAtIndex,\n        }) => {\n          const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n            { refKey: 'innerRef' },\n            { suppressRefError: true },\n          );\n          const showClearIndicator = clearable && value.length > 0;\n\n          return (\n            <Ref innerRef={innerRef}>\n              <div\n                ref={containerRef}\n                className={cx(dropdownSlotClassNames.container, classes.container)}\n                onClick={search && !open ? handleContainerClick : undefined}\n              >\n                <div ref={selectedItemsRef} className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}>\n                  {/* We previously were rendering the trigger button after selected items list,\n                    after listbox wrapper was introduced we moved it to before and\n                     set as absolute to avoid visual regressions   */}\n                  {!search && renderTriggerButton(getToggleButtonProps)}\n                  {multiple && renderSelectedItems()}\n                  {search &&\n                    renderSearchInput(\n                      accessibilityRootPropsRest,\n                      highlightedIndex,\n                      getInputProps,\n                      selectItemAtIndex,\n                      toggleMenu,\n                      variables,\n                    )}\n                </div>\n                {showClearIndicator\n                  ? Box.create(clearIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.clearIndicator,\n                        styles: resolvedStyles.clearIndicator,\n                        accessibility: indicatorBehavior,\n                        ...(!search && { tabIndex: 0, role: 'button' }),\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                          _.invoke(predefinedProps, 'onClick', e);\n                          handleClear(e);\n                        },\n                      }),\n                    })\n                  : Box.create(toggleIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.toggleIndicator,\n                        styles: resolvedStyles.toggleIndicator,\n                        accessibility: indicatorBehavior,\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: e => {\n                          if (!disabled) {\n                            getToggleButtonProps({ disabled }).onClick(e);\n                          }\n\n                          _.invoke(predefinedProps, 'onClick', e);\n                        },\n                      }),\n                    })}\n                {renderItemsList(\n                  highlightedIndex,\n                  toggleMenu,\n                  selectItemAtIndex,\n                  getMenuProps,\n                  getItemProps,\n                  getInputProps,\n                )}\n              </div>\n            </Ref>\n          );\n        }}\n      </Downshift>\n      <Portal open={!!getA11ySelectionMessage}>\n        <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n          {a11ySelectionStatus}\n        </div>\n      </Portal>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n}) as unknown) as ForwardRefWithAs<'div', HTMLDivElement, DropdownProps> &\n  FluentComponentStaticProps<DropdownProps> & {\n    Item: typeof DropdownItem;\n    SearchInput: typeof DropdownSearchInput;\n    SelectedItem: typeof DropdownSelectedItem;\n  };\n\nDropdown.displayName = 'Dropdown';\n\nDropdown.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  activeSelectedIndex: PropTypes.number,\n  allowFreeform: PropTypes.bool,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  clearable: PropTypes.bool,\n  clearIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultActiveSelectedIndex: PropTypes.number,\n  defaultOpen: PropTypes.bool,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultSearchQuery: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  fluid: PropTypes.bool,\n  getA11ySelectionMessage: PropTypes.object,\n  getA11yStatusMessage: PropTypes.func,\n  highlightFirstItemOnOpen: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  itemToString: PropTypes.func,\n  itemToValue: PropTypes.func,\n  headerMessage: customPropTypes.itemShorthand,\n  list: customPropTypes.itemShorthand,\n  loading: PropTypes.bool,\n  loadingMessage: customPropTypes.itemShorthand,\n  moveFocusOnTab: PropTypes.bool,\n  multiple: PropTypes.bool,\n  noResultsMessage: customPropTypes.itemShorthand,\n  onOpenChange: PropTypes.func,\n  onSearchQueryChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onActiveSelectedIndexChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  open: PropTypes.bool,\n  placeholder: PropTypes.string,\n  renderItem: PropTypes.func,\n  renderSelectedItem: PropTypes.func,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  searchQuery: PropTypes.string,\n  searchInput: customPropTypes.itemShorthand,\n  toggleIndicator: customPropTypes.shorthandAllowingChildren,\n  triggerButton: customPropTypes.itemShorthand,\n  value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  'aria-labelledby': PropTypes.string,\n  'aria-invalid': PropTypes.bool,\n  a11ySelectedItemsMessage: PropTypes.string,\n  // positioning props\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  popperRef: customPropTypes.ref,\n  position: PropTypes.oneOf(POSITIONS),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  unstable_disableTether: PropTypes.oneOf([true, false, 'all']),\n  unstable_pinned: PropTypes.bool,\n  autoSize: PropTypes.oneOf<AutoSize>(AUTOSIZES),\n};\nDropdown.handledProps = Object.keys(Dropdown.propTypes) as any;\n\nDropdown.defaultProps = {\n  align: 'start',\n  clearIndicator: <CloseIcon outline />,\n  itemToString: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  itemToValue: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  list: {},\n  position: 'below',\n  toggleIndicator: <ChevronDownIcon outline />,\n  triggerButton: {},\n};\n\nDropdown.Item = DropdownItem;\nDropdown.SearchInput = DropdownSearchInput;\nDropdown.SelectedItem = DropdownSelectedItem;\n"],"mappings":"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"}
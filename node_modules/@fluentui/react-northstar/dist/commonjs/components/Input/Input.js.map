{"version":3,"file":"Input.js","names":["inputClassName","inputSlotClassNames","input","icon","Input","compose","props","ref","composeOptions","context","useFluentContext","useTelemetry","displayName","telemetry","setStart","setEnd","className","type","wrapper","disabled","fluid","inverted","inline","clearable","iconPosition","design","styles","variables","required","successIndicator","error","errorIndicator","showSuccessIndicator","label","labelPosition","inputRef","React","useRef","useContext","FormFieldBaseContext","labelId","inputId","current","id","getOrGenerateIdFromShorthand","ElementType","getElementType","unhandledProps","useUnhandledProps","handledProps","partitionHTMLProps","htmlInputProps","restProps","useAutoControlled","defaultValue","value","initialValue","setValue","hasValue","length","isShowSuccessIndicatorUndefined","requiredAndSuccessful","hasIcon","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","unstable_props","classes","resolvedStyles","getA11yProps","useAccessibility","accessibility","debugName","actionHandlers","clear","e","stopPropagation","nativeEvent","handleOnClear","mapPropsToBehavior","handleIconOverrides","predefinedProps","onClick","focus","handleChange","newValue","computeIcon","labelElement","createShorthand","slots","defaultProps","htmlFor","inputElement","Box","create","children","handleRef","control","as","onChange","overrideProps","inputContainer","element","root","InputLabel","propTypes","commonPropTypes","createCommon","content","PropTypes","bool","oneOfType","string","arrayOf","customPropTypes","itemShorthand","oneOf","shorthandAllowingChildren","func","number","wrapperShorthand","inputBehavior","Label","createShorthandFactory","Component"],"sources":["components/Input/Input.tsx"],"sourcesContent":["import { Accessibility, inputBehavior, InputBehaviorProps } from '@fluentui/accessibility';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  partitionHTMLProps,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  ShorthandFactory,\n  createShorthand,\n  getOrGenerateIdFromShorthand,\n} from '../../utils';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport { ShorthandValue, ComponentEventHandler } from '../../types';\nimport { Box, BoxProps } from '../Box/Box';\nimport {\n  useAutoControlled,\n  getElementType,\n  useUnhandledProps,\n  useTelemetry,\n  useFluentContext,\n  useStyles,\n  useAccessibility,\n  compose,\n  ComponentWithAs,\n} from '@fluentui/react-bindings';\nimport { ExclamationCircleIcon, CheckmarkCircleIcon, CloseIcon } from '@fluentui/react-icons-northstar';\nimport { InputLabel, InputLabelProps, LabelPosition } from './InputLabel';\nimport { FormFieldBaseContext } from '../Form/utils/formFieldBaseContext';\n\nexport interface InputProps extends UIComponentProps, ChildrenComponentProps, SupportedIntrinsicInputProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<InputBehaviorProps>;\n\n  /** A property that will change the icon on the input and clear the input on click on Cancel. */\n  clearable?: boolean;\n\n  /** The default value of the input. */\n  defaultValue?: string | string[];\n\n  /** An Input can be disabled. */\n  disabled?: boolean;\n\n  /** An input can take the width of its container. */\n  fluid?: boolean;\n\n  /** Optional Icon to display inside the Input. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An Input with icon can format the icon to appear at the start or at the end of the input field. */\n  iconPosition?: 'start' | 'end';\n\n  /** An input can be used inline with text. */\n  inline?: boolean;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onChange?: ComponentEventHandler<InputProps & { value: string }>;\n\n  /** The HTML input type. */\n  type?: string;\n\n  /** (DEPRECATED) Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The value of the input. */\n  value?: string | number;\n\n  /** A label for the input. */\n  label?: ShorthandValue<InputLabelProps>;\n\n  /** Poisition for the label */\n  labelPosition?: LabelPosition;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n\n  /** Input can be required to be valid. */\n  required?: boolean;\n\n  /** Input can have error state */\n  error?: boolean;\n\n  /** Input can have error indicator when error is true */\n  errorIndicator?: ShorthandValue<BoxProps>;\n\n  /** Optional Icon to display inside the Input if required and fulfilled. */\n  successIndicator?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the successIndicator should be visible. */\n  showSuccessIndicator?: boolean;\n}\n\nexport interface InputSlotClassNames {\n  input: string;\n  icon: string;\n}\n\nexport const inputClassName = 'ui-input';\n\nexport type InputStylesProps = Required<\n  Pick<\n    InputProps,\n    'fluid' | 'inverted' | 'inline' | 'disabled' | 'clearable' | 'iconPosition' | 'error' | 'labelPosition'\n  > & {\n    hasIcon: boolean;\n    hasValue: boolean;\n    requiredAndSuccessful: boolean;\n  }\n>;\n\nexport const inputSlotClassNames: InputSlotClassNames = {\n  input: `${inputClassName}__input`,\n  icon: `${inputClassName}__icon`,\n};\n\n/**\n * An Input is a field used to elicit an input from a user.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for input.\n */\nexport const Input = compose<'input', InputProps, InputStylesProps, {}, {}>(\n  (props, ref, composeOptions) => {\n    const context = useFluentContext();\n    const { setStart, setEnd } = useTelemetry(composeOptions.displayName, context.telemetry);\n    setStart();\n    const {\n      className,\n      input,\n      type,\n      wrapper,\n      disabled,\n      fluid,\n      inverted,\n      inline,\n      clearable,\n      icon,\n      iconPosition,\n      design,\n      styles,\n      variables,\n      required,\n      successIndicator,\n      error,\n      errorIndicator,\n      showSuccessIndicator,\n      label,\n      labelPosition,\n    } = props;\n\n    const inputRef = React.useRef<HTMLInputElement>();\n\n    const { labelId } = React.useContext(FormFieldBaseContext);\n    const inputId = React.useRef<string>();\n    inputId.current = props.id || getOrGenerateIdFromShorthand('ui-input-', '', inputId.current);\n\n    const ElementType = getElementType(props);\n    const unhandledProps = useUnhandledProps(composeOptions.handledProps, props);\n\n    const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n    const [value, setValue] = useAutoControlled({\n      defaultValue: props.defaultValue,\n      value: props.value as string,\n      initialValue: '',\n    });\n    const hasValue: boolean = !!value && (value as string)?.length !== 0;\n\n    const isShowSuccessIndicatorUndefined = typeof showSuccessIndicator === 'undefined';\n\n    const requiredAndSuccessful = isShowSuccessIndicatorUndefined\n      ? ((required && hasValue) || showSuccessIndicator) && !error\n      : showSuccessIndicator;\n\n    const hasIcon = !!icon || showSuccessIndicator || (required && isShowSuccessIndicatorUndefined) || !_.isNil(error);\n\n    const { classes, styles: resolvedStyles } = useStyles<InputStylesProps>(composeOptions.displayName, {\n      className: inputClassName,\n      mapPropsToStyles: () => ({\n        fluid,\n        inverted,\n        inline,\n        disabled,\n        clearable,\n        hasIcon,\n        requiredAndSuccessful,\n        iconPosition,\n        hasValue,\n        labelPosition,\n        error,\n      }),\n      mapPropsToInlineStyles: () => ({\n        className,\n        design,\n        styles,\n        variables,\n      }),\n      rtl: context.rtl,\n      composeOptions,\n      unstable_props: props,\n    });\n\n    const getA11yProps = useAccessibility<InputBehaviorProps>(props.accessibility, {\n      debugName: composeOptions.displayName,\n      actionHandlers: {\n        clear: e => {\n          if (clearable && value !== '') {\n            e.stopPropagation();\n            e.nativeEvent && e.nativeEvent.stopPropagation();\n            handleOnClear(e);\n          }\n        },\n      },\n      mapPropsToBehavior: () => ({\n        disabled,\n        required,\n        error,\n      }),\n      rtl: context.rtl,\n    });\n\n    const handleIconOverrides = predefinedProps => ({\n      onClick: (e: React.MouseEvent) => {\n        if (!disabled) {\n          handleOnClear(e);\n          inputRef.current.focus();\n        }\n\n        _.invoke(predefinedProps, 'onClick', e, props);\n      },\n    });\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) {\n        return;\n      }\n\n      const newValue = _.get(e, 'target.value');\n\n      _.invoke(props, 'onChange', e, { ...props, value: newValue });\n\n      setValue(newValue);\n    };\n\n    const handleOnClear = (e: React.MouseEvent | React.KeyboardEvent) => {\n      if (clearable) {\n        _.invoke(props, 'onChange', e, { ...props, value: '' });\n        setValue('');\n      }\n    };\n\n    const computeIcon = (): ShorthandValue<BoxProps> => {\n      if (clearable && (value as string)?.length !== 0) {\n        return <CloseIcon outline />;\n      }\n      if (requiredAndSuccessful) {\n        return successIndicator;\n      }\n      if (error) {\n        return errorIndicator;\n      }\n      return icon || null;\n    };\n\n    const labelElement = createShorthand(composeOptions.slots.label, label, {\n      defaultProps: () => ({\n        labelPosition,\n        label,\n        required,\n        htmlFor: inputId.current,\n        hasValue,\n        id: labelId,\n      }),\n    });\n\n    const inputElement = Box.create(\n      {},\n      {\n        defaultProps: () => ({\n          children: (\n            <>\n              <Ref\n                innerRef={(inputElement: HTMLElement) => {\n                  handleRef(inputRef, inputElement);\n                  handleRef(props.inputRef, inputElement);\n                  handleRef(ref, inputElement);\n                }}\n              >\n                {createShorthand(composeOptions.slots.control, input || type, {\n                  defaultProps: () =>\n                    getA11yProps('input', {\n                      ...htmlInputProps,\n                      as: 'input',\n                      disabled,\n                      type,\n                      required,\n                      value: value || '',\n                      id: inputId.current,\n                      className: inputSlotClassNames.input,\n                      styles: resolvedStyles.input,\n                      onChange: handleChange,\n                    }),\n                })}\n              </Ref>\n              {createShorthand(composeOptions.slots.icon, computeIcon(), {\n                defaultProps: () =>\n                  getA11yProps('icon', {\n                    className: inputSlotClassNames.icon,\n                    styles: resolvedStyles.icon,\n                  }),\n                overrideProps: handleIconOverrides,\n              })}\n            </>\n          ),\n          styles: resolvedStyles.inputContainer,\n        }),\n      },\n    );\n\n    const element = Box.create(wrapper, {\n      defaultProps: () =>\n        getA11yProps('root', {\n          className: classes.root,\n          children: (\n            <>\n              {labelElement}\n              {inputElement}\n            </>\n          ),\n          styles: resolvedStyles.root,\n          ...restProps,\n        }),\n      overrideProps: {\n        as: (wrapper && (wrapper as any).as) || ElementType,\n      },\n    });\n    setEnd();\n    return element;\n  },\n  {\n    className: inputClassName,\n    displayName: 'Input',\n    slots: {\n      control: Box,\n      icon: Box,\n      label: InputLabel,\n    },\n    handledProps: [\n      'accessibility',\n      'as',\n      'children',\n      'className',\n      'design',\n      'styles',\n      'variables',\n      'clearable',\n      'defaultValue',\n      'disabled',\n      'fluid',\n      'icon',\n      'iconPosition',\n      'input',\n      'inputRef',\n      'inline',\n      'inverted',\n      'onChange',\n      'type',\n      'value',\n      'wrapper',\n      'required',\n      'successIndicator',\n      'error',\n      'errorIndicator',\n      'showSuccessIndicator',\n      'label',\n      'labelPosition',\n    ],\n  },\n) as ComponentWithAs<'input', InputProps> & {\n  create: ShorthandFactory<InputProps>;\n  Label: typeof InputLabel;\n};\n\nInput.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  clearable: PropTypes.bool,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  disabled: PropTypes.bool,\n  fluid: PropTypes.bool,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf<LabelPosition>(['inline', 'above', 'inside']),\n  icon: customPropTypes.shorthandAllowingChildren,\n  iconPosition: PropTypes.oneOf(['start', 'end']),\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  onChange: PropTypes.func,\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  wrapper: customPropTypes.wrapperShorthand,\n  required: PropTypes.bool,\n  successIndicator: customPropTypes.shorthandAllowingChildren,\n  error: PropTypes.bool,\n  errorIndicator: customPropTypes.shorthandAllowingChildren,\n  showSuccessIndicator: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  accessibility: inputBehavior,\n  type: 'text',\n  wrapper: {},\n  iconPosition: 'end',\n  errorIndicator: <ExclamationCircleIcon />,\n  successIndicator: <CheckmarkCircleIcon outline />,\n};\n\nInput.Label = InputLabel;\n\nInput.create = createShorthandFactory({ Component: Input });\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AAYA;AACA;AAWA;AACA;AACA;AAA0E;AAAA;AAkFnE,IAAMA,cAAc,GAAG,UAAU;AAAC;AAalC,IAAMC,mBAAwC,GAAG;EACtDC,KAAK,EAAKF,cAAc,YAAS;EACjCG,IAAI,EAAKH,cAAc;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AALA;AAMO,IAAMI,KAAK,GAAG,IAAAC,sBAAO,EAC1B,UAACC,KAAK,EAAEC,GAAG,EAAEC,cAAc,EAAK;EAC9B,IAAMC,OAAO,GAAG,IAAAC,+BAAgB,GAAE;EAClC,oBAA6B,IAAAC,2BAAY,EAACH,cAAc,CAACI,WAAW,EAAEH,OAAO,CAACI,SAAS,CAAC;IAAhFC,QAAQ,iBAARA,QAAQ;IAAEC,MAAM,iBAANA,MAAM;EACxBD,QAAQ,EAAE;EACV,IACEE,SAAS,GAqBPV,KAAK,CArBPU,SAAS;IACTd,KAAK,GAoBHI,KAAK,CApBPJ,KAAK;IACLe,IAAI,GAmBFX,KAAK,CAnBPW,IAAI;IACJC,OAAO,GAkBLZ,KAAK,CAlBPY,OAAO;IACPC,QAAQ,GAiBNb,KAAK,CAjBPa,QAAQ;IACRC,KAAK,GAgBHd,KAAK,CAhBPc,KAAK;IACLC,QAAQ,GAeNf,KAAK,CAfPe,QAAQ;IACRC,MAAM,GAcJhB,KAAK,CAdPgB,MAAM;IACNC,SAAS,GAaPjB,KAAK,CAbPiB,SAAS;IACTpB,IAAI,GAYFG,KAAK,CAZPH,IAAI;IACJqB,YAAY,GAWVlB,KAAK,CAXPkB,YAAY;IACZC,MAAM,GAUJnB,KAAK,CAVPmB,MAAM;IACNC,MAAM,GASJpB,KAAK,CATPoB,MAAM;IACNC,SAAS,GAQPrB,KAAK,CARPqB,SAAS;IACTC,QAAQ,GAONtB,KAAK,CAPPsB,QAAQ;IACRC,gBAAgB,GAMdvB,KAAK,CANPuB,gBAAgB;IAChBC,KAAK,GAKHxB,KAAK,CALPwB,KAAK;IACLC,cAAc,GAIZzB,KAAK,CAJPyB,cAAc;IACdC,oBAAoB,GAGlB1B,KAAK,CAHP0B,oBAAoB;IACpBC,KAAK,GAEH3B,KAAK,CAFP2B,KAAK;IACLC,aAAa,GACX5B,KAAK,CADP4B,aAAa;EAGf,IAAMC,QAAQ,GAAGC,KAAK,CAACC,MAAM,EAAoB;EAEjD,wBAAoBD,KAAK,CAACE,UAAU,CAACC,0CAAoB,CAAC;IAAlDC,OAAO,qBAAPA,OAAO;EACf,IAAMC,OAAO,GAAGL,KAAK,CAACC,MAAM,EAAU;EACtCI,OAAO,CAACC,OAAO,GAAGpC,KAAK,CAACqC,EAAE,IAAI,IAAAC,mCAA4B,EAAC,WAAW,EAAE,EAAE,EAAEH,OAAO,CAACC,OAAO,CAAC;EAE5F,IAAMG,WAAW,GAAG,IAAAC,6BAAc,EAACxC,KAAK,CAAC;EACzC,IAAMyC,cAAc,GAAG,IAAAC,gCAAiB,EAACxC,cAAc,CAACyC,YAAY,EAAE3C,KAAK,CAAC;EAE5E,0BAAoC,IAAA4C,yBAAkB,EAACH,cAAc,CAAC;IAA/DI,cAAc;IAAEC,SAAS;EAChC,yBAA0B,IAAAC,gCAAiB,EAAC;MAC1CC,YAAY,EAAEhD,KAAK,CAACgD,YAAY;MAChCC,KAAK,EAAEjD,KAAK,CAACiD,KAAe;MAC5BC,YAAY,EAAE;IAChB,CAAC,CAAC;IAJKD,KAAK;IAAEE,QAAQ;EAKtB,IAAMC,QAAiB,GAAG,CAAC,CAACH,KAAK,IAAI,CAACA,KAAK,oBAALA,KAAK,CAAaI,MAAM,MAAK,CAAC;EAEpE,IAAMC,+BAA+B,GAAG,OAAO5B,oBAAoB,KAAK,WAAW;EAEnF,IAAM6B,qBAAqB,GAAGD,+BAA+B,GACzD,CAAEhC,QAAQ,IAAI8B,QAAQ,IAAK1B,oBAAoB,KAAK,CAACF,KAAK,GAC1DE,oBAAoB;EAExB,IAAM8B,OAAO,GAAG,CAAC,CAAC3D,IAAI,IAAI6B,oBAAoB,IAAKJ,QAAQ,IAAIgC,+BAAgC,IAAI,CAAC,qBAAQ9B,KAAK,CAAC;EAElH,iBAA4C,IAAAiC,wBAAS,EAAmBvD,cAAc,CAACI,WAAW,EAAE;MAClGI,SAAS,EAAEhB,cAAc;MACzBgE,gBAAgB,EAAE;QAAA,OAAO;UACvB5C,KAAK,EAALA,KAAK;UACLC,QAAQ,EAARA,QAAQ;UACRC,MAAM,EAANA,MAAM;UACNH,QAAQ,EAARA,QAAQ;UACRI,SAAS,EAATA,SAAS;UACTuC,OAAO,EAAPA,OAAO;UACPD,qBAAqB,EAArBA,qBAAqB;UACrBrC,YAAY,EAAZA,YAAY;UACZkC,QAAQ,EAARA,QAAQ;UACRxB,aAAa,EAAbA,aAAa;UACbJ,KAAK,EAALA;QACF,CAAC;MAAA,CAAC;MACFmC,sBAAsB,EAAE;QAAA,OAAO;UAC7BjD,SAAS,EAATA,SAAS;UACTS,MAAM,EAANA,MAAM;UACNC,MAAM,EAANA,MAAM;UACNC,SAAS,EAATA;QACF,CAAC;MAAA,CAAC;MACFuC,GAAG,EAAEzD,OAAO,CAACyD,GAAG;MAChB1D,cAAc,EAAdA,cAAc;MACd2D,cAAc,EAAE7D;IAClB,CAAC,CAAC;IAxBM8D,OAAO,cAAPA,OAAO;IAAUC,cAAc,cAAtB3C,MAAM;EA0BvB,IAAM4C,YAAY,GAAG,IAAAC,+BAAgB,EAAqBjE,KAAK,CAACkE,aAAa,EAAE;IAC7EC,SAAS,EAAEjE,cAAc,CAACI,WAAW;IACrC8D,cAAc,EAAE;MACdC,KAAK,EAAE,eAAAC,CAAC,EAAI;QACV,IAAIrD,SAAS,IAAIgC,KAAK,KAAK,EAAE,EAAE;UAC7BqB,CAAC,CAACC,eAAe,EAAE;UACnBD,CAAC,CAACE,WAAW,IAAIF,CAAC,CAACE,WAAW,CAACD,eAAe,EAAE;UAChDE,aAAa,CAACH,CAAC,CAAC;QAClB;MACF;IACF,CAAC;IACDI,kBAAkB,EAAE;MAAA,OAAO;QACzB7D,QAAQ,EAARA,QAAQ;QACRS,QAAQ,EAARA,QAAQ;QACRE,KAAK,EAALA;MACF,CAAC;IAAA,CAAC;IACFoC,GAAG,EAAEzD,OAAO,CAACyD;EACf,CAAC,CAAC;EAEF,IAAMe,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAGC,eAAe;IAAA,OAAK;MAC9CC,OAAO,EAAE,iBAACP,CAAmB,EAAK;QAChC,IAAI,CAACzD,QAAQ,EAAE;UACb4D,aAAa,CAACH,CAAC,CAAC;UAChBzC,QAAQ,CAACO,OAAO,CAAC0C,KAAK,EAAE;QAC1B;QAEA,sBAASF,eAAe,EAAE,SAAS,EAAEN,CAAC,EAAEtE,KAAK,CAAC;MAChD;IACF,CAAC;EAAA,CAAC;EAEF,IAAM+E,YAAY,GAAG,SAAfA,YAAY,CAAIT,CAAsC,EAAK;IAC/D,IAAIzD,QAAQ,EAAE;MACZ;IACF;IAEA,IAAMmE,QAAQ,GAAG,mBAAMV,CAAC,EAAE,cAAc,CAAC;IAEzC,sBAAStE,KAAK,EAAE,UAAU,EAAEsE,CAAC,oBAAOtE,KAAK;MAAEiD,KAAK,EAAE+B;IAAQ,GAAG;IAE7D7B,QAAQ,CAAC6B,QAAQ,CAAC;EACpB,CAAC;EAED,IAAMP,aAAa,GAAG,SAAhBA,aAAa,CAAIH,CAAyC,EAAK;IACnE,IAAIrD,SAAS,EAAE;MACb,sBAASjB,KAAK,EAAE,UAAU,EAAEsE,CAAC,oBAAOtE,KAAK;QAAEiD,KAAK,EAAE;MAAE,GAAG;MACvDE,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;EAED,IAAM8B,WAAW,GAAG,SAAdA,WAAW,GAAmC;IAClD,IAAIhE,SAAS,IAAI,CAACgC,KAAK,oBAALA,KAAK,CAAaI,MAAM,MAAK,CAAC,EAAE;MAChD,oBAAO,oBAAC,8BAAS;QAAC,OAAO;MAAA,EAAG;IAC9B;IACA,IAAIE,qBAAqB,EAAE;MACzB,OAAOhC,gBAAgB;IACzB;IACA,IAAIC,KAAK,EAAE;MACT,OAAOC,cAAc;IACvB;IACA,OAAO5B,IAAI,IAAI,IAAI;EACrB,CAAC;EAED,IAAMqF,YAAY,GAAG,IAAAC,sBAAe,EAACjF,cAAc,CAACkF,KAAK,CAACzD,KAAK,EAAEA,KAAK,EAAE;IACtE0D,YAAY,EAAE;MAAA,OAAO;QACnBzD,aAAa,EAAbA,aAAa;QACbD,KAAK,EAALA,KAAK;QACLL,QAAQ,EAARA,QAAQ;QACRgE,OAAO,EAAEnD,OAAO,CAACC,OAAO;QACxBgB,QAAQ,EAARA,QAAQ;QACRf,EAAE,EAAEH;MACN,CAAC;IAAA;EACH,CAAC,CAAC;EAEF,IAAMqD,YAAY,GAAGC,QAAG,CAACC,MAAM,CAC7B,CAAC,CAAC,EACF;IACEJ,YAAY,EAAE;MAAA,OAAO;QACnBK,QAAQ,eACN,uDACE,oBAAC,sBAAG;UACF,QAAQ,EAAE,kBAACH,YAAyB,EAAK;YACvC,IAAAI,4BAAS,EAAC9D,QAAQ,EAAE0D,YAAY,CAAC;YACjC,IAAAI,4BAAS,EAAC3F,KAAK,CAAC6B,QAAQ,EAAE0D,YAAY,CAAC;YACvC,IAAAI,4BAAS,EAAC1F,GAAG,EAAEsF,YAAY,CAAC;UAC9B;QAAE,GAED,IAAAJ,sBAAe,EAACjF,cAAc,CAACkF,KAAK,CAACQ,OAAO,EAAEhG,KAAK,IAAIe,IAAI,EAAE;UAC5D0E,YAAY,EAAE;YAAA,OACZrB,YAAY,CAAC,OAAO,oBACfnB,cAAc;cACjBgD,EAAE,EAAE,OAAO;cACXhF,QAAQ,EAARA,QAAQ;cACRF,IAAI,EAAJA,IAAI;cACJW,QAAQ,EAARA,QAAQ;cACR2B,KAAK,EAAEA,KAAK,IAAI,EAAE;cAClBZ,EAAE,EAAEF,OAAO,CAACC,OAAO;cACnB1B,SAAS,EAAEf,mBAAmB,CAACC,KAAK;cACpCwB,MAAM,EAAE2C,cAAc,CAACnE,KAAK;cAC5BkG,QAAQ,EAAEf;YAAY,GACtB;UAAA;QACN,CAAC,CAAC,CACE,EACL,IAAAI,sBAAe,EAACjF,cAAc,CAACkF,KAAK,CAACvF,IAAI,EAAEoF,WAAW,EAAE,EAAE;UACzDI,YAAY,EAAE;YAAA,OACZrB,YAAY,CAAC,MAAM,EAAE;cACnBtD,SAAS,EAAEf,mBAAmB,CAACE,IAAI;cACnCuB,MAAM,EAAE2C,cAAc,CAAClE;YACzB,CAAC,CAAC;UAAA;UACJkG,aAAa,EAAEpB;QACjB,CAAC,CAAC,CAEL;QACDvD,MAAM,EAAE2C,cAAc,CAACiC;MACzB,CAAC;IAAA;EACH,CAAC,CACF;EAED,IAAMC,OAAO,GAAGT,QAAG,CAACC,MAAM,CAAC7E,OAAO,EAAE;IAClCyE,YAAY,EAAE;MAAA,OACZrB,YAAY,CAAC,MAAM;QACjBtD,SAAS,EAAEoD,OAAO,CAACoC,IAAI;QACvBR,QAAQ,eACN,0CACGR,YAAY,EACZK,YAAY,CAEhB;QACDnE,MAAM,EAAE2C,cAAc,CAACmC;MAAI,GACxBpD,SAAS,EACZ;IAAA;IACJiD,aAAa,EAAE;MACbF,EAAE,EAAGjF,OAAO,IAAKA,OAAO,CAASiF,EAAE,IAAKtD;IAC1C;EACF,CAAC,CAAC;EACF9B,MAAM,EAAE;EACR,OAAOwF,OAAO;AAChB,CAAC,EACD;EACEvF,SAAS,EAAEhB,cAAc;EACzBY,WAAW,EAAE,OAAO;EACpB8E,KAAK,EAAE;IACLQ,OAAO,EAAEJ,QAAG;IACZ3F,IAAI,EAAE2F,QAAG;IACT7D,KAAK,EAAEwE;EACT,CAAC;EACDxD,YAAY,EAAE,CACZ,eAAe,EACf,IAAI,EACJ,UAAU,EACV,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,WAAW,EACX,cAAc,EACd,UAAU,EACV,OAAO,EACP,MAAM,EACN,cAAc,EACd,OAAO,EACP,UAAU,EACV,QAAQ,EACR,UAAU,EACV,UAAU,EACV,MAAM,EACN,OAAO,EACP,SAAS,EACT,UAAU,EACV,kBAAkB,EAClB,OAAO,EACP,gBAAgB,EAChB,sBAAsB,EACtB,OAAO,EACP,eAAe;AAEnB,CAAC,CAIF;AAAC;AAEF7C,KAAK,CAACsG,SAAS,qBACVC,sBAAe,CAACC,YAAY,CAAC;EAC9BC,OAAO,EAAE;AACX,CAAC,CAAC;EACFtF,SAAS,EAAEuF,SAAS,CAACC,IAAI;EACzBzD,YAAY,EAAEwD,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,MAAM,EAAEH,SAAS,CAACI,OAAO,CAACJ,SAAS,CAACG,MAAM,CAAC,CAAC,CAAC;EAC1F9F,QAAQ,EAAE2F,SAAS,CAACC,IAAI;EACxB3F,KAAK,EAAE0F,SAAS,CAACC,IAAI;EACrB9E,KAAK,EAAEkF,eAAe,CAACC,aAAa;EACpClF,aAAa,EAAE4E,SAAS,CAACO,KAAK,CAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;EAC5ElH,IAAI,EAAEgH,eAAe,CAACG,yBAAyB;EAC/C9F,YAAY,EAAEsF,SAAS,CAACO,KAAK,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EAC/CnH,KAAK,EAAEiH,eAAe,CAACC,aAAa;EACpCjF,QAAQ,EAAEgF,eAAe,CAAC5G,GAAG;EAC7Be,MAAM,EAAEwF,SAAS,CAACC,IAAI;EACtB1F,QAAQ,EAAEyF,SAAS,CAACC,IAAI;EACxBX,QAAQ,EAAEU,SAAS,CAACS,IAAI;EACxBtG,IAAI,EAAE6F,SAAS,CAACG,MAAM;EACtB1D,KAAK,EAAEuD,SAAS,CAACE,SAAS,CAAC,CAACF,SAAS,CAACG,MAAM,EAAEH,SAAS,CAACU,MAAM,CAAC,CAAC;EAChEtG,OAAO,EAAEiG,eAAe,CAACM,gBAAgB;EACzC7F,QAAQ,EAAEkF,SAAS,CAACC,IAAI;EACxBlF,gBAAgB,EAAEsF,eAAe,CAACG,yBAAyB;EAC3DxF,KAAK,EAAEgF,SAAS,CAACC,IAAI;EACrBhF,cAAc,EAAEoF,eAAe,CAACG,yBAAyB;EACzDtF,oBAAoB,EAAE8E,SAAS,CAACC;AAAI,EACrC;AAED3G,KAAK,CAACuF,YAAY,GAAG;EACnBnB,aAAa,EAAEkD,4BAAa;EAC5BzG,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE,CAAC,CAAC;EACXM,YAAY,EAAE,KAAK;EACnBO,cAAc,eAAE,oBAAC,0CAAqB,OAAG;EACzCF,gBAAgB,eAAE,oBAAC,wCAAmB;IAAC,OAAO;EAAA;AAChD,CAAC;AAEDzB,KAAK,CAACuH,KAAK,GAAGlB,sBAAU;AAExBrG,KAAK,CAAC2F,MAAM,GAAG,IAAA6B,6BAAsB,EAAC;EAAEC,SAAS,EAAEzH;AAAM,CAAC,CAAC"}
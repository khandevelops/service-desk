"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_component_base_1 = require("@microsoft/sp-component-base");
/**
 * The base class for all client-side extensions.
 *
 * @public
 */
var BaseExtension = /** @class */ (function (_super) {
    tslib_1.__extends(BaseExtension, _super);
    /** @internal */
    function BaseExtension() {
        var _this = _super.call(this) || this;
        _this._properties = {};
        return _this;
    }
    /**
     * @internal
     */
    BaseExtension.prototype._init = function (context, propertiesJson, additionalInitParameters) {
        var _this = this;
        this._initializeContext(context);
        this._deserializeProperties(propertiesJson);
        var logSource = this.context.serviceScope.consume(sp_diagnostics_1._logSourceServiceKey);
        var perflogKey = logSource + '.Extension.Init';
        sp_telemetry_1._PerformanceLogger.startMarkForComponent(perflogKey);
        this._initializeExtensionType();
        this._initPromise = this.onInit().then(function () {
            sp_telemetry_1._PerformanceLogger.endMarkForComponent(perflogKey);
            sp_telemetry_1._PerformanceLogger.logPerformanceMetricToConsole(perflogKey, 'Extension.Init', _this.context.manifest.id, _this.context.manifest.alias);
        });
        return this._initPromise;
    };
    /**
     * This method can be overriden by different extension types (e.g. app customizers) to do specific initialization.
     * virtual
     * @internal
     */
    BaseExtension.prototype._initializeExtensionType = function () {
        return;
    };
    Object.defineProperty(BaseExtension.prototype, "properties", {
        /**
         * Extension properties is a JavaScript object that are passed in by the application that initializes the extension.
         *
         * @remarks
         * Properties can be used in the extension code to define configurable behaviors. The application has control over
         * what properties to provide to an instance of the extension, however the most common way would be to have it
         * stored on the server as JSON and pass it as is to the extension on initialization.
         *
         * @readonly
         */
        get: function () {
            return this._properties;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * This event method is called when the client-side extension is first activated on the page.
     * virtual
     */
    BaseExtension.prototype.onInit = function () {
        return Promise.resolve();
    };
    BaseExtension.prototype._deserializeProperties = function (propertiesJson) {
        this._properties = {};
        try {
            if (propertiesJson && propertiesJson.trim() !== '') {
                this._properties = JSON.parse(propertiesJson);
            }
        }
        catch (e) {
            // This exception occurs e.g. when the SPField.clientSideComponentProperties contains a malformed
            // JSON string.  It is an "expected" user error (i.e. bad data), not a bug in our code.
            var logSource = this.context.serviceScope.consume(sp_diagnostics_1._logSourceServiceKey);
            sp_diagnostics_1._TraceLogger.logError(logSource, new Error("Failed to deserialize properties for extension \"".concat(this.context.manifest.alias, "\"\n          + \" with id=").concat(this.context.manifest.id, ": ") + e.message));
        }
    };
    return BaseExtension;
}(sp_component_base_1.BaseComponent));
exports.default = BaseExtension;
//# sourceMappingURL=BaseExtension.js.map
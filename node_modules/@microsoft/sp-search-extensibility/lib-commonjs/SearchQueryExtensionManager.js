"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_extension_base_1 = require("@microsoft/sp-extension-base");
var sp_loader_1 = require("@microsoft/sp-loader");
var BaseSearchQueryModifier_1 = tslib_1.__importStar(require("./BaseSearchQueryModifier"));
var SearchQueryModifierContext_1 = tslib_1.__importDefault(require("./SearchQueryModifierContext"));
/**
 * Manages SearchQueryModifier extensions.
 * This is used by sp-application-base:SearchQueryManager to process a search query through the modifiers.
 *
 * @internal
 */
var SearchQueryExtensionManager = /** @class */ (function () {
    function SearchQueryExtensionManager(serviceScope) {
        this._extensionManager = new sp_extension_base_1._ExtensionManager(serviceScope, BaseSearchQueryModifier_1.default);
        this._extensions = [];
    }
    /**
     * {@inheritDoc _ISearchQueryExtensionManager.initializeExtensions}
     */
    SearchQueryExtensionManager.prototype.initializeExtensions = function (customActions) {
        var _this = this;
        var qosMonitor = new sp_diagnostics_1._QosMonitor('SearchQueryExtensionManager.initializeExtensions');
        var modifierCustomActions = this._getCustomActions(customActions)
            .filter(function (ca) {
            return ca.location === 'ClientSideExtension.SearchQueryModifier' && // VSO #770394 - Re-use the string
                // Custom actions are not removed when an extension is uninstalled. This is an expected scenario.
                !!sp_loader_1.SPComponentLoader.tryGetManifestById(ca.clientSideComponentId);
        })
            .sort(function (ca1, ca2) { return (ca1.sequence || Number.MAX_VALUE) - (ca2.sequence || Number.MAX_VALUE); });
        var extensionPromises = modifierCustomActions.map(function (customAction) {
            return _this._extensionManager.createExtension(customAction.clientSideComponentId.toString(), customAction.clientSideComponentProperties, function (params) {
                return new SearchQueryModifierContext_1.default(params);
            });
        });
        return Promise.all(extensionPromises)
            .then(function (loadedExtensions) {
            _this._extensions = loadedExtensions;
            var numberOfExtensions = _this._extensions.length;
            qosMonitor.writeSuccess({ numberOfExtensions: numberOfExtensions });
            return numberOfExtensions;
        })
            .catch(function (e) {
            qosMonitor.writeUnexpectedFailure(undefined, e, { numberOfExtensions: 0 });
            throw e;
        });
    };
    /**
     * {@inheritDoc _ISearchQueryExtensionManager.getSearchQuery}
     */
    SearchQueryExtensionManager.prototype.getSearchQuery = function (queryText) {
        var _this = this;
        var result = Promise.resolve({
            queryText: queryText,
            originalQueryText: queryText
        });
        this._extensions.forEach(function (extension) {
            result = result.then(function (q) { return _this._processQuery(extension, q, queryText); });
        });
        return result.then(function (q) { return q.queryText; });
    };
    SearchQueryExtensionManager.prototype._processQuery = function (extension, query, originalQueryText) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('SearchQueryExtensionManager.processQuery');
        // tslint:disable-next-line:no-any
        var extraData = {
            componentId: extension.componentId,
            alias: extension.manifest.alias
        };
        var timeoutPromise = new Promise(function (resolve) {
            setTimeout(function () {
                qosMonitor.writeExpectedFailure('Timeout', undefined, extraData);
                resolve(query);
            }, extension.timeout);
        });
        return Promise.race([
            timeoutPromise,
            extension.modifySearchQuery(tslib_1.__assign(tslib_1.__assign({}, query), { originalQueryText: originalQueryText }), BaseSearchQueryModifier_1.SearchQueryScenario.SearchResults)
        ])
            .then(function (q) {
            qosMonitor.writeSuccess(extraData);
            return q;
        })
            .catch(function (e) {
            qosMonitor.writeUnexpectedFailure(undefined, e, extraData);
            throw e;
        });
    };
    SearchQueryExtensionManager.prototype._getCustomActions = function (customActions) {
        return this._getDebugCustomActions().concat(customActions);
    };
    // Minimal code. Taken from ApplicationCustomizerLoader. Should be refactored. VSO #770394
    SearchQueryExtensionManager.prototype._getDebugCustomActions = function () {
        var result = [];
        var parameters = new URL(window.location.href).searchParams;
        var parameterValue = parameters.get('customActions');
        if (parameterValue) {
            var decodedParameterValue = decodeURIComponent(parameterValue);
            var queryValue = JSON.parse(decodedParameterValue);
            if (queryValue) {
                for (var _i = 0, _a = Object.keys(queryValue); _i < _a.length; _i++) {
                    var key = _a[_i];
                    var clientSideComponentId = sp_core_library_1.Guid.tryParse(key);
                    var location_1 = queryValue[key].location;
                    var sequence = queryValue[key].sequence;
                    result.push({
                        clientSideComponentId: clientSideComponentId.toString(),
                        location: location_1,
                        sequence: sequence
                    });
                }
            }
        }
        return result;
    };
    return SearchQueryExtensionManager;
}());
exports.default = SearchQueryExtensionManager;
//# sourceMappingURL=SearchQueryExtensionManager.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_extension_base_1 = require("@microsoft/sp-extension-base");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var Killswitches_1 = require("../common/Killswitches");
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that runs when an application is first starting.
 *
 * @remarks
 * In the component manifest, the "extensionType" should be set to "ApplicationCustomizer".
 *
 * Example usage scenarios for an application customizer might include: rendering custom
 * UI elements inside a SharePoint content placeholder, tracking page load statistics,
 * or automatically logging the user out after a certain time period.
 *
 * @public
 */
var BaseApplicationCustomizer = /** @class */ (function (_super) {
    tslib_1.__extends(BaseApplicationCustomizer, _super);
    function BaseApplicationCustomizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Initialization code for all the application customizers.
     * Sets up the placeholder setup virtual function with the placeholder changed event.
     *
     * @internal
     */
    BaseApplicationCustomizer.prototype._initializeExtensionType = function () {
        _super.prototype._initializeExtensionType.call(this);
        // Set up if the extension doesn't override the function with a different signature.
        // As this function was added later there is a chance they already used the name.
        var qosMonitor = new sp_diagnostics_1._QosMonitor('BaseApplicationCustomizer.onPlaceholdersChanged.setUp');
        if (this.onPlaceholdersChanged.length === 1) {
            this._placeholdersChangedCallback = this.onPlaceholdersChanged.bind(this, this.context.placeholderProvider);
            this.context.placeholderProvider.changedEvent.add(this, this._placeholdersChangedCallback);
            qosMonitor.writeSuccess();
        }
        else {
            qosMonitor.writeExpectedFailure('DifferentSignature');
        }
    };
    Object.defineProperty(BaseApplicationCustomizer.prototype, "_dynamicDataSourceId", {
        /**
         * Override BaseComponent._dynamicDataSourceId to exclude instance id.
         * Application Customizer's instance id changes per session.
         */
        get: function () {
            return !Killswitches_1.Killswitches.isOverrideApplicationCustomizerDynamicDataSourceIdKSActivated()
                ? "".concat(this.manifest.componentType, ".").concat(this.manifest.id)
                : "".concat(this.manifest.componentType, ".").concat(this.manifest.id, ".").concat(this.instanceId);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.dispose}
     */
    BaseApplicationCustomizer.prototype.dispose = function () {
        if (this._placeholdersChangedCallback) {
            this.context.placeholderProvider.changedEvent.remove(this, this._placeholdersChangedCallback);
        }
        _super.prototype.dispose.call(this);
    };
    /**
     * This event method is called when the placeholders of the host application change, come into
     * existence, or disappear.
     * virtual
     */
    BaseApplicationCustomizer.prototype.onPlaceholdersChanged = function (placeholderProvider) {
        return;
    };
    return BaseApplicationCustomizer;
}(sp_extension_base_1.BaseExtension));
exports.default = BaseApplicationCustomizer;
//# sourceMappingURL=BaseApplicationCustomizer.js.map
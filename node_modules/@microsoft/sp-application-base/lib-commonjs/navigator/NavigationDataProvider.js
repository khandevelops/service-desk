"use strict";
// Copyright (c) Microsoft. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_http_1 = require("@microsoft/sp-http");
var NavigationDataError_1 = tslib_1.__importStar(require("./NavigationDataError"));
var Killswitches_1 = require("../common/Killswitches");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var fetchAppDataQosScenarioName = 'NavigationDataStore.fetchAppData';
/**
 * Navigation Data Provider for SPFx applications.
 * It fetches data required to initiate an SPFx Navigation operation. It also caches the navigation
 * data when appropriate
 *
 * @internal
 */
var NavigationDataProvider = /** @class */ (function () {
    function NavigationDataProvider(serviceScope, validator) {
        sp_core_library_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        sp_core_library_1.Validate.isNotNullOrUndefined(validator, 'validator');
        this._spHttpClient = serviceScope.consume(sp_http_1.SPHttpClient.serviceKey);
        this._dataValidator = validator;
    }
    NavigationDataProvider._generatePreloadHeaders = function (props) {
        var headers = new Headers();
        if (props && props.isPrefetchRequest) {
            headers.append('X-RequestPrefetchLink', '1');
        }
        // tslint:disable-next-line:no-string-literal
        if (window['__spfxMark']) {
            headers.append('X-Service-Worker-In-Place-Nav', 'true');
        }
        return headers;
    };
    NavigationDataProvider._generatePrefetchHeaders = function (props) {
        var headers = new Headers();
        headers.append('X-RequestPrefetchData', '1');
        if (props && props.isPrefetchRequest) {
            headers.append('X-RequestPrefetchLink', '1');
        }
        return headers;
    };
    Object.defineProperty(NavigationDataProvider.prototype, "buildId", {
        get: function () {
            return this._buildId;
        },
        /**
         * Keeps track of the build id the application is bootstrapped with.
         * Used to detect when the build id change while the app is
         * running, and to invalidate manifest caches containing the old build id.
         *
         * @param buildId - Build id the application was bootstrapped with.
         */
        set: function (buildId) {
            this._buildId = buildId;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Issues a request to get data association with a given url
     *
     * @param url - URL of the page to fetch data for
     * @param requestType - The request type
     * @param props - Optional Navigation property bag
     *
     * @returns - A navigation data response promise
     */
    NavigationDataProvider.prototype.getData = function (url, props) {
        var _this = this;
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        if (Killswitches_1.Killswitches.isDisableNavigationCacheKSActivated()) {
            return this._getStore().then(function (store) { return store.getData(url, props); });
        }
        var preloadedDataPromise = this._fetchData(url, NavigationDataProvider._generatePreloadHeaders(props)).then(function (navData) {
            _this._dataValidator(navData);
            return navData;
        });
        var prefetchedDataPromise = undefined; // tslint:disable-line:no-any
        if (props && props.enableDataPrefetch) {
            var qosMonitor_1 = new sp_diagnostics_1._QosMonitor(fetchAppDataQosScenarioName);
            prefetchedDataPromise =
                // tslint:disable-next-line:no-any
                this._fetchData(url, NavigationDataProvider._generatePrefetchHeaders(props))
                    // tslint:disable-next-line:no-any
                    .then(function (appData) {
                    qosMonitor_1.writeSuccess();
                    return appData;
                })
                    .catch(function (e) {
                    qosMonitor_1.writeUnexpectedFailure(e);
                    throw e;
                });
        }
        return Promise.resolve({
            preloadedData: preloadedDataPromise,
            prefetchedData: prefetchedDataPromise
        });
    };
    /**
     * Invalidates a cached resource by its URL. Any subsequent request for the resource
     * will be fetched from its origin and recached.
     *
     * @param url - URL to invalidate
     */
    NavigationDataProvider.prototype.invalidate = function (url) {
        if (Killswitches_1.Killswitches.isDisableNavigationCacheKSActivated()) {
            return this._getStore().then(function (store) {
                store.remove(url);
            });
        }
        // no-op with the current implementation
        return Promise.resolve();
    };
    NavigationDataProvider.prototype._getStore = function () {
        var _this = this;
        if (this._navigationStore) {
            return Promise.resolve(this._navigationStore);
        }
        return (this._navigationStorePromise ||
            (this._navigationStorePromise = Promise.resolve().then(function () { return tslib_1.__importStar(require('./NavigationDataStore' /* webpackChunkName: 'sp-navigation-datastore' */)); }).then(function (dataStore) {
                _this._navigationStore = new dataStore.default(NavigationDataProvider.storeKey, NavigationDataProvider.storeBuildIdKey, _this._buildId, function (url, headers) {
                    return _this._fetchData(url, headers);
                }, _this._dataValidator);
                return _this._navigationStore;
            })));
    };
    /**
     * Loads a page from SharePoint.
     *
     * @param url - URL of the page to load.
     * @param requestHeaders - Optional request headers
     * @return Promise with the pertinent data for the request.
     */
    NavigationDataProvider.prototype._fetchData = function (url, requestHeaders) {
        var urlToLoad = url.split('#')[0];
        // Using ?as=json to ensure that the browser doesn't return a cached request for the HTML
        return this._spHttpClient
            .get(urlToLoad + (urlToLoad.indexOf('?') === -1 ? '?' : '&') + 'as=json', sp_http_1.SPHttpClient.configurations.v1, requestHeaders ? { headers: requestHeaders } : undefined)
            .then(function (response) {
            if (!response.ok) {
                throw NavigationDataError_1.default.createNavigationError(NavigationDataError_1.NavigationErrorCode.fetchData, new Error(response.statusMessage));
            }
            else {
                return response.json().catch(function (error) {
                    throw NavigationDataError_1.default.createNavigationError(NavigationDataError_1.NavigationErrorCode.parseData, error);
                });
            }
        });
    };
    NavigationDataProvider.storeKey = 'sp-application-base:NavigationDataStore';
    NavigationDataProvider.storeBuildIdKey = 'sp-application-base:NavigationDataStore:buildId';
    return NavigationDataProvider;
}());
exports.default = NavigationDataProvider;
//# sourceMappingURL=NavigationDataProvider.js.map
/**
 * SharePoint Framework support for customizing the list view.
 *
 * @packagedocumentation
 */

import { BaseExtension } from '@microsoft/sp-extension-base';
import { ExtensionContext } from '@microsoft/sp-extension-base';
import { FormDisplayMode } from '@microsoft/sp-core-library';
import { Guid } from '@microsoft/sp-core-library';
import { ICommandSetExtensionManifest } from '@microsoft/sp-module-interfaces';
import { IDisposable } from '@microsoft/sp-core-library';
import type { IODataListItem } from '@microsoft/sp-odata-types';
import { SPEvent } from '@microsoft/sp-core-library';
import { SPEventArgs } from '@microsoft/sp-core-library';
import { SPField } from '@microsoft/sp-page-context';

/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that customizes the appearance of fields in
 * a SharePoint ListView.
 *
 * In the component manifest, the "extensionType" should be set to "FieldCustomizer".
 *
 * @public
 */
export declare abstract class BaseFieldCustomizer<TProperties> extends BaseExtension<TProperties> {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponent.context}
     */
    protected readonly context: FieldCustomizerContext;
    onRenderCell(event: IFieldCustomizerCellEventParameters): void;
    onDisposeCell(event: IFieldCustomizerCellEventParameters): void;
}

/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that provides a custom list form (display, new, edit) for a SharePoint list.
 * @public
 */
export declare abstract class BaseFormCustomizer<TProperties> extends BaseExtension<TProperties> {
    /* Excluded from this release type: _formActionEventName */
    /**
     * {@inheritDoc @microsoft/sp-extension-base#BaseExtension.context}
     */
    readonly context: FormCustomizerContext;
    private readonly _formActionEvent;
    private _displayMode;
    /**
     * This property is a pointer to the root DOM element of the form. This is a DIV element and contains the whole
     * DOM subtree of the form.
     *
     * @readonly
     */
    protected get domElement(): HTMLElement;
    /**
     * Display mode of the form: Edit, Display or New.
     *
     * @readonly
     */
    protected get displayMode(): FormDisplayMode;
    /* Excluded from this release type: formActionEvent */
    /* Excluded from this release type: _init */
    /* Excluded from this release type: _internalRender */
    /* Excluded from this release type: _internalSetDisplayMode */
    /* Excluded from this release type: _save */
    /* Excluded from this release type: _close */
    /**
     * Disposes the component.
     *
     * @remarks
     * Please, do not override this method.
     * Override the `onDispose` method instead.
     */
    dispose(): void;
    /* Excluded from this release type: _initializeExtensionType */
    /**
     * This API is called to render the form. There is no base implementation of this API and the form is
     * required to override this API.
     */
    protected abstract render(): void;
    /**
     * Call this method after the form has been saved to inform the application that the form has been saved.
     */
    protected formSaved(): void;
    /**
     * Call this method after the form has been closed/cancelled to inform the application that the form has been closed.
     */
    protected formClosed(): void;
}

/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that provides a command set for a SharePoint list view.
 *
 * @remarks
 * In the component manifest, the "extensionType" should be set to "ListViewCommandSet".
 *
 * @privateRemarks
 *
 * Eventually other command set classes will be introduced, and then we will introduce a base class
 * so the hierarchy goes `BaseListViewCommandSet <- BaseCommandSet <- BaseExtension <- BaseComponent`.
 *
 * @public
 */
export declare abstract class BaseListViewCommandSet<TProperties> extends BaseExtension<TProperties> {
    /**
     * {@inheritDoc @microsoft/sp-extension-base#BaseExtension.context}
     */
    readonly context: ListViewCommandSetContext;
    /* Excluded from this release type: _raiseOnChange */
    /* Excluded from this release type: __constructor */
    /**
     * Returns the command with the given id.
     * Returns undefined if there is not command with the given id.
     * @param id - Id of the command
     */
    tryGetCommand(id: string): Command;
    /**
     * This event occurs whenever the ListView state changes.
     * virtual
     * @remarks
     * This event allows the implementor to tailor the visibility of the command.
     *
     * @deprecated Use context.listView.listViewStateChangedEvent instead.
     */
    onListViewUpdated(event: IListViewCommandSetListViewUpdatedParameters): void;
    /**
     * This event occurs when the command is invoked, e.g. because the user
     * clicked on the toolbar button or menu item.
     * virtual
     */
    onExecute(event: IListViewCommandSetExecuteEventParameters): void;
    /**
     * Use this method to fire OnChange event and initialize a reflow of the ListView.
     */
    raiseOnChange(): void;
}

/**
 * Provides access to a ListView column, which is the visual presentation
 * of a field.
 *
 * @remarks
 *
 * A SharePoint "field" (SPField) defines the data storage for a property of a list item.
 * (If the list item represents a document, then the field is sometimes called a "property".)
 *
 * A "column" is the visual presentation of a field, when displayed by the ListView.
 *
 * @public
 */
export declare abstract class ColumnAccessor {
    /* Excluded from this release type: __constructor */
    /**
     * The server-side definition of the field.
     * This property is read-only.
     */
    abstract get field(): SPField;
    /**
     * Whether to show this column in the list view.
     * This property is read-only.
     */
    abstract get visible(): boolean;
}

/**
 * Represents a command belonging to a command set.
 *
 * @remarks
 * The BaseListViewCommandSet extension type exposes generalized commands that may be displayed as tool bar buttons,
 * context menu items, etc. These commands are initially defined in the extension's manifest file. At runtime, the
 * corresponding Command object can be obtained by calling {@link BaseListViewCommandSet.tryGetCommand}.
 * The command's appearance can be customized by assigning its properties, for example to hide a command that is not
 * contextually relevant, or to pluralize the title based on the number of selected items.
 * @public
 */
export declare class Command {
    /**
     * Id of the command.
     */
    id: string;
    /**
     * A short label to be displayed by the associated button, menu item, etc.
     * @remarks
     * Example: "Show information"
     *
     * Altering the title property is intended to allow minor changes to the title, e.g. “Submit these 3 items” or
     * toggling between “Schedule” and “Unschedule”. Developers are discouraged from assigning a title that radically
     * alters the meaning of the command, because administrators should be able to examine the extension manifest to
     * understand which commands are being implemented by a given extension.
     */
    title: string;
    /**
     * An optional URL for an image to be displayed next to the command. The requirements for this image
     * are defined by the type of extension; some extension types may not display the image at all.
     *
     * @remarks
     * This must be a absolute URL.
     */
    iconImageUrl: string | undefined;
    /**
     * Custom accessibility text for the browser's "aria-label" attribute.  If omitted, the title property
     * will be used by default.
     * Example: "Show information.  Press ENTER to select."
     */
    ariaLabel: string | undefined;
    /**
     * True if the command is visible.
     */
    visible: boolean;
    /**
     * Whether the command is currently disabled.
     */
    disabled: boolean | undefined;
}

/**
 * This object provides contextual information for BaseFieldCustomizer.
 * @public
 */
export declare class FieldCustomizerContext extends ExtensionContext {
    private _listView;
    private _field;
    /* Excluded from this release type: __constructor */
    /**
     * If the field customizer is bounded to the SharePoint list view, this provides access
     * to the list view specific functionality; otherwise the value is undefined.
     *
     * @remarks
     * Although the SharePoint list view is the main usage scenario, field customizers
     * can be used by other user interface surfaces.  For example, in the future SharePoint
     * may support field customizers on a display/edit form.
     *
     * @returns the SharePoint list view, or undefined if there is none.
     */
    tryGetListView(): ListViewAccessor | undefined;
    /**
     * Provides access to the SharePoint field that the customizer will operate on.
     */
    get field(): SPField;
}

/* Excluded from this release type: FormAction */

/* Excluded from this release type: FormActionEventArgs */

/**
 * Form Customizer Context. This object contains contxtual services and properties for the form.
 *
 * @public
 */
export declare class FormCustomizerContext extends ExtensionContext implements IFormCustomizerContext {
    private _list;
    private _contentType;
    private _folderInfo;
    private _itemId;
    private _item;
    private _domElement;
    private _formCustomizerHost;
    constructor(extensionContextParameters: _IExtensionContextParameters, formCustomizerContextParameters: _IFormCustomizerContextParameters);
    /**
     * The list associated with the form.
     */
    get list(): IList;
    /**
     * The content type associated with the form.
     */
    get contentType(): IContentType;
    /**
     * The folder information where the item is located/should be created.
     */
    get folderInfo(): IFolderInfo;
    /**
     * The item id of the item being edited or viewed.
     */
    get itemId(): number | undefined;
    /**
     * The item data of the item being edited or viewed.
     */
    get item(): IListItem | undefined;
    /**
     * The root DOM element of the form. This is a DIV element container for the custom form.
     */
    get domElement(): HTMLElement;
    /* Excluded from this release type: _host */
}

/* Excluded from this release type: FormCustomizerHost */

/* Excluded from this release type: _IAdditionalInitParameters */

/**
 * Provides information about the state of a column in the list view
 *
 * @public
 */
export declare interface IColumn {
    /**
     * The GUID identifier for this field.
     */
    readonly id: Guid;
    /**
     * The internal name of the field. This name is usually used to find the field.
     */
    readonly internalName: string;
    /**
     * The type of the field represented as a string
     */
    readonly fieldType: string;
    /**
     * Whether the field is required for each list item in the list
     */
    readonly isRequired: boolean;
    /**
     * Whether the column is visible in the view
     */
    readonly isVisible: boolean;
    /**
     * The display name of the field. This name is shown as column name in UI.
     */
    readonly displayName: string;
    /**
     * The unique identifier of the client-side component associated with the field.
     */
    readonly clientSideComponentId: Guid | undefined;
    /**
     * This property is only used when a `ClientSideComponentId` is specified.  It is optional.
     *
     * @remarks
     * If non-empty, the string must contain a JSON object with custom initialization properties
     * whose format and meaning are defined by the client-side component.
     */
    readonly clientSideComponentProperties: string;
}

/**
 * Provides information about the content type
 *
 * @public
 */
export declare interface IContentType {
    /**
     * Content type string id
     */
    readonly id: string;
    /**
     * Content type name
     */
    readonly name: string;
    /**
     * Custom formatter JSON for the form
     */
    readonly ClientFormCustomFormatter: string | undefined;
    /**
     * Content type schema XML
     */
    readonly schemaXml: string | undefined;
}

/* Excluded from this release type: _IExtensionContextParameters */

/**
 * Event parameters for BaseFieldCustomizer.onRenderCell()
 * @public
 */
export declare interface IFieldCustomizerCellEventParameters {
    /**
     * The HTML "div" element that the extension will take ownership of.
     * This ownership will end when onDisposeCell() is called.
     */
    readonly domElement: HTMLDivElement;
    /**
     * The list item being edited.
     */
    readonly listItem: ListItemAccessor;
    /**
     * The value of the field being rendered.
     */
    readonly fieldValue: any;
    /**
     * An implementation defined storage property.
     *
     * @remarks
     * For example, suppose that resources need to be allocated during rendering
     * (e.g. a renderer object, an HTTP request to be canceled, a cache slot, etc).
     * The onRenderCell() implementation could store a key or handle in this property,
     * and then onDisposeCell() can use this key to find the resource to be freed.
     */
    userData: any;
}

/* Excluded from this release type: _IFieldCustomizerContextParameters */

/**
 * Provides information about the state of the filters applied to the ListView.
 *
 * @public
 */
export declare interface IFilter {
    /**
     * Field name to filter on.
     */
    readonly fieldName: string;
    /**
     * Values to filter on.
     */
    values: ReadonlyArray<string>;
}

/**
 * Provides information about the state of the folder in the ListView.
 *
 * @public
 */
export declare interface IFolderInfo {
    /**
     * Folder path.
     */
    readonly folderPath: string;
}

/* Excluded from this release type: _IFormCustomizerAdditionalInitParameters */

/**
 * FormCustomizerContext-specific properties.
 *
 * @public
 */
export declare interface IFormCustomizerContext {
    /**
     * The list associated with the form.
     */
    readonly list: IList;
    /**
     * The content type associated with the form.
     */
    readonly contentType: IContentType;
    /**
     * The folder information where the item is located/should be created.
     */
    readonly folderInfo: IFolderInfo;
    /**
     * The item id of the item being edited or viewed.
     */
    readonly itemId?: number;
    /**
     * The item data of the item being edited or viewed.
     */
    readonly item?: IListItem;
    /**
     * The root DOM element of the form. This is a DIV element container for the custom form.
     */
    readonly domElement: HTMLElement;
}

/* Excluded from this release type: _IFormCustomizerContextParameters */

/* Excluded from this release type: IFormCustomizerHostParameters */

/**
 * Provides information about the list rendered by the ListView.
 *
 * @public
 */
export declare interface IList {
    /**
     * List id.
     */
    readonly guid: Guid;
    /**
     * List title.
     */
    readonly title: string;
    /**
     * List server relative url.
     */
    readonly serverRelativeUrl: string;
}

/**
 * @public
 *
 * Represents an SP.ListItem data (OData).
 */
export declare interface IListItem extends IODataListItem {
}

/**
 * Provides information about the state of the ListView.
 *
 * @public
 */
export declare interface IListViewAccessorState {
    /**
     * List information.
     */
    readonly list?: IList;
    /**
     * View information.
     */
    readonly view?: IView;
    /**
     * Current folder information.
     */
    readonly folderInfo?: IFolderInfo;
    /**
     * Columns information.
     */
    readonly columns: ReadonlyArray<IColumn>;
    /**
     * Selected rows information.
     */
    readonly selectedRows?: ReadonlyArray<IRow>;
    /**
     * Rows information.
     */
    readonly rows: ReadonlyArray<IRow>;
    /**
     * Applied filters information.
     */
    readonly appliedFilters?: {
        [fieldName: string]: IFilter;
    };
    /**
     * Sort field name.
     */
    readonly sortField?: string;
    /**
     * Sort direction.
     */
    readonly sortAscending?: boolean;
}

/* Excluded from this release type: _IListViewCommandSetContextParameters */

/**
 * Parameters for {@link BaseListViewCommandSet.onExecute}
 *
 * @public
 */
export declare interface IListViewCommandSetExecuteEventParameters {
    /**
     * The unique identifier for the command.  This is specified as ICommandDefinition.commandId
     * in the component manifest.
     */
    readonly itemId: string;
    /**
     * The currently selected ListView rows, at the time when the event occurred.
     */
    readonly selectedRows: ReadonlyArray<RowAccessor>;
}

/**
 * Parameters for {@link BaseListViewCommandSet.onListViewUpdated}
 *
 * @public
 */
export declare interface IListViewCommandSetListViewUpdatedParameters {
    /**
     * The currently selected ListView rows, at the time when the event occurred.
     */
    readonly selectedRows: ReadonlyArray<RowAccessor>;
}

/**
 * Provides information about the list item's state rendered by the ListView.
 *
 * @public
 */
export declare interface IRow {
    /**
     * A map of column values for the row. They key is the column internal name and the value
     * is its corresponding value in the row.
     */
    readonly values: {
        [columnInternalName: string]: Readonly<any>;
    };
}

/**
 * Provides information about the view rendered by the ListView.
 *
 * @public
 */
export declare interface IView {
    /**
     * View id.
     */
    readonly id: Guid;
    /**
     * View title.
     */
    readonly title: string;
    /**
     * View server relative url.
     */
    readonly url: string;
}

/**
 * When a field customizer extension is rendering a field, the ListItemAccessor provides
 * access to the associated SharePoint list item.
 *
 * @remarks
 *
 * ListItemAccessor allows a field customizer extension to determine which fields are available
 * in the editor and retrieve the current values for those fields.  In the future, it may
 * also support validation and editing operations.
 *
 * When the editor is the SharePoint list view, the ListViewAccessor uses the RowAccessor
 * subclass instead of the ListItemAccessor base class.  This allows additional functionality
 * to be exposed, for example determining whether the associated table row is selected or not.
 *
 * @public
 */
export declare abstract class ListItemAccessor {
    /* Excluded from this release type: __constructor */
    /**
     * The SharePoint fields that are currently available in the editor for this list item.
     *
     * @remarks
     * The set of available fields depends on the editing context.  For example, if a list view
     * column is hidden, the corresponding field definition may not be loaded.  Field customizers
     * should not assume that a given field will be available, even if it is defined in the
     * content type.
     */
    abstract get fields(): ReadonlyArray<SPField>;
    /**
     * Retrieves the current data value for the field with the specified internal name.
     * The value will be a primitive JavaScript object such as a string, number, etc.
     */
    abstract getValueByName(internalName: string): any;
    /**
     * Retrieves the current data value for the specified field.
     * The value will be a primitive JavaScript object such as a string, number, etc.
     */
    abstract getValue(field: SPField): any;
}

/**
 * Provides access to a SharePoint ListView control.
 *
 * @public
 */
export declare abstract class ListViewAccessor implements IDisposable {
    /* Excluded from this release type: _selectedRowsChangedEventName */
    /* Excluded from this release type: _listViewStateChangedEventName */
    private _selectedRowsChangedEvent;
    private _listViewStateChangedEvent;
    private readonly _listViewStateChangedEventName;
    private _isDisposed;
    /* Excluded from this release type: __constructor */
    /**
     * The columns in associated with this view, including hidden columns.
     */
    abstract get columns(): ReadonlyArray<ColumnAccessor>;
    /**
     * Currently rendered rows in the list view.
     */
    abstract get rows(): ReadonlyArray<RowAccessor>;
    /**
     * Selected rows in the list view.
     */
    abstract get selectedRows(): ReadonlyArray<RowAccessor> | undefined;
    /**
     * Basic information about the list rendered by the list view.
     */
    abstract get list(): IList | undefined;
    /**
     * Basic information about the view rendered by the list view.
     */
    abstract get view(): IView | undefined;
    /**
     * Folder information for the list view.
     */
    abstract get folderInfo(): IFolderInfo | undefined;
    /**
     * Filters applied to the list view.
     */
    abstract get appliedFilters(): {
        [fieldName: string]: IFilter;
    } | undefined;
    /**
     * Sort field name
     */
    abstract get sortField(): string | undefined;
    /**
     * Specifies whether the list view is sorted ascending or descending.
     */
    abstract get sortAscending(): boolean | undefined;
    /**
     * Returns the list view column corresponding to the field with the specified internal name,
     * or undefined if none is found.
     */
    abstract tryGetColumnByName(internalName: string): ColumnAccessor | undefined;
    /**
     * Event that gets raised every time the selected items in the list view change.
     * @eventproperty
     */
    get selectedRowsChangedEvent(): SPEvent<SelectedRowsChangedEventArgs>;
    /**
     * Event that gets raised every time the list view state changes.
     *
     * @eventproperty
     */
    get listViewStateChangedEvent(): SPEvent<ListViewStateChangedEventArgs>;
    /* Excluded from this release type: dispose */
    /* Excluded from this release type: isDisposed */
}

/**
 * Describes the type of list view state changes.
 *
 * @public
 */
export declare enum ListViewAccessorStateChanges {
    None = 0,
    List = 1,
    View = 2,
    Columns = 4,
    SelectedRows = 8,
    Rows = 16,
    AppliedFilters = 32,
    Sort = 64,
    FolderInfo = 128
}

/**
 * This object provides contextual information for BaseListViewCommandSet.
 * @public
 */
export declare class ListViewCommandSetContext extends ExtensionContext {
    /**
     * {@inheritDoc @microsoft/sp-component-base#BaseComponentContext.manifest}
     */
    readonly manifest: ICommandSetExtensionManifest;
    private _listView;
    private _commandArray;
    /* Excluded from this release type: __constructor */
    /**
     * Provides access to the ListView control that the customizer will operate on.
     */
    get listView(): ListViewAccessor;
    /* Excluded from this release type: _commands */
}

/**
 * Arguments for the list view state changed event.
 *
 * @public
 */
export declare class ListViewStateChangedEventArgs extends SPEventArgs {
    /**
     * Previous state of the ListView.
     */
    prevState: Readonly<IListViewAccessorState>;
    /**
     * Changes that were made to the ListView state.
     */
    stateChanges: ListViewAccessorStateChanges;
}

/**
 * Provides access to a ListView row, which is the visual presentation
 * of a SharePoint list item.
 *
 * @remarks
 *
 * A SharePoint "list item" (SPListItem) is a data storage record in the content
 * management system; it stores an array of values for the associated fields.
 *
 * A "row" is the visual presentation of a list item, when displayed by the ListView;
 * it stores an array of cell values for the associated columns.
 *
 * @public
 */
export declare abstract class RowAccessor extends ListItemAccessor {
    /* Excluded from this release type: __constructor */
}

/**
 * Arguments for the selected rows changed event.
 *
 * @public
 */
export declare class SelectedRowsChangedEventArgs extends SPEventArgs {
    /**
     * The list of rows that were selected in the list view at the time when the event was fired.
     */
    selectedRows: ReadonlyArray<RowAccessor>;
}

export { }

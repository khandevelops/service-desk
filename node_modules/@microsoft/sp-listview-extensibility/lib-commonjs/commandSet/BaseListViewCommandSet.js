"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_extension_base_1 = require("@microsoft/sp-extension-base");
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that provides a command set for a SharePoint list view.
 *
 * @remarks
 * In the component manifest, the "extensionType" should be set to "ListViewCommandSet".
 *
 * @privateRemarks
 *
 * Eventually other command set classes will be introduced, and then we will introduce a base class
 * so the hierarchy goes `BaseListViewCommandSet <- BaseCommandSet <- BaseExtension <- BaseComponent`.
 *
 * @public
 */
var BaseListViewCommandSet = /** @class */ (function (_super) {
    tslib_1.__extends(BaseListViewCommandSet, _super);
    /**
     * @internal
     */
    function BaseListViewCommandSet() {
        var _this = _super.call(this) || this;
        /**
         * @internal
         */
        _this._raiseOnChange = undefined; // provided by Command set adapter
        return _this;
    }
    /**
     * Returns the command with the given id.
     * Returns undefined if there is not command with the given id.
     * @param id - Id of the command
     */
    BaseListViewCommandSet.prototype.tryGetCommand = function (id) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        var commands = this.context._commands.filter(function (command) { return command.id === id; });
        return commands[0];
    };
    /**
     * This event occurs whenever the ListView state changes.
     * virtual
     * @remarks
     * This event allows the implementor to tailor the visibility of the command.
     *
     * @deprecated Use context.listView.listViewStateChangedEvent instead.
     */
    BaseListViewCommandSet.prototype.onListViewUpdated = function (event) {
        // (implemented by child class)
    };
    /**
     * This event occurs when the command is invoked, e.g. because the user
     * clicked on the toolbar button or menu item.
     * virtual
     */
    BaseListViewCommandSet.prototype.onExecute = function (event) {
        // (implemented by child class)
    };
    /**
     * Use this method to fire OnChange event and initialize a reflow of the ListView.
     */
    BaseListViewCommandSet.prototype.raiseOnChange = function () {
        if (this._raiseOnChange) {
            this._raiseOnChange();
        }
    };
    return BaseListViewCommandSet;
}(sp_extension_base_1.BaseExtension));
exports.default = BaseListViewCommandSet;
//# sourceMappingURL=BaseListViewCommandSet.js.map
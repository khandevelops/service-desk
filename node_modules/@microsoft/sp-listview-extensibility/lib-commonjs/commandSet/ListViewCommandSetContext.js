"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_extension_base_1 = require("@microsoft/sp-extension-base");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
/**
 * This object provides contextual information for BaseListViewCommandSet.
 * @public
 */
var ListViewCommandSetContext = /** @class */ (function (_super) {
    tslib_1.__extends(ListViewCommandSetContext, _super);
    /**
     * @internal
     */
    function ListViewCommandSetContext(extensionContextParameters, listViewCommandSetContextParameters) {
        var _this = _super.call(this, extensionContextParameters) || this;
        _this._listView = listViewCommandSetContextParameters.listView;
        _this._commandArray = [];
        var itemsMap = _this.manifest.items;
        for (var _i = 0, _a = Object.keys(itemsMap); _i < _a.length; _i++) {
            var itemId = _a[_i];
            // Future proof for grouping
            if (itemsMap[itemId].type === 'command') {
                var iconUrl = itemsMap[itemId].iconImageUrl;
                if (iconUrl && !sp_core_library_1.UrlUtilities.isDataUrl(iconUrl)) {
                    iconUrl = sp_core_library_1.UrlUtilities.resolve(iconUrl, _this.manifest.loaderConfig.internalModuleBaseUrls[0]);
                }
                _this._commandArray.push({
                    id: itemId,
                    title: itemsMap[itemId].title.default || '',
                    ariaLabel: itemsMap[itemId].ariaLabel
                        ? itemsMap[itemId].ariaLabel.default
                        : undefined,
                    iconImageUrl: iconUrl,
                    visible: true,
                    disabled: undefined
                });
            }
        }
        // updating title and ariaLabel based on UI culture
        if (!!_this._commandArray.length) {
            _this.serviceScope.whenFinished(function () {
                var pageContext = _this.serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
                var currentUICulture = pageContext.cultureInfo.currentUICultureName;
                _this._commandArray.forEach(function (command) {
                    var item = itemsMap[command.id];
                    command.title = sp_core_library_1.Text._getLocalizedString(item.title, currentUICulture) || '';
                    if (item.ariaLabel) {
                        command.ariaLabel = sp_core_library_1.Text._getLocalizedString(item.ariaLabel, currentUICulture);
                    }
                });
            });
        }
        return _this;
    }
    Object.defineProperty(ListViewCommandSetContext.prototype, "listView", {
        /**
         * Provides access to the ListView control that the customizer will operate on.
         */
        get: function () {
            return this._listView;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListViewCommandSetContext.prototype, "_commands", {
        /**
         * Returns an array with all commands.
         *
         * @privateRemarks
         * In the future commands won't be a flat list. This allows us to get all commands together, so we can
         * provide a straight-forward API tryGetCommand in the BaseListViewCommandSet itself.
         *
         * @internal
         */
        get: function () {
            return this._commandArray;
        },
        enumerable: false,
        configurable: true
    });
    return ListViewCommandSetContext;
}(sp_extension_base_1.ExtensionContext));
exports.default = ListViewCommandSetContext;
//# sourceMappingURL=ListViewCommandSetContext.js.map
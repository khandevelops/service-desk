"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListViewStateChangedEventArgs = exports.SelectedRowsChangedEventArgs = exports.RowAccessor = exports.ColumnAccessor = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var ListItemAccessor_1 = tslib_1.__importDefault(require("./ListItemAccessor"));
/**
 * Provides access to a ListView column, which is the visual presentation
 * of a field.
 *
 * @remarks
 *
 * A SharePoint "field" (SPField) defines the data storage for a property of a list item.
 * (If the list item represents a document, then the field is sometimes called a "property".)
 *
 * A "column" is the visual presentation of a field, when displayed by the ListView.
 *
 * @public
 */
var ColumnAccessor = /** @class */ (function () {
    /** @internal */
    function ColumnAccessor() {
        // (mark constructor as internal)
    }
    return ColumnAccessor;
}());
exports.ColumnAccessor = ColumnAccessor;
/**
 * Provides access to a ListView row, which is the visual presentation
 * of a SharePoint list item.
 *
 * @remarks
 *
 * A SharePoint "list item" (SPListItem) is a data storage record in the content
 * management system; it stores an array of values for the associated fields.
 *
 * A "row" is the visual presentation of a list item, when displayed by the ListView;
 * it stores an array of cell values for the associated columns.
 *
 * @public
 */
var RowAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(RowAccessor, _super);
    /**
     * @internal
     */
    function RowAccessor() {
        return _super.call(this) || this;
    }
    return RowAccessor;
}(ListItemAccessor_1.default));
exports.RowAccessor = RowAccessor;
/**
 * Arguments for the selected rows changed event.
 *
 * @public
 */
var SelectedRowsChangedEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(SelectedRowsChangedEventArgs, _super);
    function SelectedRowsChangedEventArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SelectedRowsChangedEventArgs;
}(sp_core_library_1.SPEventArgs));
exports.SelectedRowsChangedEventArgs = SelectedRowsChangedEventArgs;
/**
 * Arguments for the list view state changed event.
 *
 * @public
 */
var ListViewStateChangedEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(ListViewStateChangedEventArgs, _super);
    function ListViewStateChangedEventArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ListViewStateChangedEventArgs;
}(sp_core_library_1.SPEventArgs));
exports.ListViewStateChangedEventArgs = ListViewStateChangedEventArgs;
/**
 * Provides access to a SharePoint ListView control.
 *
 * @public
 */
var ListViewAccessor = /** @class */ (function () {
    /**
     * @internal
     */
    function ListViewAccessor(eventPrefix) {
        this._isDisposed = false;
        this._selectedRowsChangedEvent = new sp_core_library_1.SPEvent(ListViewAccessor._selectedRowsChangedEventName);
        this._listViewStateChangedEventName = "".concat(ListViewAccessor._listViewStateChangedEventName).concat(eventPrefix || '');
        this._listViewStateChangedEvent = new sp_core_library_1.SPEvent(this._listViewStateChangedEventName);
    }
    Object.defineProperty(ListViewAccessor.prototype, "selectedRowsChangedEvent", {
        /**
         * Event that gets raised every time the selected items in the list view change.
         * @eventproperty
         */
        get: function () {
            return this._selectedRowsChangedEvent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListViewAccessor.prototype, "listViewStateChangedEvent", {
        /**
         * Event that gets raised every time the list view state changes.
         *
         * @eventproperty
         */
        get: function () {
            return this._listViewStateChangedEvent;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     */
    ListViewAccessor.prototype.dispose = function () {
        sp_core_library_1._SPEventManager.instance.removeEvent(this._listViewStateChangedEventName);
        this._isDisposed = true;
    };
    Object.defineProperty(ListViewAccessor.prototype, "isDisposed", {
        /**
         * @internal
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * SPEvent name when the selected rows in a list have changed.
     *
     * @internal
     */
    ListViewAccessor._selectedRowsChangedEventName = 'listView.selectedRowsChanged';
    /**
     * SPEvent name when the list view state has changed.
     *
     * @internal
     */
    ListViewAccessor._listViewStateChangedEventName = 'listView.stateChanged';
    return ListViewAccessor;
}());
exports.default = ListViewAccessor;
//# sourceMappingURL=ListViewAccessor.js.map
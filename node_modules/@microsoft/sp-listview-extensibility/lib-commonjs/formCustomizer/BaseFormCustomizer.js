"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_extension_base_1 = require("@microsoft/sp-extension-base");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var FormActionEventArgs_1 = require("./FormActionEventArgs");
/**
 * This is the base class that third parties should extend when implementing
 * a client-side extension that provides a custom list form (display, new, edit) for a SharePoint list.
 * @public
 */
var BaseFormCustomizer = /** @class */ (function (_super) {
    tslib_1.__extends(BaseFormCustomizer, _super);
    function BaseFormCustomizer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._formActionEvent = new sp_core_library_1.SPEvent(BaseFormCustomizer._formActionEventName);
        return _this;
    }
    Object.defineProperty(BaseFormCustomizer.prototype, "domElement", {
        // Readonly protected properties. To change these to readonly once TypeScript supports that feature.
        /**
         * This property is a pointer to the root DOM element of the form. This is a DIV element and contains the whole
         * DOM subtree of the form.
         *
         * @readonly
         */
        get: function () {
            return this.context.domElement;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseFormCustomizer.prototype, "displayMode", {
        /**
         * Display mode of the form: Edit, Display or New.
         *
         * @readonly
         */
        get: function () {
            return this._displayMode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseFormCustomizer.prototype, "formActionEvent", {
        /**
         * Event that gets raised every time the selected items in the list view change.
         * Reserved for the future.
         *
         * @eventproperty
         * @internal
         */
        get: function () {
            return this._formActionEvent;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     */
    BaseFormCustomizer.prototype._init = function (context, propertiesJson, additionalInitParameters) {
        if (additionalInitParameters) {
            this._displayMode = additionalInitParameters.displayMode;
        }
        return _super.prototype._init.call(this, context, propertiesJson, additionalInitParameters);
    };
    /**
     * @internal
     */
    BaseFormCustomizer.prototype._internalRender = function () {
        this.render();
    };
    /**
     * Internal API to set form's display mode.
     * @internal
     */
    BaseFormCustomizer.prototype._internalSetDisplayMode = function (newDisplayMode) {
        this._displayMode = newDisplayMode;
    };
    /**
     * Use this method to initiate saving of the form.
     *
     * @internal
     */
    BaseFormCustomizer.prototype._save = function () {
        sp_core_library_1._SPEventManager.instance.raiseStickyEvent(BaseFormCustomizer._formActionEventName, new FormActionEventArgs_1.FormActionEventArgs(FormActionEventArgs_1.FormAction.Save));
    };
    /**
     * Use this method to initiate closing/cancelling of the form.
     *
     * @internal
     */
    BaseFormCustomizer.prototype._close = function () {
        sp_core_library_1._SPEventManager.instance.raiseStickyEvent(BaseFormCustomizer._formActionEventName, new FormActionEventArgs_1.FormActionEventArgs(FormActionEventArgs_1.FormAction.Close));
    };
    /**
     * Disposes the component.
     *
     * @remarks
     * Please, do not override this method.
     * Override the `onDispose` method instead.
     */
    BaseFormCustomizer.prototype.dispose = function () {
        sp_core_library_1._SPEventManager.instance.removeEvent(BaseFormCustomizer._formActionEventName);
        _super.prototype.dispose.call(this);
    };
    /**
     * @internal
     */
    BaseFormCustomizer.prototype._initializeExtensionType = function () {
        _super.prototype._initializeExtensionType.call(this);
        this.context._host.logEngagement('init');
    };
    /**
     * Call this method after the form has been saved to inform the application that the form has been saved.
     */
    BaseFormCustomizer.prototype.formSaved = function () {
        this.context._host.onSave();
    };
    /**
     * Call this method after the form has been closed/cancelled to inform the application that the form has been closed.
     */
    BaseFormCustomizer.prototype.formClosed = function () {
        this.context._host.onClose();
    };
    /**
     * SPEvent name when the form action should be performed.
     *
     * @internal
     */
    BaseFormCustomizer._formActionEventName = 'formCustomizer.formAction';
    return BaseFormCustomizer;
}(sp_extension_base_1.BaseExtension));
exports.default = BaseFormCustomizer;
//# sourceMappingURL=BaseFormCustomizer.js.map